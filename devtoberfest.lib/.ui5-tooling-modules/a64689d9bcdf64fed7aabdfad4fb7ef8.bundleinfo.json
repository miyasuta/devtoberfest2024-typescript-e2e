{
  "_entries": [
    {
      "name": "chart.js",
      "path": "/home/miyasuta/projects/devtoberfest2024-typescript-e2e/devtoberfest.lib/node_modules/chart.js/dist/chart.cjs",
      "lastModified": 1727641177977,
      "type": "module",
      "code": "sap.ui.define(['exports', './chart2'], (function (exports, chart) { 'use strict';\n\n\ttry { Object.defineProperty(chart.chart, \"__\" + \"esModule\", { value: true }); chart.chart.default = chart.chart; } catch (ex) {}\n\n\texports.Animation = chart.Animation_1;\n\texports.Animations = chart.Animations_1;\n\texports.ArcElement = chart.ArcElement_1;\n\texports.BarController = chart.BarController_1;\n\texports.BarElement = chart.BarElement_1;\n\texports.BasePlatform = chart.BasePlatform_1;\n\texports.BasicPlatform = chart.BasicPlatform_1;\n\texports.BubbleController = chart.BubbleController_1;\n\texports.CategoryScale = chart.CategoryScale_1;\n\texports.Chart = chart.Chart_1;\n\texports.Colors = chart.Colors;\n\texports.DatasetController = chart.DatasetController_1;\n\texports.Decimation = chart.Decimation;\n\texports.DomPlatform = chart.DomPlatform_1;\n\texports.DoughnutController = chart.DoughnutController_1;\n\texports.Element = chart.Element_1;\n\texports.Filler = chart.Filler;\n\texports.Interaction = chart.Interaction_1;\n\texports.Legend = chart.Legend_1;\n\texports.LineController = chart.LineController_1;\n\texports.LineElement = chart.LineElement_1;\n\texports.LinearScale = chart.LinearScale_1;\n\texports.LogarithmicScale = chart.LogarithmicScale_1;\n\texports.PieController = chart.PieController_1;\n\texports.PointElement = chart.PointElement_1;\n\texports.PolarAreaController = chart.PolarAreaController_1;\n\texports.RadarController = chart.RadarController_1;\n\texports.RadialLinearScale = chart.RadialLinearScale_1;\n\texports.Scale = chart.Scale_1;\n\texports.ScatterController = chart.ScatterController_1;\n\texports.SubTitle = chart.SubTitle;\n\texports.Ticks = chart.Ticks;\n\texports.TimeScale = chart.TimeScale_1;\n\texports.TimeSeriesScale = chart.TimeSeriesScale_1;\n\texports.Title = chart.Title_1;\n\texports.Tooltip = chart.Tooltip_1;\n\texports._adapters = chart._adapters;\n\texports._detectPlatform = chart._detectPlatform_1;\n\texports.animator = chart.animator_1;\n\texports.controllers = chart.controllers_1;\n\texports.default = chart.chart;\n\texports.defaults = chart.defaults;\n\texports.elements = chart.elements_1;\n\texports.layouts = chart.layouts_1;\n\texports.plugins = chart.plugins_1;\n\texports.registerables = chart.registerables_1;\n\texports.registry = chart.registry_1;\n\texports.scales = chart.scales_1;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"
    },
    {
      "name": "chart.js/auto",
      "path": "/home/miyasuta/projects/devtoberfest2024-typescript-e2e/devtoberfest.lib/node_modules/chart.js/auto/auto.cjs",
      "lastModified": 1727641177967,
      "type": "module",
      "code": "sap.ui.define(['../chart2'], (function (chart) { 'use strict';\n\n\tconst chartjs = chart.chart;\n\tconst {Chart, registerables} = chartjs;\n\n\tChart.register(...registerables);\n\n\tvar auto = Object.assign(Chart, chartjs);\n\n\ttry { Object.defineProperty(auto, \"__\" + \"esModule\", { value: true }); auto.default = auto; } catch (ex) {}\n\n\treturn auto;\n\n}));\n"
    },
    {
      "name": "chart2",
      "originalName": "chart2",
      "code": "sap.ui.define(['exports'], (function (exports) { 'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tvar chart = {};\n\n\tvar helpers_segment$1 = {};\n\n\tvar color$2 = {exports: {}};\n\n\t/*!\n\t * @kurkle/color v0.3.2\n\t * https://github.com/kurkle/color#readme\n\t * (c) 2023 Jukka Kurkela\n\t * Released under the MIT License\n\t */\n\n\t(function (module, exports) {\n\t\t(function (global, factory) {\n\t\tmodule.exports = factory() ;\n\t\t})(commonjsGlobal, (function () {\n\t\tfunction round(v) {\n\t\t  return v + 0.5 | 0;\n\t\t}\n\t\tconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\n\t\tfunction p2b(v) {\n\t\t  return lim(round(v * 2.55), 0, 255);\n\t\t}\n\t\tfunction b2p(v) {\n\t\t  return lim(round(v / 2.55), 0, 100);\n\t\t}\n\t\tfunction n2b(v) {\n\t\t  return lim(round(v * 255), 0, 255);\n\t\t}\n\t\tfunction b2n(v) {\n\t\t  return lim(round(v / 2.55) / 100, 0, 1);\n\t\t}\n\t\tfunction n2p(v) {\n\t\t  return lim(round(v * 100), 0, 100);\n\t\t}\n\n\t\tconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\n\t\tconst hex = [...'0123456789ABCDEF'];\n\t\tconst h1 = b => hex[b & 0xF];\n\t\tconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\n\t\tconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\n\t\tconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n\t\tfunction hexParse(str) {\n\t\t  var len = str.length;\n\t\t  var ret;\n\t\t  if (str[0] === '#') {\n\t\t    if (len === 4 || len === 5) {\n\t\t      ret = {\n\t\t        r: 255 & map$1[str[1]] * 17,\n\t\t        g: 255 & map$1[str[2]] * 17,\n\t\t        b: 255 & map$1[str[3]] * 17,\n\t\t        a: len === 5 ? map$1[str[4]] * 17 : 255\n\t\t      };\n\t\t    } else if (len === 7 || len === 9) {\n\t\t      ret = {\n\t\t        r: map$1[str[1]] << 4 | map$1[str[2]],\n\t\t        g: map$1[str[3]] << 4 | map$1[str[4]],\n\t\t        b: map$1[str[5]] << 4 | map$1[str[6]],\n\t\t        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n\t\t      };\n\t\t    }\n\t\t  }\n\t\t  return ret;\n\t\t}\n\t\tconst alpha = (a, f) => a < 255 ? f(a) : '';\n\t\tfunction hexString(v) {\n\t\t  var f = isShort(v) ? h1 : h2;\n\t\t  return v\n\t\t    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n\t\t    : undefined;\n\t\t}\n\n\t\tconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\t\tfunction hsl2rgbn(h, s, l) {\n\t\t  const a = s * Math.min(l, 1 - l);\n\t\t  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\t\t  return [f(0), f(8), f(4)];\n\t\t}\n\t\tfunction hsv2rgbn(h, s, v) {\n\t\t  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n\t\t  return [f(5), f(3), f(1)];\n\t\t}\n\t\tfunction hwb2rgbn(h, w, b) {\n\t\t  const rgb = hsl2rgbn(h, 1, 0.5);\n\t\t  let i;\n\t\t  if (w + b > 1) {\n\t\t    i = 1 / (w + b);\n\t\t    w *= i;\n\t\t    b *= i;\n\t\t  }\n\t\t  for (i = 0; i < 3; i++) {\n\t\t    rgb[i] *= 1 - w - b;\n\t\t    rgb[i] += w;\n\t\t  }\n\t\t  return rgb;\n\t\t}\n\t\tfunction hueValue(r, g, b, d, max) {\n\t\t  if (r === max) {\n\t\t    return ((g - b) / d) + (g < b ? 6 : 0);\n\t\t  }\n\t\t  if (g === max) {\n\t\t    return (b - r) / d + 2;\n\t\t  }\n\t\t  return (r - g) / d + 4;\n\t\t}\n\t\tfunction rgb2hsl(v) {\n\t\t  const range = 255;\n\t\t  const r = v.r / range;\n\t\t  const g = v.g / range;\n\t\t  const b = v.b / range;\n\t\t  const max = Math.max(r, g, b);\n\t\t  const min = Math.min(r, g, b);\n\t\t  const l = (max + min) / 2;\n\t\t  let h, s, d;\n\t\t  if (max !== min) {\n\t\t    d = max - min;\n\t\t    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t    h = hueValue(r, g, b, d, max);\n\t\t    h = h * 60 + 0.5;\n\t\t  }\n\t\t  return [h | 0, s || 0, l];\n\t\t}\n\t\tfunction calln(f, a, b, c) {\n\t\t  return (\n\t\t    Array.isArray(a)\n\t\t      ? f(a[0], a[1], a[2])\n\t\t      : f(a, b, c)\n\t\t  ).map(n2b);\n\t\t}\n\t\tfunction hsl2rgb(h, s, l) {\n\t\t  return calln(hsl2rgbn, h, s, l);\n\t\t}\n\t\tfunction hwb2rgb(h, w, b) {\n\t\t  return calln(hwb2rgbn, h, w, b);\n\t\t}\n\t\tfunction hsv2rgb(h, s, v) {\n\t\t  return calln(hsv2rgbn, h, s, v);\n\t\t}\n\t\tfunction hue(h) {\n\t\t  return (h % 360 + 360) % 360;\n\t\t}\n\t\tfunction hueParse(str) {\n\t\t  const m = HUE_RE.exec(str);\n\t\t  let a = 255;\n\t\t  let v;\n\t\t  if (!m) {\n\t\t    return;\n\t\t  }\n\t\t  if (m[5] !== v) {\n\t\t    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n\t\t  }\n\t\t  const h = hue(+m[2]);\n\t\t  const p1 = +m[3] / 100;\n\t\t  const p2 = +m[4] / 100;\n\t\t  if (m[1] === 'hwb') {\n\t\t    v = hwb2rgb(h, p1, p2);\n\t\t  } else if (m[1] === 'hsv') {\n\t\t    v = hsv2rgb(h, p1, p2);\n\t\t  } else {\n\t\t    v = hsl2rgb(h, p1, p2);\n\t\t  }\n\t\t  return {\n\t\t    r: v[0],\n\t\t    g: v[1],\n\t\t    b: v[2],\n\t\t    a: a\n\t\t  };\n\t\t}\n\t\tfunction rotate(v, deg) {\n\t\t  var h = rgb2hsl(v);\n\t\t  h[0] = hue(h[0] + deg);\n\t\t  h = hsl2rgb(h);\n\t\t  v.r = h[0];\n\t\t  v.g = h[1];\n\t\t  v.b = h[2];\n\t\t}\n\t\tfunction hslString(v) {\n\t\t  if (!v) {\n\t\t    return;\n\t\t  }\n\t\t  const a = rgb2hsl(v);\n\t\t  const h = a[0];\n\t\t  const s = n2p(a[1]);\n\t\t  const l = n2p(a[2]);\n\t\t  return v.a < 255\n\t\t    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n\t\t    : `hsl(${h}, ${s}%, ${l}%)`;\n\t\t}\n\n\t\tconst map = {\n\t\t  x: 'dark',\n\t\t  Z: 'light',\n\t\t  Y: 're',\n\t\t  X: 'blu',\n\t\t  W: 'gr',\n\t\t  V: 'medium',\n\t\t  U: 'slate',\n\t\t  A: 'ee',\n\t\t  T: 'ol',\n\t\t  S: 'or',\n\t\t  B: 'ra',\n\t\t  C: 'lateg',\n\t\t  D: 'ights',\n\t\t  R: 'in',\n\t\t  Q: 'turquois',\n\t\t  E: 'hi',\n\t\t  P: 'ro',\n\t\t  O: 'al',\n\t\t  N: 'le',\n\t\t  M: 'de',\n\t\t  L: 'yello',\n\t\t  F: 'en',\n\t\t  K: 'ch',\n\t\t  G: 'arks',\n\t\t  H: 'ea',\n\t\t  I: 'ightg',\n\t\t  J: 'wh'\n\t\t};\n\t\tconst names$1 = {\n\t\t  OiceXe: 'f0f8ff',\n\t\t  antiquewEte: 'faebd7',\n\t\t  aqua: 'ffff',\n\t\t  aquamarRe: '7fffd4',\n\t\t  azuY: 'f0ffff',\n\t\t  beige: 'f5f5dc',\n\t\t  bisque: 'ffe4c4',\n\t\t  black: '0',\n\t\t  blanKedOmond: 'ffebcd',\n\t\t  Xe: 'ff',\n\t\t  XeviTet: '8a2be2',\n\t\t  bPwn: 'a52a2a',\n\t\t  burlywood: 'deb887',\n\t\t  caMtXe: '5f9ea0',\n\t\t  KartYuse: '7fff00',\n\t\t  KocTate: 'd2691e',\n\t\t  cSO: 'ff7f50',\n\t\t  cSnflowerXe: '6495ed',\n\t\t  cSnsilk: 'fff8dc',\n\t\t  crimson: 'dc143c',\n\t\t  cyan: 'ffff',\n\t\t  xXe: '8b',\n\t\t  xcyan: '8b8b',\n\t\t  xgTMnPd: 'b8860b',\n\t\t  xWay: 'a9a9a9',\n\t\t  xgYF: '6400',\n\t\t  xgYy: 'a9a9a9',\n\t\t  xkhaki: 'bdb76b',\n\t\t  xmagFta: '8b008b',\n\t\t  xTivegYF: '556b2f',\n\t\t  xSange: 'ff8c00',\n\t\t  xScEd: '9932cc',\n\t\t  xYd: '8b0000',\n\t\t  xsOmon: 'e9967a',\n\t\t  xsHgYF: '8fbc8f',\n\t\t  xUXe: '483d8b',\n\t\t  xUWay: '2f4f4f',\n\t\t  xUgYy: '2f4f4f',\n\t\t  xQe: 'ced1',\n\t\t  xviTet: '9400d3',\n\t\t  dAppRk: 'ff1493',\n\t\t  dApskyXe: 'bfff',\n\t\t  dimWay: '696969',\n\t\t  dimgYy: '696969',\n\t\t  dodgerXe: '1e90ff',\n\t\t  fiYbrick: 'b22222',\n\t\t  flSOwEte: 'fffaf0',\n\t\t  foYstWAn: '228b22',\n\t\t  fuKsia: 'ff00ff',\n\t\t  gaRsbSo: 'dcdcdc',\n\t\t  ghostwEte: 'f8f8ff',\n\t\t  gTd: 'ffd700',\n\t\t  gTMnPd: 'daa520',\n\t\t  Way: '808080',\n\t\t  gYF: '8000',\n\t\t  gYFLw: 'adff2f',\n\t\t  gYy: '808080',\n\t\t  honeyMw: 'f0fff0',\n\t\t  hotpRk: 'ff69b4',\n\t\t  RdianYd: 'cd5c5c',\n\t\t  Rdigo: '4b0082',\n\t\t  ivSy: 'fffff0',\n\t\t  khaki: 'f0e68c',\n\t\t  lavFMr: 'e6e6fa',\n\t\t  lavFMrXsh: 'fff0f5',\n\t\t  lawngYF: '7cfc00',\n\t\t  NmoncEffon: 'fffacd',\n\t\t  ZXe: 'add8e6',\n\t\t  ZcSO: 'f08080',\n\t\t  Zcyan: 'e0ffff',\n\t\t  ZgTMnPdLw: 'fafad2',\n\t\t  ZWay: 'd3d3d3',\n\t\t  ZgYF: '90ee90',\n\t\t  ZgYy: 'd3d3d3',\n\t\t  ZpRk: 'ffb6c1',\n\t\t  ZsOmon: 'ffa07a',\n\t\t  ZsHgYF: '20b2aa',\n\t\t  ZskyXe: '87cefa',\n\t\t  ZUWay: '778899',\n\t\t  ZUgYy: '778899',\n\t\t  ZstAlXe: 'b0c4de',\n\t\t  ZLw: 'ffffe0',\n\t\t  lime: 'ff00',\n\t\t  limegYF: '32cd32',\n\t\t  lRF: 'faf0e6',\n\t\t  magFta: 'ff00ff',\n\t\t  maPon: '800000',\n\t\t  VaquamarRe: '66cdaa',\n\t\t  VXe: 'cd',\n\t\t  VScEd: 'ba55d3',\n\t\t  VpurpN: '9370db',\n\t\t  VsHgYF: '3cb371',\n\t\t  VUXe: '7b68ee',\n\t\t  VsprRggYF: 'fa9a',\n\t\t  VQe: '48d1cc',\n\t\t  VviTetYd: 'c71585',\n\t\t  midnightXe: '191970',\n\t\t  mRtcYam: 'f5fffa',\n\t\t  mistyPse: 'ffe4e1',\n\t\t  moccasR: 'ffe4b5',\n\t\t  navajowEte: 'ffdead',\n\t\t  navy: '80',\n\t\t  Tdlace: 'fdf5e6',\n\t\t  Tive: '808000',\n\t\t  TivedBb: '6b8e23',\n\t\t  Sange: 'ffa500',\n\t\t  SangeYd: 'ff4500',\n\t\t  ScEd: 'da70d6',\n\t\t  pOegTMnPd: 'eee8aa',\n\t\t  pOegYF: '98fb98',\n\t\t  pOeQe: 'afeeee',\n\t\t  pOeviTetYd: 'db7093',\n\t\t  papayawEp: 'ffefd5',\n\t\t  pHKpuff: 'ffdab9',\n\t\t  peru: 'cd853f',\n\t\t  pRk: 'ffc0cb',\n\t\t  plum: 'dda0dd',\n\t\t  powMrXe: 'b0e0e6',\n\t\t  purpN: '800080',\n\t\t  YbeccapurpN: '663399',\n\t\t  Yd: 'ff0000',\n\t\t  Psybrown: 'bc8f8f',\n\t\t  PyOXe: '4169e1',\n\t\t  saddNbPwn: '8b4513',\n\t\t  sOmon: 'fa8072',\n\t\t  sandybPwn: 'f4a460',\n\t\t  sHgYF: '2e8b57',\n\t\t  sHshell: 'fff5ee',\n\t\t  siFna: 'a0522d',\n\t\t  silver: 'c0c0c0',\n\t\t  skyXe: '87ceeb',\n\t\t  UXe: '6a5acd',\n\t\t  UWay: '708090',\n\t\t  UgYy: '708090',\n\t\t  snow: 'fffafa',\n\t\t  sprRggYF: 'ff7f',\n\t\t  stAlXe: '4682b4',\n\t\t  tan: 'd2b48c',\n\t\t  teO: '8080',\n\t\t  tEstN: 'd8bfd8',\n\t\t  tomato: 'ff6347',\n\t\t  Qe: '40e0d0',\n\t\t  viTet: 'ee82ee',\n\t\t  JHt: 'f5deb3',\n\t\t  wEte: 'ffffff',\n\t\t  wEtesmoke: 'f5f5f5',\n\t\t  Lw: 'ffff00',\n\t\t  LwgYF: '9acd32'\n\t\t};\n\t\tfunction unpack() {\n\t\t  const unpacked = {};\n\t\t  const keys = Object.keys(names$1);\n\t\t  const tkeys = Object.keys(map);\n\t\t  let i, j, k, ok, nk;\n\t\t  for (i = 0; i < keys.length; i++) {\n\t\t    ok = nk = keys[i];\n\t\t    for (j = 0; j < tkeys.length; j++) {\n\t\t      k = tkeys[j];\n\t\t      nk = nk.replace(k, map[k]);\n\t\t    }\n\t\t    k = parseInt(names$1[ok], 16);\n\t\t    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n\t\t  }\n\t\t  return unpacked;\n\t\t}\n\n\t\tlet names;\n\t\tfunction nameParse(str) {\n\t\t  if (!names) {\n\t\t    names = unpack();\n\t\t    names.transparent = [0, 0, 0, 0];\n\t\t  }\n\t\t  const a = names[str.toLowerCase()];\n\t\t  return a && {\n\t\t    r: a[0],\n\t\t    g: a[1],\n\t\t    b: a[2],\n\t\t    a: a.length === 4 ? a[3] : 255\n\t\t  };\n\t\t}\n\n\t\tconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\t\tfunction rgbParse(str) {\n\t\t  const m = RGB_RE.exec(str);\n\t\t  let a = 255;\n\t\t  let r, g, b;\n\t\t  if (!m) {\n\t\t    return;\n\t\t  }\n\t\t  if (m[7] !== r) {\n\t\t    const v = +m[7];\n\t\t    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n\t\t  }\n\t\t  r = +m[1];\n\t\t  g = +m[3];\n\t\t  b = +m[5];\n\t\t  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n\t\t  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n\t\t  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n\t\t  return {\n\t\t    r: r,\n\t\t    g: g,\n\t\t    b: b,\n\t\t    a: a\n\t\t  };\n\t\t}\n\t\tfunction rgbString(v) {\n\t\t  return v && (\n\t\t    v.a < 255\n\t\t      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n\t\t      : `rgb(${v.r}, ${v.g}, ${v.b})`\n\t\t  );\n\t\t}\n\n\t\tconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\n\t\tconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n\t\tfunction interpolate(rgb1, rgb2, t) {\n\t\t  const r = from(b2n(rgb1.r));\n\t\t  const g = from(b2n(rgb1.g));\n\t\t  const b = from(b2n(rgb1.b));\n\t\t  return {\n\t\t    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n\t\t    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n\t\t    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n\t\t    a: rgb1.a + t * (rgb2.a - rgb1.a)\n\t\t  };\n\t\t}\n\n\t\tfunction modHSL(v, i, ratio) {\n\t\t  if (v) {\n\t\t    let tmp = rgb2hsl(v);\n\t\t    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n\t\t    tmp = hsl2rgb(tmp);\n\t\t    v.r = tmp[0];\n\t\t    v.g = tmp[1];\n\t\t    v.b = tmp[2];\n\t\t  }\n\t\t}\n\t\tfunction clone(v, proto) {\n\t\t  return v ? Object.assign(proto || {}, v) : v;\n\t\t}\n\t\tfunction fromObject(input) {\n\t\t  var v = {r: 0, g: 0, b: 0, a: 255};\n\t\t  if (Array.isArray(input)) {\n\t\t    if (input.length >= 3) {\n\t\t      v = {r: input[0], g: input[1], b: input[2], a: 255};\n\t\t      if (input.length > 3) {\n\t\t        v.a = n2b(input[3]);\n\t\t      }\n\t\t    }\n\t\t  } else {\n\t\t    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n\t\t    v.a = n2b(v.a);\n\t\t  }\n\t\t  return v;\n\t\t}\n\t\tfunction functionParse(str) {\n\t\t  if (str.charAt(0) === 'r') {\n\t\t    return rgbParse(str);\n\t\t  }\n\t\t  return hueParse(str);\n\t\t}\n\t\tclass Color {\n\t\t  constructor(input) {\n\t\t    if (input instanceof Color) {\n\t\t      return input;\n\t\t    }\n\t\t    const type = typeof input;\n\t\t    let v;\n\t\t    if (type === 'object') {\n\t\t      v = fromObject(input);\n\t\t    } else if (type === 'string') {\n\t\t      v = hexParse(input) || nameParse(input) || functionParse(input);\n\t\t    }\n\t\t    this._rgb = v;\n\t\t    this._valid = !!v;\n\t\t  }\n\t\t  get valid() {\n\t\t    return this._valid;\n\t\t  }\n\t\t  get rgb() {\n\t\t    var v = clone(this._rgb);\n\t\t    if (v) {\n\t\t      v.a = b2n(v.a);\n\t\t    }\n\t\t    return v;\n\t\t  }\n\t\t  set rgb(obj) {\n\t\t    this._rgb = fromObject(obj);\n\t\t  }\n\t\t  rgbString() {\n\t\t    return this._valid ? rgbString(this._rgb) : undefined;\n\t\t  }\n\t\t  hexString() {\n\t\t    return this._valid ? hexString(this._rgb) : undefined;\n\t\t  }\n\t\t  hslString() {\n\t\t    return this._valid ? hslString(this._rgb) : undefined;\n\t\t  }\n\t\t  mix(color, weight) {\n\t\t    if (color) {\n\t\t      const c1 = this.rgb;\n\t\t      const c2 = color.rgb;\n\t\t      let w2;\n\t\t      const p = weight === w2 ? 0.5 : weight;\n\t\t      const w = 2 * p - 1;\n\t\t      const a = c1.a - c2.a;\n\t\t      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\t      w2 = 1 - w1;\n\t\t      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n\t\t      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n\t\t      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n\t\t      c1.a = p * c1.a + (1 - p) * c2.a;\n\t\t      this.rgb = c1;\n\t\t    }\n\t\t    return this;\n\t\t  }\n\t\t  interpolate(color, t) {\n\t\t    if (color) {\n\t\t      this._rgb = interpolate(this._rgb, color._rgb, t);\n\t\t    }\n\t\t    return this;\n\t\t  }\n\t\t  clone() {\n\t\t    return new Color(this.rgb);\n\t\t  }\n\t\t  alpha(a) {\n\t\t    this._rgb.a = n2b(a);\n\t\t    return this;\n\t\t  }\n\t\t  clearer(ratio) {\n\t\t    const rgb = this._rgb;\n\t\t    rgb.a *= 1 - ratio;\n\t\t    return this;\n\t\t  }\n\t\t  greyscale() {\n\t\t    const rgb = this._rgb;\n\t\t    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n\t\t    rgb.r = rgb.g = rgb.b = val;\n\t\t    return this;\n\t\t  }\n\t\t  opaquer(ratio) {\n\t\t    const rgb = this._rgb;\n\t\t    rgb.a *= 1 + ratio;\n\t\t    return this;\n\t\t  }\n\t\t  negate() {\n\t\t    const v = this._rgb;\n\t\t    v.r = 255 - v.r;\n\t\t    v.g = 255 - v.g;\n\t\t    v.b = 255 - v.b;\n\t\t    return this;\n\t\t  }\n\t\t  lighten(ratio) {\n\t\t    modHSL(this._rgb, 2, ratio);\n\t\t    return this;\n\t\t  }\n\t\t  darken(ratio) {\n\t\t    modHSL(this._rgb, 2, -ratio);\n\t\t    return this;\n\t\t  }\n\t\t  saturate(ratio) {\n\t\t    modHSL(this._rgb, 1, ratio);\n\t\t    return this;\n\t\t  }\n\t\t  desaturate(ratio) {\n\t\t    modHSL(this._rgb, 1, -ratio);\n\t\t    return this;\n\t\t  }\n\t\t  rotate(deg) {\n\t\t    rotate(this._rgb, deg);\n\t\t    return this;\n\t\t  }\n\t\t}\n\n\t\tfunction index_esm(input) {\n\t\t  return new Color(input);\n\t\t}\n\n\t\tvar color = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tColor: Color,\n\t\tdefault: index_esm,\n\t\tround: round,\n\t\tlim: lim,\n\t\tp2b: p2b,\n\t\tb2p: b2p,\n\t\tn2b: n2b,\n\t\tb2n: b2n,\n\t\tn2p: n2p,\n\t\thexParse: hexParse,\n\t\thexString: hexString,\n\t\trgb2hsl: rgb2hsl,\n\t\thsl2rgb: hsl2rgb,\n\t\thwb2rgb: hwb2rgb,\n\t\thsv2rgb: hsv2rgb,\n\t\thueParse: hueParse,\n\t\trotate: rotate,\n\t\thslString: hslString,\n\t\tnameParse: nameParse,\n\t\trgbParse: rgbParse,\n\t\trgbString: rgbString\n\t\t});\n\n\t\tvar index = Object.assign(index_esm, color);\n\n\t\treturn index;\n\n\t\t})); \n\t} (color$2));\n\n\tvar colorExports = color$2.exports;\n\n\tvar color$1 = colorExports;\n\tfunction noop() {}\n\tconst uid = (() => {\n\t  let id = 0;\n\t  return () => id++;\n\t})();\n\tfunction isNullOrUndef(value) {\n\t  return value === null || typeof value === \"undefined\";\n\t}\n\tfunction isArray(value) {\n\t  if (Array.isArray && Array.isArray(value)) {\n\t    return true;\n\t  }\n\t  const type = Object.prototype.toString.call(value);\n\t  if (type.slice(0, 7) === \"[object\" && type.slice(-6) === \"Array]\") {\n\t    return true;\n\t  }\n\t  return false;\n\t}\n\tfunction isObject(value) {\n\t  return value !== null && Object.prototype.toString.call(value) === \"[object Object]\";\n\t}\n\tfunction isNumberFinite(value) {\n\t  return (typeof value === \"number\" || value instanceof Number) && isFinite(+value);\n\t}\n\tfunction finiteOrDefault(value, defaultValue) {\n\t  return isNumberFinite(value) ? value : defaultValue;\n\t}\n\tfunction valueOrDefault(value, defaultValue) {\n\t  return typeof value === \"undefined\" ? defaultValue : value;\n\t}\n\tconst toPercentage = (value, dimension) => typeof value === \"string\" && value.endsWith(\"%\") ? parseFloat(value) / 100 : +value / dimension;\n\tconst toDimension = (value, dimension) => typeof value === \"string\" && value.endsWith(\"%\") ? parseFloat(value) / 100 * dimension : +value;\n\tfunction callback(fn, args, thisArg) {\n\t  if (fn && typeof fn.call === \"function\") {\n\t    return fn.apply(thisArg, args);\n\t  }\n\t}\n\tfunction each(loopable, fn, thisArg, reverse) {\n\t  let i, len, keys;\n\t  if (isArray(loopable)) {\n\t    len = loopable.length;\n\t    if (reverse) {\n\t      for (i = len - 1; i >= 0; i--) {\n\t        fn.call(thisArg, loopable[i], i);\n\t      }\n\t    } else {\n\t      for (i = 0; i < len; i++) {\n\t        fn.call(thisArg, loopable[i], i);\n\t      }\n\t    }\n\t  } else if (isObject(loopable)) {\n\t    keys = Object.keys(loopable);\n\t    len = keys.length;\n\t    for (i = 0; i < len; i++) {\n\t      fn.call(thisArg, loopable[keys[i]], keys[i]);\n\t    }\n\t  }\n\t}\n\tfunction _elementsEqual(a0, a1) {\n\t  let i, ilen, v0, v1;\n\t  if (!a0 || !a1 || a0.length !== a1.length) {\n\t    return false;\n\t  }\n\t  for ((i = 0, ilen = a0.length); i < ilen; ++i) {\n\t    v0 = a0[i];\n\t    v1 = a1[i];\n\t    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t}\n\tfunction clone(source) {\n\t  if (isArray(source)) {\n\t    return source.map(clone);\n\t  }\n\t  if (isObject(source)) {\n\t    const target = Object.create(null);\n\t    const keys = Object.keys(source);\n\t    const klen = keys.length;\n\t    let k = 0;\n\t    for (; k < klen; ++k) {\n\t      target[keys[k]] = clone(source[keys[k]]);\n\t    }\n\t    return target;\n\t  }\n\t  return source;\n\t}\n\tfunction isValidKey(key) {\n\t  return [\"__proto__\", \"prototype\", \"constructor\"].indexOf(key) === -1;\n\t}\n\tfunction _merger(key, target, source, options) {\n\t  if (!isValidKey(key)) {\n\t    return;\n\t  }\n\t  const tval = target[key];\n\t  const sval = source[key];\n\t  if (isObject(tval) && isObject(sval)) {\n\t    merge(tval, sval, options);\n\t  } else {\n\t    target[key] = clone(sval);\n\t  }\n\t}\n\tfunction merge(target, source, options) {\n\t  const sources = isArray(source) ? source : [source];\n\t  const ilen = sources.length;\n\t  if (!isObject(target)) {\n\t    return target;\n\t  }\n\t  options = options || ({});\n\t  const merger = options.merger || _merger;\n\t  let current;\n\t  for (let i = 0; i < ilen; ++i) {\n\t    current = sources[i];\n\t    if (!isObject(current)) {\n\t      continue;\n\t    }\n\t    const keys = Object.keys(current);\n\t    for (let k = 0, klen = keys.length; k < klen; ++k) {\n\t      merger(keys[k], target, current, options);\n\t    }\n\t  }\n\t  return target;\n\t}\n\tfunction mergeIf(target, source) {\n\t  return merge(target, source, {\n\t    merger: _mergerIf\n\t  });\n\t}\n\tfunction _mergerIf(key, target, source) {\n\t  if (!isValidKey(key)) {\n\t    return;\n\t  }\n\t  const tval = target[key];\n\t  const sval = source[key];\n\t  if (isObject(tval) && isObject(sval)) {\n\t    mergeIf(tval, sval);\n\t  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n\t    target[key] = clone(sval);\n\t  }\n\t}\n\tfunction _deprecated(scope, value, previous, current) {\n\t  if (value !== undefined) {\n\t    console.warn(scope + \": \\\"\" + previous + \"\\\" is deprecated. Please use \\\"\" + current + \"\\\" instead\");\n\t  }\n\t}\n\tconst keyResolvers = {\n\t  \"\": v => v,\n\t  x: o => o.x,\n\t  y: o => o.y\n\t};\n\tfunction _splitKey(key) {\n\t  const parts = key.split(\".\");\n\t  const keys = [];\n\t  let tmp = \"\";\n\t  for (const part of parts) {\n\t    tmp += part;\n\t    if (tmp.endsWith(\"\\\\\")) {\n\t      tmp = tmp.slice(0, -1) + \".\";\n\t    } else {\n\t      keys.push(tmp);\n\t      tmp = \"\";\n\t    }\n\t  }\n\t  return keys;\n\t}\n\tfunction _getKeyResolver(key) {\n\t  const keys = _splitKey(key);\n\t  return obj => {\n\t    for (const k of keys) {\n\t      if (k === \"\") {\n\t        break;\n\t      }\n\t      obj = obj && obj[k];\n\t    }\n\t    return obj;\n\t  };\n\t}\n\tfunction resolveObjectKey(obj, key) {\n\t  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n\t  return resolver(obj);\n\t}\n\tfunction _capitalize(str) {\n\t  return str.charAt(0).toUpperCase() + str.slice(1);\n\t}\n\tconst defined = value => typeof value !== \"undefined\";\n\tconst isFunction = value => typeof value === \"function\";\n\tconst setsEqual = (a, b) => {\n\t  if (a.size !== b.size) {\n\t    return false;\n\t  }\n\t  for (const item of a) {\n\t    if (!b.has(item)) {\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t};\n\tfunction _isClickEvent(e) {\n\t  return e.type === \"mouseup\" || e.type === \"click\" || e.type === \"contextmenu\";\n\t}\n\tconst PI = Math.PI;\n\tconst TAU = 2 * PI;\n\tconst PITAU = TAU + PI;\n\tconst INFINITY = Number.POSITIVE_INFINITY;\n\tconst RAD_PER_DEG = PI / 180;\n\tconst HALF_PI = PI / 2;\n\tconst QUARTER_PI = PI / 4;\n\tconst TWO_THIRDS_PI = PI * 2 / 3;\n\tconst log10 = Math.log10;\n\tconst sign = Math.sign;\n\tfunction almostEquals(x, y, epsilon) {\n\t  return Math.abs(x - y) < epsilon;\n\t}\n\tfunction niceNum(range) {\n\t  const roundedRange = Math.round(range);\n\t  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n\t  const niceRange = Math.pow(10, Math.floor(log10(range)));\n\t  const fraction = range / niceRange;\n\t  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n\t  return niceFraction * niceRange;\n\t}\n\tfunction _factorize(value) {\n\t  const result = [];\n\t  const sqrt = Math.sqrt(value);\n\t  let i;\n\t  for (i = 1; i < sqrt; i++) {\n\t    if (value % i === 0) {\n\t      result.push(i);\n\t      result.push(value / i);\n\t    }\n\t  }\n\t  if (sqrt === (sqrt | 0)) {\n\t    result.push(sqrt);\n\t  }\n\t  result.sort((a, b) => a - b).pop();\n\t  return result;\n\t}\n\tfunction isNumber(n) {\n\t  return !isNaN(parseFloat(n)) && isFinite(n);\n\t}\n\tfunction almostWhole(x, epsilon) {\n\t  const rounded = Math.round(x);\n\t  return rounded - epsilon <= x && rounded + epsilon >= x;\n\t}\n\tfunction _setMinAndMaxByKey(array, target, property) {\n\t  let i, ilen, value;\n\t  for ((i = 0, ilen = array.length); i < ilen; i++) {\n\t    value = array[i][property];\n\t    if (!isNaN(value)) {\n\t      target.min = Math.min(target.min, value);\n\t      target.max = Math.max(target.max, value);\n\t    }\n\t  }\n\t}\n\tfunction toRadians(degrees) {\n\t  return degrees * (PI / 180);\n\t}\n\tfunction toDegrees(radians) {\n\t  return radians * (180 / PI);\n\t}\n\tfunction _decimalPlaces(x) {\n\t  if (!isNumberFinite(x)) {\n\t    return;\n\t  }\n\t  let e = 1;\n\t  let p = 0;\n\t  while (Math.round(x * e) / e !== x) {\n\t    e *= 10;\n\t    p++;\n\t  }\n\t  return p;\n\t}\n\tfunction getAngleFromPoint(centrePoint, anglePoint) {\n\t  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n\t  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n\t  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\t  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\t  if (angle < -0.5 * PI) {\n\t    angle += TAU;\n\t  }\n\t  return {\n\t    angle,\n\t    distance: radialDistanceFromCenter\n\t  };\n\t}\n\tfunction distanceBetweenPoints(pt1, pt2) {\n\t  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t}\n\tfunction _angleDiff(a, b) {\n\t  return (a - b + PITAU) % TAU - PI;\n\t}\n\tfunction _normalizeAngle(a) {\n\t  return (a % TAU + TAU) % TAU;\n\t}\n\tfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n\t  const a = _normalizeAngle(angle);\n\t  const s = _normalizeAngle(start);\n\t  const e = _normalizeAngle(end);\n\t  const angleToStart = _normalizeAngle(s - a);\n\t  const angleToEnd = _normalizeAngle(e - a);\n\t  const startToAngle = _normalizeAngle(a - s);\n\t  const endToAngle = _normalizeAngle(a - e);\n\t  return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n\t}\n\tfunction _limitValue(value, min, max) {\n\t  return Math.max(min, Math.min(max, value));\n\t}\n\tfunction _int16Range(value) {\n\t  return _limitValue(value, -32768, 32767);\n\t}\n\tfunction _isBetween(value, start, end, epsilon = 0.000001) {\n\t  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n\t}\n\tfunction _lookup(table, value, cmp) {\n\t  cmp = cmp || (index => table[index] < value);\n\t  let hi = table.length - 1;\n\t  let lo = 0;\n\t  let mid;\n\t  while (hi - lo > 1) {\n\t    mid = lo + hi >> 1;\n\t    if (cmp(mid)) {\n\t      lo = mid;\n\t    } else {\n\t      hi = mid;\n\t    }\n\t  }\n\t  return {\n\t    lo,\n\t    hi\n\t  };\n\t}\n\tconst _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? index => {\n\t  const ti = table[index][key];\n\t  return ti < value || ti === value && table[index + 1][key] === value;\n\t} : index => table[index][key] < value);\n\tconst _rlookupByKey = (table, key, value) => _lookup(table, value, index => table[index][key] >= value);\n\tfunction _filterBetween(values, min, max) {\n\t  let start = 0;\n\t  let end = values.length;\n\t  while (start < end && values[start] < min) {\n\t    start++;\n\t  }\n\t  while (end > start && values[end - 1] > max) {\n\t    end--;\n\t  }\n\t  return start > 0 || end < values.length ? values.slice(start, end) : values;\n\t}\n\tconst arrayEvents = [\"push\", \"pop\", \"shift\", \"splice\", \"unshift\"];\n\tfunction listenArrayEvents(array, listener) {\n\t  if (array._chartjs) {\n\t    array._chartjs.listeners.push(listener);\n\t    return;\n\t  }\n\t  Object.defineProperty(array, \"_chartjs\", {\n\t    configurable: true,\n\t    enumerable: false,\n\t    value: {\n\t      listeners: [listener]\n\t    }\n\t  });\n\t  arrayEvents.forEach(key => {\n\t    const method = \"_onData\" + _capitalize(key);\n\t    const base = array[key];\n\t    Object.defineProperty(array, key, {\n\t      configurable: true,\n\t      enumerable: false,\n\t      value(...args) {\n\t        const res = base.apply(this, args);\n\t        array._chartjs.listeners.forEach(object => {\n\t          if (typeof object[method] === \"function\") {\n\t            object[method](...args);\n\t          }\n\t        });\n\t        return res;\n\t      }\n\t    });\n\t  });\n\t}\n\tfunction unlistenArrayEvents(array, listener) {\n\t  const stub = array._chartjs;\n\t  if (!stub) {\n\t    return;\n\t  }\n\t  const listeners = stub.listeners;\n\t  const index = listeners.indexOf(listener);\n\t  if (index !== -1) {\n\t    listeners.splice(index, 1);\n\t  }\n\t  if (listeners.length > 0) {\n\t    return;\n\t  }\n\t  arrayEvents.forEach(key => {\n\t    delete array[key];\n\t  });\n\t  delete array._chartjs;\n\t}\n\tfunction _arrayUnique(items) {\n\t  const set = new Set(items);\n\t  if (set.size === items.length) {\n\t    return items;\n\t  }\n\t  return Array.from(set);\n\t}\n\tfunction fontString(pixelSize, fontStyle, fontFamily) {\n\t  return fontStyle + \" \" + pixelSize + \"px \" + fontFamily;\n\t}\n\tconst requestAnimFrame = (function () {\n\t  if (typeof window === \"undefined\") {\n\t    return function (callback) {\n\t      return callback();\n\t    };\n\t  }\n\t  return window.requestAnimationFrame;\n\t})();\n\tfunction throttled(fn, thisArg) {\n\t  let argsToUse = [];\n\t  let ticking = false;\n\t  return function (...args) {\n\t    argsToUse = args;\n\t    if (!ticking) {\n\t      ticking = true;\n\t      requestAnimFrame.call(window, () => {\n\t        ticking = false;\n\t        fn.apply(thisArg, argsToUse);\n\t      });\n\t    }\n\t  };\n\t}\n\tfunction debounce(fn, delay) {\n\t  let timeout;\n\t  return function (...args) {\n\t    if (delay) {\n\t      clearTimeout(timeout);\n\t      timeout = setTimeout(fn, delay, args);\n\t    } else {\n\t      fn.apply(this, args);\n\t    }\n\t    return delay;\n\t  };\n\t}\n\tconst _toLeftRightCenter = align => align === \"start\" ? \"left\" : align === \"end\" ? \"right\" : \"center\";\n\tconst _alignStartEnd = (align, start, end) => align === \"start\" ? start : align === \"end\" ? end : (start + end) / 2;\n\tconst _textX = (align, left, right, rtl) => {\n\t  const check = rtl ? \"left\" : \"right\";\n\t  return align === check ? right : align === \"center\" ? (left + right) / 2 : left;\n\t};\n\tfunction _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n\t  const pointCount = points.length;\n\t  let start = 0;\n\t  let count = pointCount;\n\t  if (meta._sorted) {\n\t    const {iScale, _parsed} = meta;\n\t    const axis = iScale.axis;\n\t    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\t    if (minDefined) {\n\t      start = _limitValue(Math.min(_lookupByKey(_parsed, axis, min).lo, animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n\t    }\n\t    if (maxDefined) {\n\t      count = _limitValue(Math.max(_lookupByKey(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n\t    } else {\n\t      count = pointCount - start;\n\t    }\n\t  }\n\t  return {\n\t    start,\n\t    count\n\t  };\n\t}\n\tfunction _scaleRangesChanged(meta) {\n\t  const {xScale, yScale, _scaleRanges} = meta;\n\t  const newRanges = {\n\t    xmin: xScale.min,\n\t    xmax: xScale.max,\n\t    ymin: yScale.min,\n\t    ymax: yScale.max\n\t  };\n\t  if (!_scaleRanges) {\n\t    meta._scaleRanges = newRanges;\n\t    return true;\n\t  }\n\t  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n\t  Object.assign(_scaleRanges, newRanges);\n\t  return changed;\n\t}\n\tconst atEdge = t => t === 0 || t === 1;\n\tconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\n\tconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n\tconst effects = {\n\t  linear: t => t,\n\t  easeInQuad: t => t * t,\n\t  easeOutQuad: t => -t * (t - 2),\n\t  easeInOutQuad: t => (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n\t  easeInCubic: t => t * t * t,\n\t  easeOutCubic: t => (t -= 1) * t * t + 1,\n\t  easeInOutCubic: t => (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n\t  easeInQuart: t => t * t * t * t,\n\t  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n\t  easeInOutQuart: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n\t  easeInQuint: t => t * t * t * t * t,\n\t  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n\t  easeInOutQuint: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n\t  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n\t  easeOutSine: t => Math.sin(t * HALF_PI),\n\t  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n\t  easeInExpo: t => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n\t  easeOutExpo: t => t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n\t  easeInOutExpo: t => atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n\t  easeInCirc: t => t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n\t  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n\t  easeInOutCirc: t => (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n\t  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n\t  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n\t  easeInOutElastic(t) {\n\t    const s = 0.1125;\n\t    const p = 0.45;\n\t    return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n\t  },\n\t  easeInBack(t) {\n\t    const s = 1.70158;\n\t    return t * t * ((s + 1) * t - s);\n\t  },\n\t  easeOutBack(t) {\n\t    const s = 1.70158;\n\t    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n\t  },\n\t  easeInOutBack(t) {\n\t    let s = 1.70158;\n\t    if ((t /= 0.5) < 1) {\n\t      return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n\t    }\n\t    return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n\t  },\n\t  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n\t  easeOutBounce(t) {\n\t    const m = 7.5625;\n\t    const d = 2.75;\n\t    if (t < 1 / d) {\n\t      return m * t * t;\n\t    }\n\t    if (t < 2 / d) {\n\t      return m * (t -= 1.5 / d) * t + 0.75;\n\t    }\n\t    if (t < 2.5 / d) {\n\t      return m * (t -= 2.25 / d) * t + 0.9375;\n\t    }\n\t    return m * (t -= 2.625 / d) * t + 0.984375;\n\t  },\n\t  easeInOutBounce: t => t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n\t};\n\tfunction isPatternOrGradient(value) {\n\t  if (value && typeof value === \"object\") {\n\t    const type = value.toString();\n\t    return type === \"[object CanvasPattern]\" || type === \"[object CanvasGradient]\";\n\t  }\n\t  return false;\n\t}\n\tfunction color(value) {\n\t  return isPatternOrGradient(value) ? value : new color$1.Color(value);\n\t}\n\tfunction getHoverColor(value) {\n\t  return isPatternOrGradient(value) ? value : new color$1.Color(value).saturate(0.5).darken(0.1).hexString();\n\t}\n\tconst numbers = [\"x\", \"y\", \"borderWidth\", \"radius\", \"tension\"];\n\tconst colors = [\"color\", \"borderColor\", \"backgroundColor\"];\n\tfunction applyAnimationsDefaults(defaults) {\n\t  defaults.set(\"animation\", {\n\t    delay: undefined,\n\t    duration: 1000,\n\t    easing: \"easeOutQuart\",\n\t    fn: undefined,\n\t    from: undefined,\n\t    loop: undefined,\n\t    to: undefined,\n\t    type: undefined\n\t  });\n\t  defaults.describe(\"animation\", {\n\t    _fallback: false,\n\t    _indexable: false,\n\t    _scriptable: name => name !== \"onProgress\" && name !== \"onComplete\" && name !== \"fn\"\n\t  });\n\t  defaults.set(\"animations\", {\n\t    colors: {\n\t      type: \"color\",\n\t      properties: colors\n\t    },\n\t    numbers: {\n\t      type: \"number\",\n\t      properties: numbers\n\t    }\n\t  });\n\t  defaults.describe(\"animations\", {\n\t    _fallback: \"animation\"\n\t  });\n\t  defaults.set(\"transitions\", {\n\t    active: {\n\t      animation: {\n\t        duration: 400\n\t      }\n\t    },\n\t    resize: {\n\t      animation: {\n\t        duration: 0\n\t      }\n\t    },\n\t    show: {\n\t      animations: {\n\t        colors: {\n\t          from: \"transparent\"\n\t        },\n\t        visible: {\n\t          type: \"boolean\",\n\t          duration: 0\n\t        }\n\t      }\n\t    },\n\t    hide: {\n\t      animations: {\n\t        colors: {\n\t          to: \"transparent\"\n\t        },\n\t        visible: {\n\t          type: \"boolean\",\n\t          easing: \"linear\",\n\t          fn: v => v | 0\n\t        }\n\t      }\n\t    }\n\t  });\n\t}\n\tfunction applyLayoutsDefaults(defaults) {\n\t  defaults.set(\"layout\", {\n\t    autoPadding: true,\n\t    padding: {\n\t      top: 0,\n\t      right: 0,\n\t      bottom: 0,\n\t      left: 0\n\t    }\n\t  });\n\t}\n\tconst intlCache = new Map();\n\tfunction getNumberFormat(locale, options) {\n\t  options = options || ({});\n\t  const cacheKey = locale + JSON.stringify(options);\n\t  let formatter = intlCache.get(cacheKey);\n\t  if (!formatter) {\n\t    formatter = new Intl.NumberFormat(locale, options);\n\t    intlCache.set(cacheKey, formatter);\n\t  }\n\t  return formatter;\n\t}\n\tfunction formatNumber(num, locale, options) {\n\t  return getNumberFormat(locale, options).format(num);\n\t}\n\tconst formatters = {\n\t  values(value) {\n\t    return isArray(value) ? value : \"\" + value;\n\t  },\n\t  numeric(tickValue, index, ticks) {\n\t    if (tickValue === 0) {\n\t      return \"0\";\n\t    }\n\t    const locale = this.chart.options.locale;\n\t    let notation;\n\t    let delta = tickValue;\n\t    if (ticks.length > 1) {\n\t      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n\t      if (maxTick < 0.0001 || maxTick > 1000000000000000) {\n\t        notation = \"scientific\";\n\t      }\n\t      delta = calculateDelta(tickValue, ticks);\n\t    }\n\t    const logDelta = log10(Math.abs(delta));\n\t    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n\t    const options = {\n\t      notation,\n\t      minimumFractionDigits: numDecimal,\n\t      maximumFractionDigits: numDecimal\n\t    };\n\t    Object.assign(options, this.options.ticks.format);\n\t    return formatNumber(tickValue, locale, options);\n\t  },\n\t  logarithmic(tickValue, index, ticks) {\n\t    if (tickValue === 0) {\n\t      return \"0\";\n\t    }\n\t    const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n\t    if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {\n\t      return formatters.numeric.call(this, tickValue, index, ticks);\n\t    }\n\t    return \"\";\n\t  }\n\t};\n\tfunction calculateDelta(tickValue, ticks) {\n\t  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n\t  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n\t    delta = tickValue - Math.floor(tickValue);\n\t  }\n\t  return delta;\n\t}\n\tvar Ticks$1 = {\n\t  formatters\n\t};\n\tfunction applyScaleDefaults(defaults) {\n\t  defaults.set(\"scale\", {\n\t    display: true,\n\t    offset: false,\n\t    reverse: false,\n\t    beginAtZero: false,\n\t    bounds: \"ticks\",\n\t    clip: true,\n\t    grace: 0,\n\t    grid: {\n\t      display: true,\n\t      lineWidth: 1,\n\t      drawOnChartArea: true,\n\t      drawTicks: true,\n\t      tickLength: 8,\n\t      tickWidth: (_ctx, options) => options.lineWidth,\n\t      tickColor: (_ctx, options) => options.color,\n\t      offset: false\n\t    },\n\t    border: {\n\t      display: true,\n\t      dash: [],\n\t      dashOffset: 0,\n\t      width: 1\n\t    },\n\t    title: {\n\t      display: false,\n\t      text: \"\",\n\t      padding: {\n\t        top: 4,\n\t        bottom: 4\n\t      }\n\t    },\n\t    ticks: {\n\t      minRotation: 0,\n\t      maxRotation: 50,\n\t      mirror: false,\n\t      textStrokeWidth: 0,\n\t      textStrokeColor: \"\",\n\t      padding: 3,\n\t      display: true,\n\t      autoSkip: true,\n\t      autoSkipPadding: 3,\n\t      labelOffset: 0,\n\t      callback: Ticks$1.formatters.values,\n\t      minor: {},\n\t      major: {},\n\t      align: \"center\",\n\t      crossAlign: \"near\",\n\t      showLabelBackdrop: false,\n\t      backdropColor: \"rgba(255, 255, 255, 0.75)\",\n\t      backdropPadding: 2\n\t    }\n\t  });\n\t  defaults.route(\"scale.ticks\", \"color\", \"\", \"color\");\n\t  defaults.route(\"scale.grid\", \"color\", \"\", \"borderColor\");\n\t  defaults.route(\"scale.border\", \"color\", \"\", \"borderColor\");\n\t  defaults.route(\"scale.title\", \"color\", \"\", \"color\");\n\t  defaults.describe(\"scale\", {\n\t    _fallback: false,\n\t    _scriptable: name => !name.startsWith(\"before\") && !name.startsWith(\"after\") && name !== \"callback\" && name !== \"parser\",\n\t    _indexable: name => name !== \"borderDash\" && name !== \"tickBorderDash\" && name !== \"dash\"\n\t  });\n\t  defaults.describe(\"scales\", {\n\t    _fallback: \"scale\"\n\t  });\n\t  defaults.describe(\"scale.ticks\", {\n\t    _scriptable: name => name !== \"backdropPadding\" && name !== \"callback\",\n\t    _indexable: name => name !== \"backdropPadding\"\n\t  });\n\t}\n\tconst overrides = Object.create(null);\n\tconst descriptors = Object.create(null);\n\tfunction getScope$1(node, key) {\n\t  if (!key) {\n\t    return node;\n\t  }\n\t  const keys = key.split(\".\");\n\t  for (let i = 0, n = keys.length; i < n; ++i) {\n\t    const k = keys[i];\n\t    node = node[k] || (node[k] = Object.create(null));\n\t  }\n\t  return node;\n\t}\n\tfunction set(root, scope, values) {\n\t  if (typeof scope === \"string\") {\n\t    return merge(getScope$1(root, scope), values);\n\t  }\n\t  return merge(getScope$1(root, \"\"), scope);\n\t}\n\tclass Defaults {\n\t  constructor(_descriptors, _appliers) {\n\t    this.animation = undefined;\n\t    this.backgroundColor = \"rgba(0,0,0,0.1)\";\n\t    this.borderColor = \"rgba(0,0,0,0.1)\";\n\t    this.color = \"#666\";\n\t    this.datasets = {};\n\t    this.devicePixelRatio = context => context.chart.platform.getDevicePixelRatio();\n\t    this.elements = {};\n\t    this.events = [\"mousemove\", \"mouseout\", \"click\", \"touchstart\", \"touchmove\"];\n\t    this.font = {\n\t      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\t      size: 12,\n\t      style: \"normal\",\n\t      lineHeight: 1.2,\n\t      weight: null\n\t    };\n\t    this.hover = {};\n\t    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n\t    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n\t    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n\t    this.indexAxis = \"x\";\n\t    this.interaction = {\n\t      mode: \"nearest\",\n\t      intersect: true,\n\t      includeInvisible: false\n\t    };\n\t    this.maintainAspectRatio = true;\n\t    this.onHover = null;\n\t    this.onClick = null;\n\t    this.parsing = true;\n\t    this.plugins = {};\n\t    this.responsive = true;\n\t    this.scale = undefined;\n\t    this.scales = {};\n\t    this.showLine = true;\n\t    this.drawActiveElementsOnTop = true;\n\t    this.describe(_descriptors);\n\t    this.apply(_appliers);\n\t  }\n\t  set(scope, values) {\n\t    return set(this, scope, values);\n\t  }\n\t  get(scope) {\n\t    return getScope$1(this, scope);\n\t  }\n\t  describe(scope, values) {\n\t    return set(descriptors, scope, values);\n\t  }\n\t  override(scope, values) {\n\t    return set(overrides, scope, values);\n\t  }\n\t  route(scope, name, targetScope, targetName) {\n\t    const scopeObject = getScope$1(this, scope);\n\t    const targetScopeObject = getScope$1(this, targetScope);\n\t    const privateName = \"_\" + name;\n\t    Object.defineProperties(scopeObject, {\n\t      [privateName]: {\n\t        value: scopeObject[name],\n\t        writable: true\n\t      },\n\t      [name]: {\n\t        enumerable: true,\n\t        get() {\n\t          const local = this[privateName];\n\t          const target = targetScopeObject[targetName];\n\t          if (isObject(local)) {\n\t            return Object.assign({}, target, local);\n\t          }\n\t          return valueOrDefault(local, target);\n\t        },\n\t        set(value) {\n\t          this[privateName] = value;\n\t        }\n\t      }\n\t    });\n\t  }\n\t  apply(appliers) {\n\t    appliers.forEach(apply => apply(this));\n\t  }\n\t}\n\tvar defaults$1 = new Defaults({\n\t  _scriptable: name => !name.startsWith(\"on\"),\n\t  _indexable: name => name !== \"events\",\n\t  hover: {\n\t    _fallback: \"interaction\"\n\t  },\n\t  interaction: {\n\t    _scriptable: false,\n\t    _indexable: false\n\t  }\n\t}, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);\n\tfunction toFontString(font) {\n\t  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n\t    return null;\n\t  }\n\t  return (font.style ? font.style + \" \" : \"\") + (font.weight ? font.weight + \" \" : \"\") + font.size + \"px \" + font.family;\n\t}\n\tfunction _measureText(ctx, data, gc, longest, string) {\n\t  let textWidth = data[string];\n\t  if (!textWidth) {\n\t    textWidth = data[string] = ctx.measureText(string).width;\n\t    gc.push(string);\n\t  }\n\t  if (textWidth > longest) {\n\t    longest = textWidth;\n\t  }\n\t  return longest;\n\t}\n\tfunction _longestText(ctx, font, arrayOfThings, cache) {\n\t  cache = cache || ({});\n\t  let data = cache.data = cache.data || ({});\n\t  let gc = cache.garbageCollect = cache.garbageCollect || [];\n\t  if (cache.font !== font) {\n\t    data = cache.data = {};\n\t    gc = cache.garbageCollect = [];\n\t    cache.font = font;\n\t  }\n\t  ctx.save();\n\t  ctx.font = font;\n\t  let longest = 0;\n\t  const ilen = arrayOfThings.length;\n\t  let i, j, jlen, thing, nestedThing;\n\t  for (i = 0; i < ilen; i++) {\n\t    thing = arrayOfThings[i];\n\t    if (thing !== undefined && thing !== null && !isArray(thing)) {\n\t      longest = _measureText(ctx, data, gc, longest, thing);\n\t    } else if (isArray(thing)) {\n\t      for ((j = 0, jlen = thing.length); j < jlen; j++) {\n\t        nestedThing = thing[j];\n\t        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n\t          longest = _measureText(ctx, data, gc, longest, nestedThing);\n\t        }\n\t      }\n\t    }\n\t  }\n\t  ctx.restore();\n\t  const gcLen = gc.length / 2;\n\t  if (gcLen > arrayOfThings.length) {\n\t    for (i = 0; i < gcLen; i++) {\n\t      delete data[gc[i]];\n\t    }\n\t    gc.splice(0, gcLen);\n\t  }\n\t  return longest;\n\t}\n\tfunction _alignPixel(chart, pixel, width) {\n\t  const devicePixelRatio = chart.currentDevicePixelRatio;\n\t  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n\t  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n\t}\n\tfunction clearCanvas(canvas, ctx) {\n\t  if (!ctx && !canvas) {\n\t    return;\n\t  }\n\t  ctx = ctx || canvas.getContext(\"2d\");\n\t  ctx.save();\n\t  ctx.resetTransform();\n\t  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\t  ctx.restore();\n\t}\n\tfunction drawPoint(ctx, options, x, y) {\n\t  drawPointLegend(ctx, options, x, y, null);\n\t}\n\tfunction drawPointLegend(ctx, options, x, y, w) {\n\t  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n\t  const style = options.pointStyle;\n\t  const rotation = options.rotation;\n\t  const radius = options.radius;\n\t  let rad = (rotation || 0) * RAD_PER_DEG;\n\t  if (style && typeof style === \"object\") {\n\t    type = style.toString();\n\t    if (type === \"[object HTMLImageElement]\" || type === \"[object HTMLCanvasElement]\") {\n\t      ctx.save();\n\t      ctx.translate(x, y);\n\t      ctx.rotate(rad);\n\t      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n\t      ctx.restore();\n\t      return;\n\t    }\n\t  }\n\t  if (isNaN(radius) || radius <= 0) {\n\t    return;\n\t  }\n\t  ctx.beginPath();\n\t  switch (style) {\n\t    default:\n\t      if (w) {\n\t        ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n\t      } else {\n\t        ctx.arc(x, y, radius, 0, TAU);\n\t      }\n\t      ctx.closePath();\n\t      break;\n\t    case \"triangle\":\n\t      width = w ? w / 2 : radius;\n\t      ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n\t      rad += TWO_THIRDS_PI;\n\t      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n\t      rad += TWO_THIRDS_PI;\n\t      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n\t      ctx.closePath();\n\t      break;\n\t    case \"rectRounded\":\n\t      cornerRadius = radius * 0.516;\n\t      size = radius - cornerRadius;\n\t      xOffset = Math.cos(rad + QUARTER_PI) * size;\n\t      xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n\t      yOffset = Math.sin(rad + QUARTER_PI) * size;\n\t      yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n\t      ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n\t      ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n\t      ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n\t      ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n\t      ctx.closePath();\n\t      break;\n\t    case \"rect\":\n\t      if (!rotation) {\n\t        size = Math.SQRT1_2 * radius;\n\t        width = w ? w / 2 : size;\n\t        ctx.rect(x - width, y - size, 2 * width, 2 * size);\n\t        break;\n\t      }\n\t      rad += QUARTER_PI;\n\t    case \"rectRot\":\n\t      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n\t      xOffset = Math.cos(rad) * radius;\n\t      yOffset = Math.sin(rad) * radius;\n\t      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n\t      ctx.moveTo(x - xOffsetW, y - yOffset);\n\t      ctx.lineTo(x + yOffsetW, y - xOffset);\n\t      ctx.lineTo(x + xOffsetW, y + yOffset);\n\t      ctx.lineTo(x - yOffsetW, y + xOffset);\n\t      ctx.closePath();\n\t      break;\n\t    case \"crossRot\":\n\t      rad += QUARTER_PI;\n\t    case \"cross\":\n\t      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n\t      xOffset = Math.cos(rad) * radius;\n\t      yOffset = Math.sin(rad) * radius;\n\t      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n\t      ctx.moveTo(x - xOffsetW, y - yOffset);\n\t      ctx.lineTo(x + xOffsetW, y + yOffset);\n\t      ctx.moveTo(x + yOffsetW, y - xOffset);\n\t      ctx.lineTo(x - yOffsetW, y + xOffset);\n\t      break;\n\t    case \"star\":\n\t      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n\t      xOffset = Math.cos(rad) * radius;\n\t      yOffset = Math.sin(rad) * radius;\n\t      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n\t      ctx.moveTo(x - xOffsetW, y - yOffset);\n\t      ctx.lineTo(x + xOffsetW, y + yOffset);\n\t      ctx.moveTo(x + yOffsetW, y - xOffset);\n\t      ctx.lineTo(x - yOffsetW, y + xOffset);\n\t      rad += QUARTER_PI;\n\t      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n\t      xOffset = Math.cos(rad) * radius;\n\t      yOffset = Math.sin(rad) * radius;\n\t      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n\t      ctx.moveTo(x - xOffsetW, y - yOffset);\n\t      ctx.lineTo(x + xOffsetW, y + yOffset);\n\t      ctx.moveTo(x + yOffsetW, y - xOffset);\n\t      ctx.lineTo(x - yOffsetW, y + xOffset);\n\t      break;\n\t    case \"line\":\n\t      xOffset = w ? w / 2 : Math.cos(rad) * radius;\n\t      yOffset = Math.sin(rad) * radius;\n\t      ctx.moveTo(x - xOffset, y - yOffset);\n\t      ctx.lineTo(x + xOffset, y + yOffset);\n\t      break;\n\t    case \"dash\":\n\t      ctx.moveTo(x, y);\n\t      ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n\t      break;\n\t    case false:\n\t      ctx.closePath();\n\t      break;\n\t  }\n\t  ctx.fill();\n\t  if (options.borderWidth > 0) {\n\t    ctx.stroke();\n\t  }\n\t}\n\tfunction _isPointInArea(point, area, margin) {\n\t  margin = margin || 0.5;\n\t  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n\t}\n\tfunction clipArea(ctx, area) {\n\t  ctx.save();\n\t  ctx.beginPath();\n\t  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t  ctx.clip();\n\t}\n\tfunction unclipArea(ctx) {\n\t  ctx.restore();\n\t}\n\tfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n\t  if (!previous) {\n\t    return ctx.lineTo(target.x, target.y);\n\t  }\n\t  if (mode === \"middle\") {\n\t    const midpoint = (previous.x + target.x) / 2;\n\t    ctx.lineTo(midpoint, previous.y);\n\t    ctx.lineTo(midpoint, target.y);\n\t  } else if (mode === \"after\" !== !!flip) {\n\t    ctx.lineTo(previous.x, target.y);\n\t  } else {\n\t    ctx.lineTo(target.x, previous.y);\n\t  }\n\t  ctx.lineTo(target.x, target.y);\n\t}\n\tfunction _bezierCurveTo(ctx, previous, target, flip) {\n\t  if (!previous) {\n\t    return ctx.lineTo(target.x, target.y);\n\t  }\n\t  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n\t}\n\tfunction setRenderOpts(ctx, opts) {\n\t  if (opts.translation) {\n\t    ctx.translate(opts.translation[0], opts.translation[1]);\n\t  }\n\t  if (!isNullOrUndef(opts.rotation)) {\n\t    ctx.rotate(opts.rotation);\n\t  }\n\t  if (opts.color) {\n\t    ctx.fillStyle = opts.color;\n\t  }\n\t  if (opts.textAlign) {\n\t    ctx.textAlign = opts.textAlign;\n\t  }\n\t  if (opts.textBaseline) {\n\t    ctx.textBaseline = opts.textBaseline;\n\t  }\n\t}\n\tfunction decorateText(ctx, x, y, line, opts) {\n\t  if (opts.strikethrough || opts.underline) {\n\t    const metrics = ctx.measureText(line);\n\t    const left = x - metrics.actualBoundingBoxLeft;\n\t    const right = x + metrics.actualBoundingBoxRight;\n\t    const top = y - metrics.actualBoundingBoxAscent;\n\t    const bottom = y + metrics.actualBoundingBoxDescent;\n\t    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n\t    ctx.strokeStyle = ctx.fillStyle;\n\t    ctx.beginPath();\n\t    ctx.lineWidth = opts.decorationWidth || 2;\n\t    ctx.moveTo(left, yDecoration);\n\t    ctx.lineTo(right, yDecoration);\n\t    ctx.stroke();\n\t  }\n\t}\n\tfunction drawBackdrop(ctx, opts) {\n\t  const oldColor = ctx.fillStyle;\n\t  ctx.fillStyle = opts.color;\n\t  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n\t  ctx.fillStyle = oldColor;\n\t}\n\tfunction renderText(ctx, text, x, y, font, opts = {}) {\n\t  const lines = isArray(text) ? text : [text];\n\t  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== \"\";\n\t  let i, line;\n\t  ctx.save();\n\t  ctx.font = font.string;\n\t  setRenderOpts(ctx, opts);\n\t  for (i = 0; i < lines.length; ++i) {\n\t    line = lines[i];\n\t    if (opts.backdrop) {\n\t      drawBackdrop(ctx, opts.backdrop);\n\t    }\n\t    if (stroke) {\n\t      if (opts.strokeColor) {\n\t        ctx.strokeStyle = opts.strokeColor;\n\t      }\n\t      if (!isNullOrUndef(opts.strokeWidth)) {\n\t        ctx.lineWidth = opts.strokeWidth;\n\t      }\n\t      ctx.strokeText(line, x, y, opts.maxWidth);\n\t    }\n\t    ctx.fillText(line, x, y, opts.maxWidth);\n\t    decorateText(ctx, x, y, line, opts);\n\t    y += Number(font.lineHeight);\n\t  }\n\t  ctx.restore();\n\t}\n\tfunction addRoundedRectPath(ctx, rect) {\n\t  const {x, y, w, h, radius} = rect;\n\t  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n\t  ctx.lineTo(x, y + h - radius.bottomLeft);\n\t  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n\t  ctx.lineTo(x + w - radius.bottomRight, y + h);\n\t  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n\t  ctx.lineTo(x + w, y + radius.topRight);\n\t  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n\t  ctx.lineTo(x + radius.topLeft, y);\n\t}\n\tconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\n\tconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n\tfunction toLineHeight(value, size) {\n\t  const matches = (\"\" + value).match(LINE_HEIGHT);\n\t  if (!matches || matches[1] === \"normal\") {\n\t    return size * 1.2;\n\t  }\n\t  value = +matches[2];\n\t  switch (matches[3]) {\n\t    case \"px\":\n\t      return value;\n\t    case \"%\":\n\t      value /= 100;\n\t      break;\n\t  }\n\t  return size * value;\n\t}\n\tconst numberOrZero = v => +v || 0;\n\tfunction _readValueToProps(value, props) {\n\t  const ret = {};\n\t  const objProps = isObject(props);\n\t  const keys = objProps ? Object.keys(props) : props;\n\t  const read = isObject(value) ? objProps ? prop => valueOrDefault(value[prop], value[props[prop]]) : prop => value[prop] : () => value;\n\t  for (const prop of keys) {\n\t    ret[prop] = numberOrZero(read(prop));\n\t  }\n\t  return ret;\n\t}\n\tfunction toTRBL(value) {\n\t  return _readValueToProps(value, {\n\t    top: \"y\",\n\t    right: \"x\",\n\t    bottom: \"y\",\n\t    left: \"x\"\n\t  });\n\t}\n\tfunction toTRBLCorners(value) {\n\t  return _readValueToProps(value, [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]);\n\t}\n\tfunction toPadding(value) {\n\t  const obj = toTRBL(value);\n\t  obj.width = obj.left + obj.right;\n\t  obj.height = obj.top + obj.bottom;\n\t  return obj;\n\t}\n\tfunction toFont(options, fallback) {\n\t  options = options || ({});\n\t  fallback = fallback || defaults$1.font;\n\t  let size = valueOrDefault(options.size, fallback.size);\n\t  if (typeof size === \"string\") {\n\t    size = parseInt(size, 10);\n\t  }\n\t  let style = valueOrDefault(options.style, fallback.style);\n\t  if (style && !(\"\" + style).match(FONT_STYLE)) {\n\t    console.warn(\"Invalid font style specified: \\\"\" + style + \"\\\"\");\n\t    style = undefined;\n\t  }\n\t  const font = {\n\t    family: valueOrDefault(options.family, fallback.family),\n\t    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n\t    size,\n\t    style,\n\t    weight: valueOrDefault(options.weight, fallback.weight),\n\t    string: \"\"\n\t  };\n\t  font.string = toFontString(font);\n\t  return font;\n\t}\n\tfunction resolve(inputs, context, index, info) {\n\t  let cacheable = true;\n\t  let i, ilen, value;\n\t  for ((i = 0, ilen = inputs.length); i < ilen; ++i) {\n\t    value = inputs[i];\n\t    if (value === undefined) {\n\t      continue;\n\t    }\n\t    if (context !== undefined && typeof value === \"function\") {\n\t      value = value(context);\n\t      cacheable = false;\n\t    }\n\t    if (index !== undefined && isArray(value)) {\n\t      value = value[index % value.length];\n\t      cacheable = false;\n\t    }\n\t    if (value !== undefined) {\n\t      if (info && !cacheable) {\n\t        info.cacheable = false;\n\t      }\n\t      return value;\n\t    }\n\t  }\n\t}\n\tfunction _addGrace(minmax, grace, beginAtZero) {\n\t  const {min, max} = minmax;\n\t  const change = toDimension(grace, (max - min) / 2);\n\t  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n\t  return {\n\t    min: keepZero(min, -Math.abs(change)),\n\t    max: keepZero(max, change)\n\t  };\n\t}\n\tfunction createContext(parentContext, context) {\n\t  return Object.assign(Object.create(parentContext), context);\n\t}\n\tfunction _createResolver(scopes, prefixes = [\"\"], rootScopes, fallback, getTarget = () => scopes[0]) {\n\t  const finalRootScopes = rootScopes || scopes;\n\t  if (typeof fallback === \"undefined\") {\n\t    fallback = _resolve(\"_fallback\", scopes);\n\t  }\n\t  const cache = {\n\t    [Symbol.toStringTag]: \"Object\",\n\t    _cacheable: true,\n\t    _scopes: scopes,\n\t    _rootScopes: finalRootScopes,\n\t    _fallback: fallback,\n\t    _getTarget: getTarget,\n\t    override: scope => _createResolver([scope, ...scopes], prefixes, finalRootScopes, fallback)\n\t  };\n\t  return new Proxy(cache, {\n\t    deleteProperty(target, prop) {\n\t      delete target[prop];\n\t      delete target._keys;\n\t      delete scopes[0][prop];\n\t      return true;\n\t    },\n\t    get(target, prop) {\n\t      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n\t    },\n\t    getOwnPropertyDescriptor(target, prop) {\n\t      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n\t    },\n\t    getPrototypeOf() {\n\t      return Reflect.getPrototypeOf(scopes[0]);\n\t    },\n\t    has(target, prop) {\n\t      return getKeysFromAllScopes(target).includes(prop);\n\t    },\n\t    ownKeys(target) {\n\t      return getKeysFromAllScopes(target);\n\t    },\n\t    set(target, prop, value) {\n\t      const storage = target._storage || (target._storage = getTarget());\n\t      target[prop] = storage[prop] = value;\n\t      delete target._keys;\n\t      return true;\n\t    }\n\t  });\n\t}\n\tfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n\t  const cache = {\n\t    _cacheable: false,\n\t    _proxy: proxy,\n\t    _context: context,\n\t    _subProxy: subProxy,\n\t    _stack: new Set(),\n\t    _descriptors: _descriptors(proxy, descriptorDefaults),\n\t    setContext: ctx => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n\t    override: scope => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n\t  };\n\t  return new Proxy(cache, {\n\t    deleteProperty(target, prop) {\n\t      delete target[prop];\n\t      delete proxy[prop];\n\t      return true;\n\t    },\n\t    get(target, prop, receiver) {\n\t      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));\n\t    },\n\t    getOwnPropertyDescriptor(target, prop) {\n\t      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n\t        enumerable: true,\n\t        configurable: true\n\t      } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n\t    },\n\t    getPrototypeOf() {\n\t      return Reflect.getPrototypeOf(proxy);\n\t    },\n\t    has(target, prop) {\n\t      return Reflect.has(proxy, prop);\n\t    },\n\t    ownKeys() {\n\t      return Reflect.ownKeys(proxy);\n\t    },\n\t    set(target, prop, value) {\n\t      proxy[prop] = value;\n\t      delete target[prop];\n\t      return true;\n\t    }\n\t  });\n\t}\n\tfunction _descriptors(proxy, defaults = {\n\t  scriptable: true,\n\t  indexable: true\n\t}) {\n\t  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n\t  return {\n\t    allKeys: _allKeys,\n\t    scriptable: _scriptable,\n\t    indexable: _indexable,\n\t    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n\t    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n\t  };\n\t}\n\tconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\n\tconst needsSubResolver = (prop, value) => isObject(value) && prop !== \"adapters\" && (Object.getPrototypeOf(value) === null || value.constructor === Object);\n\tfunction _cached(target, prop, resolve) {\n\t  if (Object.prototype.hasOwnProperty.call(target, prop) || prop === \"constructor\") {\n\t    return target[prop];\n\t  }\n\t  const value = resolve();\n\t  target[prop] = value;\n\t  return value;\n\t}\n\tfunction _resolveWithContext(target, prop, receiver) {\n\t  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n\t  let value = _proxy[prop];\n\t  if (isFunction(value) && descriptors.isScriptable(prop)) {\n\t    value = _resolveScriptable(prop, value, target, receiver);\n\t  }\n\t  if (isArray(value) && value.length) {\n\t    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n\t  }\n\t  if (needsSubResolver(prop, value)) {\n\t    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n\t  }\n\t  return value;\n\t}\n\tfunction _resolveScriptable(prop, getValue, target, receiver) {\n\t  const {_proxy, _context, _subProxy, _stack} = target;\n\t  if (_stack.has(prop)) {\n\t    throw new Error(\"Recursion detected: \" + Array.from(_stack).join(\"->\") + \"->\" + prop);\n\t  }\n\t  _stack.add(prop);\n\t  let value = getValue(_context, _subProxy || receiver);\n\t  _stack.delete(prop);\n\t  if (needsSubResolver(prop, value)) {\n\t    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n\t  }\n\t  return value;\n\t}\n\tfunction _resolveArray(prop, value, target, isIndexable) {\n\t  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n\t  if (typeof _context.index !== \"undefined\" && isIndexable(prop)) {\n\t    return value[_context.index % value.length];\n\t  } else if (isObject(value[0])) {\n\t    const arr = value;\n\t    const scopes = _proxy._scopes.filter(s => s !== arr);\n\t    value = [];\n\t    for (const item of arr) {\n\t      const resolver = createSubResolver(scopes, _proxy, prop, item);\n\t      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n\t    }\n\t  }\n\t  return value;\n\t}\n\tfunction resolveFallback(fallback, prop, value) {\n\t  return isFunction(fallback) ? fallback(prop, value) : fallback;\n\t}\n\tconst getScope = (key, parent) => key === true ? parent : typeof key === \"string\" ? resolveObjectKey(parent, key) : undefined;\n\tfunction addScopes(set, parentScopes, key, parentFallback, value) {\n\t  for (const parent of parentScopes) {\n\t    const scope = getScope(key, parent);\n\t    if (scope) {\n\t      set.add(scope);\n\t      const fallback = resolveFallback(scope._fallback, key, value);\n\t      if (typeof fallback !== \"undefined\" && fallback !== key && fallback !== parentFallback) {\n\t        return fallback;\n\t      }\n\t    } else if (scope === false && typeof parentFallback !== \"undefined\" && key !== parentFallback) {\n\t      return null;\n\t    }\n\t  }\n\t  return false;\n\t}\n\tfunction createSubResolver(parentScopes, resolver, prop, value) {\n\t  const rootScopes = resolver._rootScopes;\n\t  const fallback = resolveFallback(resolver._fallback, prop, value);\n\t  const allScopes = [...parentScopes, ...rootScopes];\n\t  const set = new Set();\n\t  set.add(value);\n\t  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n\t  if (key === null) {\n\t    return false;\n\t  }\n\t  if (typeof fallback !== \"undefined\" && fallback !== prop) {\n\t    key = addScopesFromKey(set, allScopes, fallback, key, value);\n\t    if (key === null) {\n\t      return false;\n\t    }\n\t  }\n\t  return _createResolver(Array.from(set), [\"\"], rootScopes, fallback, () => subGetTarget(resolver, prop, value));\n\t}\n\tfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n\t  while (key) {\n\t    key = addScopes(set, allScopes, key, fallback, item);\n\t  }\n\t  return key;\n\t}\n\tfunction subGetTarget(resolver, prop, value) {\n\t  const parent = resolver._getTarget();\n\t  if (!((prop in parent))) {\n\t    parent[prop] = {};\n\t  }\n\t  const target = parent[prop];\n\t  if (isArray(target) && isObject(value)) {\n\t    return value;\n\t  }\n\t  return target || ({});\n\t}\n\tfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n\t  let value;\n\t  for (const prefix of prefixes) {\n\t    value = _resolve(readKey(prefix, prop), scopes);\n\t    if (typeof value !== \"undefined\") {\n\t      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n\t    }\n\t  }\n\t}\n\tfunction _resolve(key, scopes) {\n\t  for (const scope of scopes) {\n\t    if (!scope) {\n\t      continue;\n\t    }\n\t    const value = scope[key];\n\t    if (typeof value !== \"undefined\") {\n\t      return value;\n\t    }\n\t  }\n\t}\n\tfunction getKeysFromAllScopes(target) {\n\t  let keys = target._keys;\n\t  if (!keys) {\n\t    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n\t  }\n\t  return keys;\n\t}\n\tfunction resolveKeysFromAllScopes(scopes) {\n\t  const set = new Set();\n\t  for (const scope of scopes) {\n\t    for (const key of Object.keys(scope).filter(k => !k.startsWith(\"_\"))) {\n\t      set.add(key);\n\t    }\n\t  }\n\t  return Array.from(set);\n\t}\n\tfunction _parseObjectDataRadialScale(meta, data, start, count) {\n\t  const {iScale} = meta;\n\t  const {key = \"r\"} = this._parsing;\n\t  const parsed = new Array(count);\n\t  let i, ilen, index, item;\n\t  for ((i = 0, ilen = count); i < ilen; ++i) {\n\t    index = i + start;\n\t    item = data[index];\n\t    parsed[i] = {\n\t      r: iScale.parse(resolveObjectKey(item, key), index)\n\t    };\n\t  }\n\t  return parsed;\n\t}\n\tconst EPSILON = Number.EPSILON || 1e-14;\n\tconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\n\tconst getValueAxis = indexAxis => indexAxis === \"x\" ? \"y\" : \"x\";\n\tfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n\t  const previous = firstPoint.skip ? middlePoint : firstPoint;\n\t  const current = middlePoint;\n\t  const next = afterPoint.skip ? middlePoint : afterPoint;\n\t  const d01 = distanceBetweenPoints(current, previous);\n\t  const d12 = distanceBetweenPoints(next, current);\n\t  let s01 = d01 / (d01 + d12);\n\t  let s12 = d12 / (d01 + d12);\n\t  s01 = isNaN(s01) ? 0 : s01;\n\t  s12 = isNaN(s12) ? 0 : s12;\n\t  const fa = t * s01;\n\t  const fb = t * s12;\n\t  return {\n\t    previous: {\n\t      x: current.x - fa * (next.x - previous.x),\n\t      y: current.y - fa * (next.y - previous.y)\n\t    },\n\t    next: {\n\t      x: current.x + fb * (next.x - previous.x),\n\t      y: current.y + fb * (next.y - previous.y)\n\t    }\n\t  };\n\t}\n\tfunction monotoneAdjust(points, deltaK, mK) {\n\t  const pointsLen = points.length;\n\t  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n\t  let pointAfter = getPoint(points, 0);\n\t  for (let i = 0; i < pointsLen - 1; ++i) {\n\t    pointCurrent = pointAfter;\n\t    pointAfter = getPoint(points, i + 1);\n\t    if (!pointCurrent || !pointAfter) {\n\t      continue;\n\t    }\n\t    if (almostEquals(deltaK[i], 0, EPSILON)) {\n\t      mK[i] = mK[i + 1] = 0;\n\t      continue;\n\t    }\n\t    alphaK = mK[i] / deltaK[i];\n\t    betaK = mK[i + 1] / deltaK[i];\n\t    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t    if (squaredMagnitude <= 9) {\n\t      continue;\n\t    }\n\t    tauK = 3 / Math.sqrt(squaredMagnitude);\n\t    mK[i] = alphaK * tauK * deltaK[i];\n\t    mK[i + 1] = betaK * tauK * deltaK[i];\n\t  }\n\t}\n\tfunction monotoneCompute(points, mK, indexAxis = \"x\") {\n\t  const valueAxis = getValueAxis(indexAxis);\n\t  const pointsLen = points.length;\n\t  let delta, pointBefore, pointCurrent;\n\t  let pointAfter = getPoint(points, 0);\n\t  for (let i = 0; i < pointsLen; ++i) {\n\t    pointBefore = pointCurrent;\n\t    pointCurrent = pointAfter;\n\t    pointAfter = getPoint(points, i + 1);\n\t    if (!pointCurrent) {\n\t      continue;\n\t    }\n\t    const iPixel = pointCurrent[indexAxis];\n\t    const vPixel = pointCurrent[valueAxis];\n\t    if (pointBefore) {\n\t      delta = (iPixel - pointBefore[indexAxis]) / 3;\n\t      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n\t      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n\t    }\n\t    if (pointAfter) {\n\t      delta = (pointAfter[indexAxis] - iPixel) / 3;\n\t      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n\t      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n\t    }\n\t  }\n\t}\n\tfunction splineCurveMonotone(points, indexAxis = \"x\") {\n\t  const valueAxis = getValueAxis(indexAxis);\n\t  const pointsLen = points.length;\n\t  const deltaK = Array(pointsLen).fill(0);\n\t  const mK = Array(pointsLen);\n\t  let i, pointBefore, pointCurrent;\n\t  let pointAfter = getPoint(points, 0);\n\t  for (i = 0; i < pointsLen; ++i) {\n\t    pointBefore = pointCurrent;\n\t    pointCurrent = pointAfter;\n\t    pointAfter = getPoint(points, i + 1);\n\t    if (!pointCurrent) {\n\t      continue;\n\t    }\n\t    if (pointAfter) {\n\t      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n\t      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n\t    }\n\t    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n\t  }\n\t  monotoneAdjust(points, deltaK, mK);\n\t  monotoneCompute(points, mK, indexAxis);\n\t}\n\tfunction capControlPoint(pt, min, max) {\n\t  return Math.max(Math.min(pt, max), min);\n\t}\n\tfunction capBezierPoints(points, area) {\n\t  let i, ilen, point, inArea, inAreaPrev;\n\t  let inAreaNext = _isPointInArea(points[0], area);\n\t  for ((i = 0, ilen = points.length); i < ilen; ++i) {\n\t    inAreaPrev = inArea;\n\t    inArea = inAreaNext;\n\t    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n\t    if (!inArea) {\n\t      continue;\n\t    }\n\t    point = points[i];\n\t    if (inAreaPrev) {\n\t      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n\t      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n\t    }\n\t    if (inAreaNext) {\n\t      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n\t      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n\t    }\n\t  }\n\t}\n\tfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n\t  let i, ilen, point, controlPoints;\n\t  if (options.spanGaps) {\n\t    points = points.filter(pt => !pt.skip);\n\t  }\n\t  if (options.cubicInterpolationMode === \"monotone\") {\n\t    splineCurveMonotone(points, indexAxis);\n\t  } else {\n\t    let prev = loop ? points[points.length - 1] : points[0];\n\t    for ((i = 0, ilen = points.length); i < ilen; ++i) {\n\t      point = points[i];\n\t      controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n\t      point.cp1x = controlPoints.previous.x;\n\t      point.cp1y = controlPoints.previous.y;\n\t      point.cp2x = controlPoints.next.x;\n\t      point.cp2y = controlPoints.next.y;\n\t      prev = point;\n\t    }\n\t  }\n\t  if (options.capBezierPoints) {\n\t    capBezierPoints(points, area);\n\t  }\n\t}\n\tfunction _isDomSupported() {\n\t  return typeof window !== \"undefined\" && typeof document !== \"undefined\";\n\t}\n\tfunction _getParentNode(domNode) {\n\t  let parent = domNode.parentNode;\n\t  if (parent && parent.toString() === \"[object ShadowRoot]\") {\n\t    parent = parent.host;\n\t  }\n\t  return parent;\n\t}\n\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t  let valueInPixels;\n\t  if (typeof styleValue === \"string\") {\n\t    valueInPixels = parseInt(styleValue, 10);\n\t    if (styleValue.indexOf(\"%\") !== -1) {\n\t      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t    }\n\t  } else {\n\t    valueInPixels = styleValue;\n\t  }\n\t  return valueInPixels;\n\t}\n\tconst getComputedStyle = element => element.ownerDocument.defaultView.getComputedStyle(element, null);\n\tfunction getStyle(el, property) {\n\t  return getComputedStyle(el).getPropertyValue(property);\n\t}\n\tconst positions = [\"top\", \"right\", \"bottom\", \"left\"];\n\tfunction getPositionedStyle(styles, style, suffix) {\n\t  const result = {};\n\t  suffix = suffix ? \"-\" + suffix : \"\";\n\t  for (let i = 0; i < 4; i++) {\n\t    const pos = positions[i];\n\t    result[pos] = parseFloat(styles[style + \"-\" + pos + suffix]) || 0;\n\t  }\n\t  result.width = result.left + result.right;\n\t  result.height = result.top + result.bottom;\n\t  return result;\n\t}\n\tconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\n\tfunction getCanvasPosition(e, canvas) {\n\t  const touches = e.touches;\n\t  const source = touches && touches.length ? touches[0] : e;\n\t  const {offsetX, offsetY} = source;\n\t  let box = false;\n\t  let x, y;\n\t  if (useOffsetPos(offsetX, offsetY, e.target)) {\n\t    x = offsetX;\n\t    y = offsetY;\n\t  } else {\n\t    const rect = canvas.getBoundingClientRect();\n\t    x = source.clientX - rect.left;\n\t    y = source.clientY - rect.top;\n\t    box = true;\n\t  }\n\t  return {\n\t    x,\n\t    y,\n\t    box\n\t  };\n\t}\n\tfunction getRelativePosition(event, chart) {\n\t  if ((\"native\" in event)) {\n\t    return event;\n\t  }\n\t  const {canvas, currentDevicePixelRatio} = chart;\n\t  const style = getComputedStyle(canvas);\n\t  const borderBox = style.boxSizing === \"border-box\";\n\t  const paddings = getPositionedStyle(style, \"padding\");\n\t  const borders = getPositionedStyle(style, \"border\", \"width\");\n\t  const {x, y, box} = getCanvasPosition(event, canvas);\n\t  const xOffset = paddings.left + (box && borders.left);\n\t  const yOffset = paddings.top + (box && borders.top);\n\t  let {width, height} = chart;\n\t  if (borderBox) {\n\t    width -= paddings.width + borders.width;\n\t    height -= paddings.height + borders.height;\n\t  }\n\t  return {\n\t    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n\t    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n\t  };\n\t}\n\tfunction getContainerSize(canvas, width, height) {\n\t  let maxWidth, maxHeight;\n\t  if (width === undefined || height === undefined) {\n\t    const container = canvas && _getParentNode(canvas);\n\t    if (!container) {\n\t      width = canvas.clientWidth;\n\t      height = canvas.clientHeight;\n\t    } else {\n\t      const rect = container.getBoundingClientRect();\n\t      const containerStyle = getComputedStyle(container);\n\t      const containerBorder = getPositionedStyle(containerStyle, \"border\", \"width\");\n\t      const containerPadding = getPositionedStyle(containerStyle, \"padding\");\n\t      width = rect.width - containerPadding.width - containerBorder.width;\n\t      height = rect.height - containerPadding.height - containerBorder.height;\n\t      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, \"clientWidth\");\n\t      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, \"clientHeight\");\n\t    }\n\t  }\n\t  return {\n\t    width,\n\t    height,\n\t    maxWidth: maxWidth || INFINITY,\n\t    maxHeight: maxHeight || INFINITY\n\t  };\n\t}\n\tconst round1 = v => Math.round(v * 10) / 10;\n\tfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n\t  const style = getComputedStyle(canvas);\n\t  const margins = getPositionedStyle(style, \"margin\");\n\t  const maxWidth = parseMaxStyle(style.maxWidth, canvas, \"clientWidth\") || INFINITY;\n\t  const maxHeight = parseMaxStyle(style.maxHeight, canvas, \"clientHeight\") || INFINITY;\n\t  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n\t  let {width, height} = containerSize;\n\t  if (style.boxSizing === \"content-box\") {\n\t    const borders = getPositionedStyle(style, \"border\", \"width\");\n\t    const paddings = getPositionedStyle(style, \"padding\");\n\t    width -= paddings.width + borders.width;\n\t    height -= paddings.height + borders.height;\n\t  }\n\t  width = Math.max(0, width - margins.width);\n\t  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n\t  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n\t  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n\t  if (width && !height) {\n\t    height = round1(width / 2);\n\t  }\n\t  const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n\t  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n\t    height = containerSize.height;\n\t    width = round1(Math.floor(height * aspectRatio));\n\t  }\n\t  return {\n\t    width,\n\t    height\n\t  };\n\t}\n\tfunction retinaScale(chart, forceRatio, forceStyle) {\n\t  const pixelRatio = forceRatio || 1;\n\t  const deviceHeight = Math.floor(chart.height * pixelRatio);\n\t  const deviceWidth = Math.floor(chart.width * pixelRatio);\n\t  chart.height = Math.floor(chart.height);\n\t  chart.width = Math.floor(chart.width);\n\t  const canvas = chart.canvas;\n\t  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n\t    canvas.style.height = `${chart.height}px`;\n\t    canvas.style.width = `${chart.width}px`;\n\t  }\n\t  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n\t    chart.currentDevicePixelRatio = pixelRatio;\n\t    canvas.height = deviceHeight;\n\t    canvas.width = deviceWidth;\n\t    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t    return true;\n\t  }\n\t  return false;\n\t}\n\tconst supportsEventListenerOptions = (function () {\n\t  let passiveSupported = false;\n\t  try {\n\t    const options = {\n\t      get passive() {\n\t        passiveSupported = true;\n\t        return false;\n\t      }\n\t    };\n\t    if (_isDomSupported()) {\n\t      window.addEventListener(\"test\", null, options);\n\t      window.removeEventListener(\"test\", null, options);\n\t    }\n\t  } catch (e) {}\n\t  return passiveSupported;\n\t})();\n\tfunction readUsedSize(element, property) {\n\t  const value = getStyle(element, property);\n\t  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n\t  return matches ? +matches[1] : undefined;\n\t}\n\tfunction _pointInLine(p1, p2, t, mode) {\n\t  return {\n\t    x: p1.x + t * (p2.x - p1.x),\n\t    y: p1.y + t * (p2.y - p1.y)\n\t  };\n\t}\n\tfunction _steppedInterpolation(p1, p2, t, mode) {\n\t  return {\n\t    x: p1.x + t * (p2.x - p1.x),\n\t    y: mode === \"middle\" ? t < 0.5 ? p1.y : p2.y : mode === \"after\" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n\t  };\n\t}\n\tfunction _bezierInterpolation(p1, p2, t, mode) {\n\t  const cp1 = {\n\t    x: p1.cp2x,\n\t    y: p1.cp2y\n\t  };\n\t  const cp2 = {\n\t    x: p2.cp1x,\n\t    y: p2.cp1y\n\t  };\n\t  const a = _pointInLine(p1, cp1, t);\n\t  const b = _pointInLine(cp1, cp2, t);\n\t  const c = _pointInLine(cp2, p2, t);\n\t  const d = _pointInLine(a, b, t);\n\t  const e = _pointInLine(b, c, t);\n\t  return _pointInLine(d, e, t);\n\t}\n\tconst getRightToLeftAdapter = function (rectX, width) {\n\t  return {\n\t    x(x) {\n\t      return rectX + rectX + width - x;\n\t    },\n\t    setWidth(w) {\n\t      width = w;\n\t    },\n\t    textAlign(align) {\n\t      if (align === \"center\") {\n\t        return align;\n\t      }\n\t      return align === \"right\" ? \"left\" : \"right\";\n\t    },\n\t    xPlus(x, value) {\n\t      return x - value;\n\t    },\n\t    leftForLtr(x, itemWidth) {\n\t      return x - itemWidth;\n\t    }\n\t  };\n\t};\n\tconst getLeftToRightAdapter = function () {\n\t  return {\n\t    x(x) {\n\t      return x;\n\t    },\n\t    setWidth(w) {},\n\t    textAlign(align) {\n\t      return align;\n\t    },\n\t    xPlus(x, value) {\n\t      return x + value;\n\t    },\n\t    leftForLtr(x, _itemWidth) {\n\t      return x;\n\t    }\n\t  };\n\t};\n\tfunction getRtlAdapter(rtl, rectX, width) {\n\t  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n\t}\n\tfunction overrideTextDirection(ctx, direction) {\n\t  let style, original;\n\t  if (direction === \"ltr\" || direction === \"rtl\") {\n\t    style = ctx.canvas.style;\n\t    original = [style.getPropertyValue(\"direction\"), style.getPropertyPriority(\"direction\")];\n\t    style.setProperty(\"direction\", direction, \"important\");\n\t    ctx.prevTextDirection = original;\n\t  }\n\t}\n\tfunction restoreTextDirection(ctx, original) {\n\t  if (original !== undefined) {\n\t    delete ctx.prevTextDirection;\n\t    ctx.canvas.style.setProperty(\"direction\", original[0], original[1]);\n\t  }\n\t}\n\tfunction propertyFn(property) {\n\t  if (property === \"angle\") {\n\t    return {\n\t      between: _angleBetween,\n\t      compare: _angleDiff,\n\t      normalize: _normalizeAngle\n\t    };\n\t  }\n\t  return {\n\t    between: _isBetween,\n\t    compare: (a, b) => a - b,\n\t    normalize: x => x\n\t  };\n\t}\n\tfunction normalizeSegment({start, end, count, loop, style}) {\n\t  return {\n\t    start: start % count,\n\t    end: end % count,\n\t    loop: loop && (end - start + 1) % count === 0,\n\t    style\n\t  };\n\t}\n\tfunction getSegment(segment, points, bounds) {\n\t  const {property, start: startBound, end: endBound} = bounds;\n\t  const {between, normalize} = propertyFn(property);\n\t  const count = points.length;\n\t  let {start, end, loop} = segment;\n\t  let i, ilen;\n\t  if (loop) {\n\t    start += count;\n\t    end += count;\n\t    for ((i = 0, ilen = count); i < ilen; ++i) {\n\t      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n\t        break;\n\t      }\n\t      start--;\n\t      end--;\n\t    }\n\t    start %= count;\n\t    end %= count;\n\t  }\n\t  if (end < start) {\n\t    end += count;\n\t  }\n\t  return {\n\t    start,\n\t    end,\n\t    loop,\n\t    style: segment.style\n\t  };\n\t}\n\tfunction _boundSegment(segment, points, bounds) {\n\t  if (!bounds) {\n\t    return [segment];\n\t  }\n\t  const {property, start: startBound, end: endBound} = bounds;\n\t  const count = points.length;\n\t  const {compare, between, normalize} = propertyFn(property);\n\t  const {start, end, loop, style} = getSegment(segment, points, bounds);\n\t  const result = [];\n\t  let inside = false;\n\t  let subStart = null;\n\t  let value, point, prevValue;\n\t  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n\t  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n\t  const shouldStart = () => inside || startIsBefore();\n\t  const shouldStop = () => !inside || endIsBefore();\n\t  for (let i = start, prev = start; i <= end; ++i) {\n\t    point = points[i % count];\n\t    if (point.skip) {\n\t      continue;\n\t    }\n\t    value = normalize(point[property]);\n\t    if (value === prevValue) {\n\t      continue;\n\t    }\n\t    inside = between(value, startBound, endBound);\n\t    if (subStart === null && shouldStart()) {\n\t      subStart = compare(value, startBound) === 0 ? i : prev;\n\t    }\n\t    if (subStart !== null && shouldStop()) {\n\t      result.push(normalizeSegment({\n\t        start: subStart,\n\t        end: i,\n\t        loop,\n\t        count,\n\t        style\n\t      }));\n\t      subStart = null;\n\t    }\n\t    prev = i;\n\t    prevValue = value;\n\t  }\n\t  if (subStart !== null) {\n\t    result.push(normalizeSegment({\n\t      start: subStart,\n\t      end,\n\t      loop,\n\t      count,\n\t      style\n\t    }));\n\t  }\n\t  return result;\n\t}\n\tfunction _boundSegments(line, bounds) {\n\t  const result = [];\n\t  const segments = line.segments;\n\t  for (let i = 0; i < segments.length; i++) {\n\t    const sub = _boundSegment(segments[i], line.points, bounds);\n\t    if (sub.length) {\n\t      result.push(...sub);\n\t    }\n\t  }\n\t  return result;\n\t}\n\tfunction findStartAndEnd(points, count, loop, spanGaps) {\n\t  let start = 0;\n\t  let end = count - 1;\n\t  if (loop && !spanGaps) {\n\t    while (start < count && !points[start].skip) {\n\t      start++;\n\t    }\n\t  }\n\t  while (start < count && points[start].skip) {\n\t    start++;\n\t  }\n\t  start %= count;\n\t  if (loop) {\n\t    end += start;\n\t  }\n\t  while (end > start && points[end % count].skip) {\n\t    end--;\n\t  }\n\t  end %= count;\n\t  return {\n\t    start,\n\t    end\n\t  };\n\t}\n\tfunction solidSegments(points, start, max, loop) {\n\t  const count = points.length;\n\t  const result = [];\n\t  let last = start;\n\t  let prev = points[start];\n\t  let end;\n\t  for (end = start + 1; end <= max; ++end) {\n\t    const cur = points[end % count];\n\t    if (cur.skip || cur.stop) {\n\t      if (!prev.skip) {\n\t        loop = false;\n\t        result.push({\n\t          start: start % count,\n\t          end: (end - 1) % count,\n\t          loop\n\t        });\n\t        start = last = cur.stop ? end : null;\n\t      }\n\t    } else {\n\t      last = end;\n\t      if (prev.skip) {\n\t        start = end;\n\t      }\n\t    }\n\t    prev = cur;\n\t  }\n\t  if (last !== null) {\n\t    result.push({\n\t      start: start % count,\n\t      end: last % count,\n\t      loop\n\t    });\n\t  }\n\t  return result;\n\t}\n\tfunction _computeSegments(line, segmentOptions) {\n\t  const points = line.points;\n\t  const spanGaps = line.options.spanGaps;\n\t  const count = points.length;\n\t  if (!count) {\n\t    return [];\n\t  }\n\t  const loop = !!line._loop;\n\t  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n\t  if (spanGaps === true) {\n\t    return splitByStyles(line, [{\n\t      start,\n\t      end,\n\t      loop\n\t    }], points, segmentOptions);\n\t  }\n\t  const max = end < start ? end + count : end;\n\t  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n\t  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n\t}\n\tfunction splitByStyles(line, segments, points, segmentOptions) {\n\t  if (!segmentOptions || !segmentOptions.setContext || !points) {\n\t    return segments;\n\t  }\n\t  return doSplitByStyles(line, segments, points, segmentOptions);\n\t}\n\tfunction doSplitByStyles(line, segments, points, segmentOptions) {\n\t  const chartContext = line._chart.getContext();\n\t  const baseStyle = readStyle(line.options);\n\t  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n\t  const count = points.length;\n\t  const result = [];\n\t  let prevStyle = baseStyle;\n\t  let start = segments[0].start;\n\t  let i = start;\n\t  function addStyle(s, e, l, st) {\n\t    const dir = spanGaps ? -1 : 1;\n\t    if (s === e) {\n\t      return;\n\t    }\n\t    s += count;\n\t    while (points[s % count].skip) {\n\t      s -= dir;\n\t    }\n\t    while (points[e % count].skip) {\n\t      e += dir;\n\t    }\n\t    if (s % count !== e % count) {\n\t      result.push({\n\t        start: s % count,\n\t        end: e % count,\n\t        loop: l,\n\t        style: st\n\t      });\n\t      prevStyle = st;\n\t      start = e % count;\n\t    }\n\t  }\n\t  for (const segment of segments) {\n\t    start = spanGaps ? start : segment.start;\n\t    let prev = points[start % count];\n\t    let style;\n\t    for (i = start + 1; i <= segment.end; i++) {\n\t      const pt = points[i % count];\n\t      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n\t        type: \"segment\",\n\t        p0: prev,\n\t        p1: pt,\n\t        p0DataIndex: (i - 1) % count,\n\t        p1DataIndex: i % count,\n\t        datasetIndex\n\t      })));\n\t      if (styleChanged(style, prevStyle)) {\n\t        addStyle(start, i - 1, segment.loop, prevStyle);\n\t      }\n\t      prev = pt;\n\t      prevStyle = style;\n\t    }\n\t    if (start < i - 1) {\n\t      addStyle(start, i - 1, segment.loop, prevStyle);\n\t    }\n\t  }\n\t  return result;\n\t}\n\tfunction readStyle(options) {\n\t  return {\n\t    backgroundColor: options.backgroundColor,\n\t    borderCapStyle: options.borderCapStyle,\n\t    borderDash: options.borderDash,\n\t    borderDashOffset: options.borderDashOffset,\n\t    borderJoinStyle: options.borderJoinStyle,\n\t    borderWidth: options.borderWidth,\n\t    borderColor: options.borderColor\n\t  };\n\t}\n\tfunction styleChanged(style, prevStyle) {\n\t  if (!prevStyle) {\n\t    return false;\n\t  }\n\t  const cache = [];\n\t  const replacer = function (key, value) {\n\t    if (!isPatternOrGradient(value)) {\n\t      return value;\n\t    }\n\t    if (!cache.includes(value)) {\n\t      cache.push(value);\n\t    }\n\t    return cache.indexOf(value);\n\t  };\n\t  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n\t}\n\thelpers_segment$1.HALF_PI = HALF_PI;\n\thelpers_segment$1.INFINITY = INFINITY;\n\thelpers_segment$1.PI = PI;\n\thelpers_segment$1.PITAU = PITAU;\n\thelpers_segment$1.QUARTER_PI = QUARTER_PI;\n\thelpers_segment$1.RAD_PER_DEG = RAD_PER_DEG;\n\thelpers_segment$1.TAU = TAU;\n\thelpers_segment$1.TWO_THIRDS_PI = TWO_THIRDS_PI;\n\thelpers_segment$1.Ticks = Ticks$1;\n\thelpers_segment$1._addGrace = _addGrace;\n\thelpers_segment$1._alignPixel = _alignPixel;\n\thelpers_segment$1._alignStartEnd = _alignStartEnd;\n\thelpers_segment$1._angleBetween = _angleBetween;\n\thelpers_segment$1._angleDiff = _angleDiff;\n\thelpers_segment$1._arrayUnique = _arrayUnique;\n\thelpers_segment$1._attachContext = _attachContext;\n\thelpers_segment$1._bezierCurveTo = _bezierCurveTo;\n\thelpers_segment$1._bezierInterpolation = _bezierInterpolation;\n\thelpers_segment$1._boundSegment = _boundSegment;\n\thelpers_segment$1._boundSegments = _boundSegments;\n\thelpers_segment$1._capitalize = _capitalize;\n\thelpers_segment$1._computeSegments = _computeSegments;\n\thelpers_segment$1._createResolver = _createResolver;\n\thelpers_segment$1._decimalPlaces = _decimalPlaces;\n\thelpers_segment$1._deprecated = _deprecated;\n\thelpers_segment$1._descriptors = _descriptors;\n\thelpers_segment$1._elementsEqual = _elementsEqual;\n\thelpers_segment$1._factorize = _factorize;\n\thelpers_segment$1._filterBetween = _filterBetween;\n\thelpers_segment$1._getParentNode = _getParentNode;\n\thelpers_segment$1._getStartAndCountOfVisiblePoints = _getStartAndCountOfVisiblePoints;\n\thelpers_segment$1._int16Range = _int16Range;\n\thelpers_segment$1._isBetween = _isBetween;\n\thelpers_segment$1._isClickEvent = _isClickEvent;\n\thelpers_segment$1._isDomSupported = _isDomSupported;\n\thelpers_segment$1._isPointInArea = _isPointInArea;\n\thelpers_segment$1._limitValue = _limitValue;\n\thelpers_segment$1._longestText = _longestText;\n\thelpers_segment$1._lookup = _lookup;\n\thelpers_segment$1._lookupByKey = _lookupByKey;\n\thelpers_segment$1._measureText = _measureText;\n\thelpers_segment$1._merger = _merger;\n\thelpers_segment$1._mergerIf = _mergerIf;\n\thelpers_segment$1._normalizeAngle = _normalizeAngle;\n\thelpers_segment$1._parseObjectDataRadialScale = _parseObjectDataRadialScale;\n\thelpers_segment$1._pointInLine = _pointInLine;\n\thelpers_segment$1._readValueToProps = _readValueToProps;\n\thelpers_segment$1._rlookupByKey = _rlookupByKey;\n\thelpers_segment$1._scaleRangesChanged = _scaleRangesChanged;\n\thelpers_segment$1._setMinAndMaxByKey = _setMinAndMaxByKey;\n\thelpers_segment$1._splitKey = _splitKey;\n\thelpers_segment$1._steppedInterpolation = _steppedInterpolation;\n\thelpers_segment$1._steppedLineTo = _steppedLineTo;\n\thelpers_segment$1._textX = _textX;\n\thelpers_segment$1._toLeftRightCenter = _toLeftRightCenter;\n\thelpers_segment$1._updateBezierControlPoints = _updateBezierControlPoints;\n\thelpers_segment$1.addRoundedRectPath = addRoundedRectPath;\n\thelpers_segment$1.almostEquals = almostEquals;\n\thelpers_segment$1.almostWhole = almostWhole;\n\thelpers_segment$1.callback = callback;\n\thelpers_segment$1.clearCanvas = clearCanvas;\n\thelpers_segment$1.clipArea = clipArea;\n\thelpers_segment$1.clone = clone;\n\thelpers_segment$1.color = color;\n\thelpers_segment$1.createContext = createContext;\n\thelpers_segment$1.debounce = debounce;\n\thelpers_segment$1.defaults = defaults$1;\n\thelpers_segment$1.defined = defined;\n\thelpers_segment$1.descriptors = descriptors;\n\thelpers_segment$1.distanceBetweenPoints = distanceBetweenPoints;\n\thelpers_segment$1.drawPoint = drawPoint;\n\thelpers_segment$1.drawPointLegend = drawPointLegend;\n\thelpers_segment$1.each = each;\n\thelpers_segment$1.effects = effects;\n\thelpers_segment$1.finiteOrDefault = finiteOrDefault;\n\thelpers_segment$1.fontString = fontString;\n\thelpers_segment$1.formatNumber = formatNumber;\n\thelpers_segment$1.getAngleFromPoint = getAngleFromPoint;\n\thelpers_segment$1.getHoverColor = getHoverColor;\n\thelpers_segment$1.getMaximumSize = getMaximumSize;\n\thelpers_segment$1.getRelativePosition = getRelativePosition;\n\thelpers_segment$1.getRtlAdapter = getRtlAdapter;\n\thelpers_segment$1.getStyle = getStyle;\n\thelpers_segment$1.isArray = isArray;\n\thelpers_segment$1.isFunction = isFunction;\n\thelpers_segment$1.isNullOrUndef = isNullOrUndef;\n\thelpers_segment$1.isNumber = isNumber;\n\thelpers_segment$1.isNumberFinite = isNumberFinite;\n\thelpers_segment$1.isObject = isObject;\n\thelpers_segment$1.isPatternOrGradient = isPatternOrGradient;\n\thelpers_segment$1.listenArrayEvents = listenArrayEvents;\n\thelpers_segment$1.log10 = log10;\n\thelpers_segment$1.merge = merge;\n\thelpers_segment$1.mergeIf = mergeIf;\n\thelpers_segment$1.niceNum = niceNum;\n\thelpers_segment$1.noop = noop;\n\thelpers_segment$1.overrideTextDirection = overrideTextDirection;\n\thelpers_segment$1.overrides = overrides;\n\thelpers_segment$1.readUsedSize = readUsedSize;\n\thelpers_segment$1.renderText = renderText;\n\thelpers_segment$1.requestAnimFrame = requestAnimFrame;\n\thelpers_segment$1.resolve = resolve;\n\thelpers_segment$1.resolveObjectKey = resolveObjectKey;\n\thelpers_segment$1.restoreTextDirection = restoreTextDirection;\n\thelpers_segment$1.retinaScale = retinaScale;\n\thelpers_segment$1.setsEqual = setsEqual;\n\thelpers_segment$1.sign = sign;\n\thelpers_segment$1.splineCurve = splineCurve;\n\thelpers_segment$1.splineCurveMonotone = splineCurveMonotone;\n\thelpers_segment$1.supportsEventListenerOptions = supportsEventListenerOptions;\n\thelpers_segment$1.throttled = throttled;\n\thelpers_segment$1.toDegrees = toDegrees;\n\thelpers_segment$1.toDimension = toDimension;\n\thelpers_segment$1.toFont = toFont;\n\thelpers_segment$1.toFontString = toFontString;\n\thelpers_segment$1.toLineHeight = toLineHeight;\n\thelpers_segment$1.toPadding = toPadding;\n\thelpers_segment$1.toPercentage = toPercentage;\n\thelpers_segment$1.toRadians = toRadians;\n\thelpers_segment$1.toTRBL = toTRBL;\n\thelpers_segment$1.toTRBLCorners = toTRBLCorners;\n\thelpers_segment$1.uid = uid;\n\thelpers_segment$1.unclipArea = unclipArea;\n\thelpers_segment$1.unlistenArrayEvents = unlistenArrayEvents;\n\thelpers_segment$1.valueOrDefault = valueOrDefault;\n\n\t/*!\n\t * Chart.js v4.4.4\n\t * https://www.chartjs.org\n\t * (c) 2024 Chart.js Contributors\n\t * Released under the MIT License\n\t */\n\n\tvar helpers_segment = helpers_segment$1;\n\n\n\tclass Animator {\n\t    constructor(){\n\t        this._request = null;\n\t        this._charts = new Map();\n\t        this._running = false;\n\t        this._lastDate = undefined;\n\t    }\n\t _notify(chart, anims, date, type) {\n\t        const callbacks = anims.listeners[type];\n\t        const numSteps = anims.duration;\n\t        callbacks.forEach((fn)=>fn({\n\t                chart,\n\t                initial: anims.initial,\n\t                numSteps,\n\t                currentStep: Math.min(date - anims.start, numSteps)\n\t            }));\n\t    }\n\t _refresh() {\n\t        if (this._request) {\n\t            return;\n\t        }\n\t        this._running = true;\n\t        this._request = helpers_segment.requestAnimFrame.call(window, ()=>{\n\t            this._update();\n\t            this._request = null;\n\t            if (this._running) {\n\t                this._refresh();\n\t            }\n\t        });\n\t    }\n\t _update(date = Date.now()) {\n\t        let remaining = 0;\n\t        this._charts.forEach((anims, chart)=>{\n\t            if (!anims.running || !anims.items.length) {\n\t                return;\n\t            }\n\t            const items = anims.items;\n\t            let i = items.length - 1;\n\t            let draw = false;\n\t            let item;\n\t            for(; i >= 0; --i){\n\t                item = items[i];\n\t                if (item._active) {\n\t                    if (item._total > anims.duration) {\n\t                        anims.duration = item._total;\n\t                    }\n\t                    item.tick(date);\n\t                    draw = true;\n\t                } else {\n\t                    items[i] = items[items.length - 1];\n\t                    items.pop();\n\t                }\n\t            }\n\t            if (draw) {\n\t                chart.draw();\n\t                this._notify(chart, anims, date, 'progress');\n\t            }\n\t            if (!items.length) {\n\t                anims.running = false;\n\t                this._notify(chart, anims, date, 'complete');\n\t                anims.initial = false;\n\t            }\n\t            remaining += items.length;\n\t        });\n\t        this._lastDate = date;\n\t        if (remaining === 0) {\n\t            this._running = false;\n\t        }\n\t    }\n\t _getAnims(chart) {\n\t        const charts = this._charts;\n\t        let anims = charts.get(chart);\n\t        if (!anims) {\n\t            anims = {\n\t                running: false,\n\t                initial: true,\n\t                items: [],\n\t                listeners: {\n\t                    complete: [],\n\t                    progress: []\n\t                }\n\t            };\n\t            charts.set(chart, anims);\n\t        }\n\t        return anims;\n\t    }\n\t listen(chart, event, cb) {\n\t        this._getAnims(chart).listeners[event].push(cb);\n\t    }\n\t add(chart, items) {\n\t        if (!items || !items.length) {\n\t            return;\n\t        }\n\t        this._getAnims(chart).items.push(...items);\n\t    }\n\t has(chart) {\n\t        return this._getAnims(chart).items.length > 0;\n\t    }\n\t start(chart) {\n\t        const anims = this._charts.get(chart);\n\t        if (!anims) {\n\t            return;\n\t        }\n\t        anims.running = true;\n\t        anims.start = Date.now();\n\t        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n\t        this._refresh();\n\t    }\n\t    running(chart) {\n\t        if (!this._running) {\n\t            return false;\n\t        }\n\t        const anims = this._charts.get(chart);\n\t        if (!anims || !anims.running || !anims.items.length) {\n\t            return false;\n\t        }\n\t        return true;\n\t    }\n\t stop(chart) {\n\t        const anims = this._charts.get(chart);\n\t        if (!anims || !anims.items.length) {\n\t            return;\n\t        }\n\t        const items = anims.items;\n\t        let i = items.length - 1;\n\t        for(; i >= 0; --i){\n\t            items[i].cancel();\n\t        }\n\t        anims.items = [];\n\t        this._notify(chart, anims, Date.now(), 'complete');\n\t    }\n\t remove(chart) {\n\t        return this._charts.delete(chart);\n\t    }\n\t}\n\tvar animator = /* #__PURE__ */ new Animator();\n\n\tconst transparent = 'transparent';\n\tconst interpolators = {\n\t    boolean (from, to, factor) {\n\t        return factor > 0.5 ? to : from;\n\t    },\n\t color (from, to, factor) {\n\t        const c0 = helpers_segment.color(from || transparent);\n\t        const c1 = c0.valid && helpers_segment.color(to || transparent);\n\t        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n\t    },\n\t    number (from, to, factor) {\n\t        return from + (to - from) * factor;\n\t    }\n\t};\n\tclass Animation {\n\t    constructor(cfg, target, prop, to){\n\t        const currentValue = target[prop];\n\t        to = helpers_segment.resolve([\n\t            cfg.to,\n\t            to,\n\t            currentValue,\n\t            cfg.from\n\t        ]);\n\t        const from = helpers_segment.resolve([\n\t            cfg.from,\n\t            currentValue,\n\t            to\n\t        ]);\n\t        this._active = true;\n\t        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n\t        this._easing = helpers_segment.effects[cfg.easing] || helpers_segment.effects.linear;\n\t        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n\t        this._duration = this._total = Math.floor(cfg.duration);\n\t        this._loop = !!cfg.loop;\n\t        this._target = target;\n\t        this._prop = prop;\n\t        this._from = from;\n\t        this._to = to;\n\t        this._promises = undefined;\n\t    }\n\t    active() {\n\t        return this._active;\n\t    }\n\t    update(cfg, to, date) {\n\t        if (this._active) {\n\t            this._notify(false);\n\t            const currentValue = this._target[this._prop];\n\t            const elapsed = date - this._start;\n\t            const remain = this._duration - elapsed;\n\t            this._start = date;\n\t            this._duration = Math.floor(Math.max(remain, cfg.duration));\n\t            this._total += elapsed;\n\t            this._loop = !!cfg.loop;\n\t            this._to = helpers_segment.resolve([\n\t                cfg.to,\n\t                to,\n\t                currentValue,\n\t                cfg.from\n\t            ]);\n\t            this._from = helpers_segment.resolve([\n\t                cfg.from,\n\t                currentValue,\n\t                to\n\t            ]);\n\t        }\n\t    }\n\t    cancel() {\n\t        if (this._active) {\n\t            this.tick(Date.now());\n\t            this._active = false;\n\t            this._notify(false);\n\t        }\n\t    }\n\t    tick(date) {\n\t        const elapsed = date - this._start;\n\t        const duration = this._duration;\n\t        const prop = this._prop;\n\t        const from = this._from;\n\t        const loop = this._loop;\n\t        const to = this._to;\n\t        let factor;\n\t        this._active = from !== to && (loop || elapsed < duration);\n\t        if (!this._active) {\n\t            this._target[prop] = to;\n\t            this._notify(true);\n\t            return;\n\t        }\n\t        if (elapsed < 0) {\n\t            this._target[prop] = from;\n\t            return;\n\t        }\n\t        factor = elapsed / duration % 2;\n\t        factor = loop && factor > 1 ? 2 - factor : factor;\n\t        factor = this._easing(Math.min(1, Math.max(0, factor)));\n\t        this._target[prop] = this._fn(from, to, factor);\n\t    }\n\t    wait() {\n\t        const promises = this._promises || (this._promises = []);\n\t        return new Promise((res, rej)=>{\n\t            promises.push({\n\t                res,\n\t                rej\n\t            });\n\t        });\n\t    }\n\t    _notify(resolved) {\n\t        const method = resolved ? 'res' : 'rej';\n\t        const promises = this._promises || [];\n\t        for(let i = 0; i < promises.length; i++){\n\t            promises[i][method]();\n\t        }\n\t    }\n\t}\n\n\tclass Animations {\n\t    constructor(chart, config){\n\t        this._chart = chart;\n\t        this._properties = new Map();\n\t        this.configure(config);\n\t    }\n\t    configure(config) {\n\t        if (!helpers_segment.isObject(config)) {\n\t            return;\n\t        }\n\t        const animationOptions = Object.keys(helpers_segment.defaults.animation);\n\t        const animatedProps = this._properties;\n\t        Object.getOwnPropertyNames(config).forEach((key)=>{\n\t            const cfg = config[key];\n\t            if (!helpers_segment.isObject(cfg)) {\n\t                return;\n\t            }\n\t            const resolved = {};\n\t            for (const option of animationOptions){\n\t                resolved[option] = cfg[option];\n\t            }\n\t            (helpers_segment.isArray(cfg.properties) && cfg.properties || [\n\t                key\n\t            ]).forEach((prop)=>{\n\t                if (prop === key || !animatedProps.has(prop)) {\n\t                    animatedProps.set(prop, resolved);\n\t                }\n\t            });\n\t        });\n\t    }\n\t _animateOptions(target, values) {\n\t        const newOptions = values.options;\n\t        const options = resolveTargetOptions(target, newOptions);\n\t        if (!options) {\n\t            return [];\n\t        }\n\t        const animations = this._createAnimations(options, newOptions);\n\t        if (newOptions.$shared) {\n\t            awaitAll(target.options.$animations, newOptions).then(()=>{\n\t                target.options = newOptions;\n\t            }, ()=>{\n\t            });\n\t        }\n\t        return animations;\n\t    }\n\t _createAnimations(target, values) {\n\t        const animatedProps = this._properties;\n\t        const animations = [];\n\t        const running = target.$animations || (target.$animations = {});\n\t        const props = Object.keys(values);\n\t        const date = Date.now();\n\t        let i;\n\t        for(i = props.length - 1; i >= 0; --i){\n\t            const prop = props[i];\n\t            if (prop.charAt(0) === '$') {\n\t                continue;\n\t            }\n\t            if (prop === 'options') {\n\t                animations.push(...this._animateOptions(target, values));\n\t                continue;\n\t            }\n\t            const value = values[prop];\n\t            let animation = running[prop];\n\t            const cfg = animatedProps.get(prop);\n\t            if (animation) {\n\t                if (cfg && animation.active()) {\n\t                    animation.update(cfg, value, date);\n\t                    continue;\n\t                } else {\n\t                    animation.cancel();\n\t                }\n\t            }\n\t            if (!cfg || !cfg.duration) {\n\t                target[prop] = value;\n\t                continue;\n\t            }\n\t            running[prop] = animation = new Animation(cfg, target, prop, value);\n\t            animations.push(animation);\n\t        }\n\t        return animations;\n\t    }\n\t update(target, values) {\n\t        if (this._properties.size === 0) {\n\t            Object.assign(target, values);\n\t            return;\n\t        }\n\t        const animations = this._createAnimations(target, values);\n\t        if (animations.length) {\n\t            animator.add(this._chart, animations);\n\t            return true;\n\t        }\n\t    }\n\t}\n\tfunction awaitAll(animations, properties) {\n\t    const running = [];\n\t    const keys = Object.keys(properties);\n\t    for(let i = 0; i < keys.length; i++){\n\t        const anim = animations[keys[i]];\n\t        if (anim && anim.active()) {\n\t            running.push(anim.wait());\n\t        }\n\t    }\n\t    return Promise.all(running);\n\t}\n\tfunction resolveTargetOptions(target, newOptions) {\n\t    if (!newOptions) {\n\t        return;\n\t    }\n\t    let options = target.options;\n\t    if (!options) {\n\t        target.options = newOptions;\n\t        return;\n\t    }\n\t    if (options.$shared) {\n\t        target.options = options = Object.assign({}, options, {\n\t            $shared: false,\n\t            $animations: {}\n\t        });\n\t    }\n\t    return options;\n\t}\n\n\tfunction scaleClip(scale, allowedOverflow) {\n\t    const opts = scale && scale.options || {};\n\t    const reverse = opts.reverse;\n\t    const min = opts.min === undefined ? allowedOverflow : 0;\n\t    const max = opts.max === undefined ? allowedOverflow : 0;\n\t    return {\n\t        start: reverse ? max : min,\n\t        end: reverse ? min : max\n\t    };\n\t}\n\tfunction defaultClip(xScale, yScale, allowedOverflow) {\n\t    if (allowedOverflow === false) {\n\t        return false;\n\t    }\n\t    const x = scaleClip(xScale, allowedOverflow);\n\t    const y = scaleClip(yScale, allowedOverflow);\n\t    return {\n\t        top: y.end,\n\t        right: x.end,\n\t        bottom: y.start,\n\t        left: x.start\n\t    };\n\t}\n\tfunction toClip(value) {\n\t    let t, r, b, l;\n\t    if (helpers_segment.isObject(value)) {\n\t        t = value.top;\n\t        r = value.right;\n\t        b = value.bottom;\n\t        l = value.left;\n\t    } else {\n\t        t = r = b = l = value;\n\t    }\n\t    return {\n\t        top: t,\n\t        right: r,\n\t        bottom: b,\n\t        left: l,\n\t        disabled: value === false\n\t    };\n\t}\n\tfunction getSortedDatasetIndices(chart, filterVisible) {\n\t    const keys = [];\n\t    const metasets = chart._getSortedDatasetMetas(filterVisible);\n\t    let i, ilen;\n\t    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n\t        keys.push(metasets[i].index);\n\t    }\n\t    return keys;\n\t}\n\tfunction applyStack(stack, value, dsIndex, options = {}) {\n\t    const keys = stack.keys;\n\t    const singleMode = options.mode === 'single';\n\t    let i, ilen, datasetIndex, otherValue;\n\t    if (value === null) {\n\t        return;\n\t    }\n\t    for(i = 0, ilen = keys.length; i < ilen; ++i){\n\t        datasetIndex = +keys[i];\n\t        if (datasetIndex === dsIndex) {\n\t            if (options.all) {\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t        otherValue = stack.values[datasetIndex];\n\t        if (helpers_segment.isNumberFinite(otherValue) && (singleMode || value === 0 || helpers_segment.sign(value) === helpers_segment.sign(otherValue))) {\n\t            value += otherValue;\n\t        }\n\t    }\n\t    return value;\n\t}\n\tfunction convertObjectDataToArray(data, meta) {\n\t    const { iScale , vScale  } = meta;\n\t    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n\t    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n\t    const keys = Object.keys(data);\n\t    const adata = new Array(keys.length);\n\t    let i, ilen, key;\n\t    for(i = 0, ilen = keys.length; i < ilen; ++i){\n\t        key = keys[i];\n\t        adata[i] = {\n\t            [iAxisKey]: key,\n\t            [vAxisKey]: data[key]\n\t        };\n\t    }\n\t    return adata;\n\t}\n\tfunction isStacked(scale, meta) {\n\t    const stacked = scale && scale.options.stacked;\n\t    return stacked || stacked === undefined && meta.stack !== undefined;\n\t}\n\tfunction getStackKey(indexScale, valueScale, meta) {\n\t    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n\t}\n\tfunction getUserBounds(scale) {\n\t    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n\t    return {\n\t        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n\t        max: maxDefined ? max : Number.POSITIVE_INFINITY\n\t    };\n\t}\n\tfunction getOrCreateStack(stacks, stackKey, indexValue) {\n\t    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n\t    return subStack[indexValue] || (subStack[indexValue] = {});\n\t}\n\tfunction getLastIndexInStack(stack, vScale, positive, type) {\n\t    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n\t        const value = stack[meta.index];\n\t        if (positive && value > 0 || !positive && value < 0) {\n\t            return meta.index;\n\t        }\n\t    }\n\t    return null;\n\t}\n\tfunction updateStacks(controller, parsed) {\n\t    const { chart , _cachedMeta: meta  } = controller;\n\t    const stacks = chart._stacks || (chart._stacks = {});\n\t    const { iScale , vScale , index: datasetIndex  } = meta;\n\t    const iAxis = iScale.axis;\n\t    const vAxis = vScale.axis;\n\t    const key = getStackKey(iScale, vScale, meta);\n\t    const ilen = parsed.length;\n\t    let stack;\n\t    for(let i = 0; i < ilen; ++i){\n\t        const item = parsed[i];\n\t        const { [iAxis]: index , [vAxis]: value  } = item;\n\t        const itemStacks = item._stacks || (item._stacks = {});\n\t        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n\t        stack[datasetIndex] = value;\n\t        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n\t        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\t        const visualValues = stack._visualValues || (stack._visualValues = {});\n\t        visualValues[datasetIndex] = value;\n\t    }\n\t}\n\tfunction getFirstScaleId(chart, axis) {\n\t    const scales = chart.scales;\n\t    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n\t}\n\tfunction createDatasetContext(parent, index) {\n\t    return helpers_segment.createContext(parent, {\n\t        active: false,\n\t        dataset: undefined,\n\t        datasetIndex: index,\n\t        index,\n\t        mode: 'default',\n\t        type: 'dataset'\n\t    });\n\t}\n\tfunction createDataContext(parent, index, element) {\n\t    return helpers_segment.createContext(parent, {\n\t        active: false,\n\t        dataIndex: index,\n\t        parsed: undefined,\n\t        raw: undefined,\n\t        element,\n\t        index,\n\t        mode: 'default',\n\t        type: 'data'\n\t    });\n\t}\n\tfunction clearStacks(meta, items) {\n\t    const datasetIndex = meta.controller.index;\n\t    const axis = meta.vScale && meta.vScale.axis;\n\t    if (!axis) {\n\t        return;\n\t    }\n\t    items = items || meta._parsed;\n\t    for (const parsed of items){\n\t        const stacks = parsed._stacks;\n\t        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n\t            return;\n\t        }\n\t        delete stacks[axis][datasetIndex];\n\t        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n\t            delete stacks[axis]._visualValues[datasetIndex];\n\t        }\n\t    }\n\t}\n\tconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\n\tconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\n\tconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n\t        keys: getSortedDatasetIndices(chart, true),\n\t        values: null\n\t    };\n\tclass DatasetController {\n\t static defaults = {};\n\t static datasetElementType = null;\n\t static dataElementType = null;\n\t constructor(chart, datasetIndex){\n\t        this.chart = chart;\n\t        this._ctx = chart.ctx;\n\t        this.index = datasetIndex;\n\t        this._cachedDataOpts = {};\n\t        this._cachedMeta = this.getMeta();\n\t        this._type = this._cachedMeta.type;\n\t        this.options = undefined;\n\t         this._parsing = false;\n\t        this._data = undefined;\n\t        this._objectData = undefined;\n\t        this._sharedOptions = undefined;\n\t        this._drawStart = undefined;\n\t        this._drawCount = undefined;\n\t        this.enableOptionSharing = false;\n\t        this.supportsDecimation = false;\n\t        this.$context = undefined;\n\t        this._syncList = [];\n\t        this.datasetElementType = new.target.datasetElementType;\n\t        this.dataElementType = new.target.dataElementType;\n\t        this.initialize();\n\t    }\n\t    initialize() {\n\t        const meta = this._cachedMeta;\n\t        this.configure();\n\t        this.linkScales();\n\t        meta._stacked = isStacked(meta.vScale, meta);\n\t        this.addElements();\n\t        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n\t            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n\t        }\n\t    }\n\t    updateIndex(datasetIndex) {\n\t        if (this.index !== datasetIndex) {\n\t            clearStacks(this._cachedMeta);\n\t        }\n\t        this.index = datasetIndex;\n\t    }\n\t    linkScales() {\n\t        const chart = this.chart;\n\t        const meta = this._cachedMeta;\n\t        const dataset = this.getDataset();\n\t        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n\t        const xid = meta.xAxisID = helpers_segment.valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n\t        const yid = meta.yAxisID = helpers_segment.valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n\t        const rid = meta.rAxisID = helpers_segment.valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n\t        const indexAxis = meta.indexAxis;\n\t        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n\t        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n\t        meta.xScale = this.getScaleForId(xid);\n\t        meta.yScale = this.getScaleForId(yid);\n\t        meta.rScale = this.getScaleForId(rid);\n\t        meta.iScale = this.getScaleForId(iid);\n\t        meta.vScale = this.getScaleForId(vid);\n\t    }\n\t    getDataset() {\n\t        return this.chart.data.datasets[this.index];\n\t    }\n\t    getMeta() {\n\t        return this.chart.getDatasetMeta(this.index);\n\t    }\n\t getScaleForId(scaleID) {\n\t        return this.chart.scales[scaleID];\n\t    }\n\t _getOtherScale(scale) {\n\t        const meta = this._cachedMeta;\n\t        return scale === meta.iScale ? meta.vScale : meta.iScale;\n\t    }\n\t    reset() {\n\t        this._update('reset');\n\t    }\n\t _destroy() {\n\t        const meta = this._cachedMeta;\n\t        if (this._data) {\n\t            helpers_segment.unlistenArrayEvents(this._data, this);\n\t        }\n\t        if (meta._stacked) {\n\t            clearStacks(meta);\n\t        }\n\t    }\n\t _dataCheck() {\n\t        const dataset = this.getDataset();\n\t        const data = dataset.data || (dataset.data = []);\n\t        const _data = this._data;\n\t        if (helpers_segment.isObject(data)) {\n\t            const meta = this._cachedMeta;\n\t            this._data = convertObjectDataToArray(data, meta);\n\t        } else if (_data !== data) {\n\t            if (_data) {\n\t                helpers_segment.unlistenArrayEvents(_data, this);\n\t                const meta = this._cachedMeta;\n\t                clearStacks(meta);\n\t                meta._parsed = [];\n\t            }\n\t            if (data && Object.isExtensible(data)) {\n\t                helpers_segment.listenArrayEvents(data, this);\n\t            }\n\t            this._syncList = [];\n\t            this._data = data;\n\t        }\n\t    }\n\t    addElements() {\n\t        const meta = this._cachedMeta;\n\t        this._dataCheck();\n\t        if (this.datasetElementType) {\n\t            meta.dataset = new this.datasetElementType();\n\t        }\n\t    }\n\t    buildOrUpdateElements(resetNewElements) {\n\t        const meta = this._cachedMeta;\n\t        const dataset = this.getDataset();\n\t        let stackChanged = false;\n\t        this._dataCheck();\n\t        const oldStacked = meta._stacked;\n\t        meta._stacked = isStacked(meta.vScale, meta);\n\t        if (meta.stack !== dataset.stack) {\n\t            stackChanged = true;\n\t            clearStacks(meta);\n\t            meta.stack = dataset.stack;\n\t        }\n\t        this._resyncElements(resetNewElements);\n\t        if (stackChanged || oldStacked !== meta._stacked) {\n\t            updateStacks(this, meta._parsed);\n\t        }\n\t    }\n\t configure() {\n\t        const config = this.chart.config;\n\t        const scopeKeys = config.datasetScopeKeys(this._type);\n\t        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n\t        this.options = config.createResolver(scopes, this.getContext());\n\t        this._parsing = this.options.parsing;\n\t        this._cachedDataOpts = {};\n\t    }\n\t parse(start, count) {\n\t        const { _cachedMeta: meta , _data: data  } = this;\n\t        const { iScale , _stacked  } = meta;\n\t        const iAxis = iScale.axis;\n\t        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n\t        let prev = start > 0 && meta._parsed[start - 1];\n\t        let i, cur, parsed;\n\t        if (this._parsing === false) {\n\t            meta._parsed = data;\n\t            meta._sorted = true;\n\t            parsed = data;\n\t        } else {\n\t            if (helpers_segment.isArray(data[start])) {\n\t                parsed = this.parseArrayData(meta, data, start, count);\n\t            } else if (helpers_segment.isObject(data[start])) {\n\t                parsed = this.parseObjectData(meta, data, start, count);\n\t            } else {\n\t                parsed = this.parsePrimitiveData(meta, data, start, count);\n\t            }\n\t            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\t            for(i = 0; i < count; ++i){\n\t                meta._parsed[i + start] = cur = parsed[i];\n\t                if (sorted) {\n\t                    if (isNotInOrderComparedToPrev()) {\n\t                        sorted = false;\n\t                    }\n\t                    prev = cur;\n\t                }\n\t            }\n\t            meta._sorted = sorted;\n\t        }\n\t        if (_stacked) {\n\t            updateStacks(this, parsed);\n\t        }\n\t    }\n\t parsePrimitiveData(meta, data, start, count) {\n\t        const { iScale , vScale  } = meta;\n\t        const iAxis = iScale.axis;\n\t        const vAxis = vScale.axis;\n\t        const labels = iScale.getLabels();\n\t        const singleScale = iScale === vScale;\n\t        const parsed = new Array(count);\n\t        let i, ilen, index;\n\t        for(i = 0, ilen = count; i < ilen; ++i){\n\t            index = i + start;\n\t            parsed[i] = {\n\t                [iAxis]: singleScale || iScale.parse(labels[index], index),\n\t                [vAxis]: vScale.parse(data[index], index)\n\t            };\n\t        }\n\t        return parsed;\n\t    }\n\t parseArrayData(meta, data, start, count) {\n\t        const { xScale , yScale  } = meta;\n\t        const parsed = new Array(count);\n\t        let i, ilen, index, item;\n\t        for(i = 0, ilen = count; i < ilen; ++i){\n\t            index = i + start;\n\t            item = data[index];\n\t            parsed[i] = {\n\t                x: xScale.parse(item[0], index),\n\t                y: yScale.parse(item[1], index)\n\t            };\n\t        }\n\t        return parsed;\n\t    }\n\t parseObjectData(meta, data, start, count) {\n\t        const { xScale , yScale  } = meta;\n\t        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n\t        const parsed = new Array(count);\n\t        let i, ilen, index, item;\n\t        for(i = 0, ilen = count; i < ilen; ++i){\n\t            index = i + start;\n\t            item = data[index];\n\t            parsed[i] = {\n\t                x: xScale.parse(helpers_segment.resolveObjectKey(item, xAxisKey), index),\n\t                y: yScale.parse(helpers_segment.resolveObjectKey(item, yAxisKey), index)\n\t            };\n\t        }\n\t        return parsed;\n\t    }\n\t getParsed(index) {\n\t        return this._cachedMeta._parsed[index];\n\t    }\n\t getDataElement(index) {\n\t        return this._cachedMeta.data[index];\n\t    }\n\t applyStack(scale, parsed, mode) {\n\t        const chart = this.chart;\n\t        const meta = this._cachedMeta;\n\t        const value = parsed[scale.axis];\n\t        const stack = {\n\t            keys: getSortedDatasetIndices(chart, true),\n\t            values: parsed._stacks[scale.axis]._visualValues\n\t        };\n\t        return applyStack(stack, value, meta.index, {\n\t            mode\n\t        });\n\t    }\n\t updateRangeFromParsed(range, scale, parsed, stack) {\n\t        const parsedValue = parsed[scale.axis];\n\t        let value = parsedValue === null ? NaN : parsedValue;\n\t        const values = stack && parsed._stacks[scale.axis];\n\t        if (stack && values) {\n\t            stack.values = values;\n\t            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n\t        }\n\t        range.min = Math.min(range.min, value);\n\t        range.max = Math.max(range.max, value);\n\t    }\n\t getMinMax(scale, canStack) {\n\t        const meta = this._cachedMeta;\n\t        const _parsed = meta._parsed;\n\t        const sorted = meta._sorted && scale === meta.iScale;\n\t        const ilen = _parsed.length;\n\t        const otherScale = this._getOtherScale(scale);\n\t        const stack = createStack(canStack, meta, this.chart);\n\t        const range = {\n\t            min: Number.POSITIVE_INFINITY,\n\t            max: Number.NEGATIVE_INFINITY\n\t        };\n\t        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n\t        let i, parsed;\n\t        function _skip() {\n\t            parsed = _parsed[i];\n\t            const otherValue = parsed[otherScale.axis];\n\t            return !helpers_segment.isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n\t        }\n\t        for(i = 0; i < ilen; ++i){\n\t            if (_skip()) {\n\t                continue;\n\t            }\n\t            this.updateRangeFromParsed(range, scale, parsed, stack);\n\t            if (sorted) {\n\t                break;\n\t            }\n\t        }\n\t        if (sorted) {\n\t            for(i = ilen - 1; i >= 0; --i){\n\t                if (_skip()) {\n\t                    continue;\n\t                }\n\t                this.updateRangeFromParsed(range, scale, parsed, stack);\n\t                break;\n\t            }\n\t        }\n\t        return range;\n\t    }\n\t    getAllParsedValues(scale) {\n\t        const parsed = this._cachedMeta._parsed;\n\t        const values = [];\n\t        let i, ilen, value;\n\t        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n\t            value = parsed[i][scale.axis];\n\t            if (helpers_segment.isNumberFinite(value)) {\n\t                values.push(value);\n\t            }\n\t        }\n\t        return values;\n\t    }\n\t getMaxOverflow() {\n\t        return false;\n\t    }\n\t getLabelAndValue(index) {\n\t        const meta = this._cachedMeta;\n\t        const iScale = meta.iScale;\n\t        const vScale = meta.vScale;\n\t        const parsed = this.getParsed(index);\n\t        return {\n\t            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n\t            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n\t        };\n\t    }\n\t _update(mode) {\n\t        const meta = this._cachedMeta;\n\t        this.update(mode || 'default');\n\t        meta._clip = toClip(helpers_segment.valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n\t    }\n\t update(mode) {}\n\t    draw() {\n\t        const ctx = this._ctx;\n\t        const chart = this.chart;\n\t        const meta = this._cachedMeta;\n\t        const elements = meta.data || [];\n\t        const area = chart.chartArea;\n\t        const active = [];\n\t        const start = this._drawStart || 0;\n\t        const count = this._drawCount || elements.length - start;\n\t        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n\t        let i;\n\t        if (meta.dataset) {\n\t            meta.dataset.draw(ctx, area, start, count);\n\t        }\n\t        for(i = start; i < start + count; ++i){\n\t            const element = elements[i];\n\t            if (element.hidden) {\n\t                continue;\n\t            }\n\t            if (element.active && drawActiveElementsOnTop) {\n\t                active.push(element);\n\t            } else {\n\t                element.draw(ctx, area);\n\t            }\n\t        }\n\t        for(i = 0; i < active.length; ++i){\n\t            active[i].draw(ctx, area);\n\t        }\n\t    }\n\t getStyle(index, active) {\n\t        const mode = active ? 'active' : 'default';\n\t        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n\t    }\n\t getContext(index, active, mode) {\n\t        const dataset = this.getDataset();\n\t        let context;\n\t        if (index >= 0 && index < this._cachedMeta.data.length) {\n\t            const element = this._cachedMeta.data[index];\n\t            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n\t            context.parsed = this.getParsed(index);\n\t            context.raw = dataset.data[index];\n\t            context.index = context.dataIndex = index;\n\t        } else {\n\t            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n\t            context.dataset = dataset;\n\t            context.index = context.datasetIndex = this.index;\n\t        }\n\t        context.active = !!active;\n\t        context.mode = mode;\n\t        return context;\n\t    }\n\t resolveDatasetElementOptions(mode) {\n\t        return this._resolveElementOptions(this.datasetElementType.id, mode);\n\t    }\n\t resolveDataElementOptions(index, mode) {\n\t        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n\t    }\n\t _resolveElementOptions(elementType, mode = 'default', index) {\n\t        const active = mode === 'active';\n\t        const cache = this._cachedDataOpts;\n\t        const cacheKey = elementType + '-' + mode;\n\t        const cached = cache[cacheKey];\n\t        const sharing = this.enableOptionSharing && helpers_segment.defined(index);\n\t        if (cached) {\n\t            return cloneIfNotShared(cached, sharing);\n\t        }\n\t        const config = this.chart.config;\n\t        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n\t        const prefixes = active ? [\n\t            `${elementType}Hover`,\n\t            'hover',\n\t            elementType,\n\t            ''\n\t        ] : [\n\t            elementType,\n\t            ''\n\t        ];\n\t        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n\t        const names = Object.keys(helpers_segment.defaults.elements[elementType]);\n\t        const context = ()=>this.getContext(index, active, mode);\n\t        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\t        if (values.$shared) {\n\t            values.$shared = sharing;\n\t            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n\t        }\n\t        return values;\n\t    }\n\t _resolveAnimations(index, transition, active) {\n\t        const chart = this.chart;\n\t        const cache = this._cachedDataOpts;\n\t        const cacheKey = `animation-${transition}`;\n\t        const cached = cache[cacheKey];\n\t        if (cached) {\n\t            return cached;\n\t        }\n\t        let options;\n\t        if (chart.options.animation !== false) {\n\t            const config = this.chart.config;\n\t            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n\t            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n\t            options = config.createResolver(scopes, this.getContext(index, active, transition));\n\t        }\n\t        const animations = new Animations(chart, options && options.animations);\n\t        if (options && options._cacheable) {\n\t            cache[cacheKey] = Object.freeze(animations);\n\t        }\n\t        return animations;\n\t    }\n\t getSharedOptions(options) {\n\t        if (!options.$shared) {\n\t            return;\n\t        }\n\t        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n\t    }\n\t includeOptions(mode, sharedOptions) {\n\t        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n\t    }\n\t _getSharedOptions(start, mode) {\n\t        const firstOpts = this.resolveDataElementOptions(start, mode);\n\t        const previouslySharedOptions = this._sharedOptions;\n\t        const sharedOptions = this.getSharedOptions(firstOpts);\n\t        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n\t        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n\t        return {\n\t            sharedOptions,\n\t            includeOptions\n\t        };\n\t    }\n\t updateElement(element, index, properties, mode) {\n\t        if (isDirectUpdateMode(mode)) {\n\t            Object.assign(element, properties);\n\t        } else {\n\t            this._resolveAnimations(index, mode).update(element, properties);\n\t        }\n\t    }\n\t updateSharedOptions(sharedOptions, mode, newOptions) {\n\t        if (sharedOptions && !isDirectUpdateMode(mode)) {\n\t            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n\t        }\n\t    }\n\t _setStyle(element, index, mode, active) {\n\t        element.active = active;\n\t        const options = this.getStyle(index, active);\n\t        this._resolveAnimations(index, mode, active).update(element, {\n\t            options: !active && this.getSharedOptions(options) || options\n\t        });\n\t    }\n\t    removeHoverStyle(element, datasetIndex, index) {\n\t        this._setStyle(element, index, 'active', false);\n\t    }\n\t    setHoverStyle(element, datasetIndex, index) {\n\t        this._setStyle(element, index, 'active', true);\n\t    }\n\t _removeDatasetHoverStyle() {\n\t        const element = this._cachedMeta.dataset;\n\t        if (element) {\n\t            this._setStyle(element, undefined, 'active', false);\n\t        }\n\t    }\n\t _setDatasetHoverStyle() {\n\t        const element = this._cachedMeta.dataset;\n\t        if (element) {\n\t            this._setStyle(element, undefined, 'active', true);\n\t        }\n\t    }\n\t _resyncElements(resetNewElements) {\n\t        const data = this._data;\n\t        const elements = this._cachedMeta.data;\n\t        for (const [method, arg1, arg2] of this._syncList){\n\t            this[method](arg1, arg2);\n\t        }\n\t        this._syncList = [];\n\t        const numMeta = elements.length;\n\t        const numData = data.length;\n\t        const count = Math.min(numData, numMeta);\n\t        if (count) {\n\t            this.parse(0, count);\n\t        }\n\t        if (numData > numMeta) {\n\t            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n\t        } else if (numData < numMeta) {\n\t            this._removeElements(numData, numMeta - numData);\n\t        }\n\t    }\n\t _insertElements(start, count, resetNewElements = true) {\n\t        const meta = this._cachedMeta;\n\t        const data = meta.data;\n\t        const end = start + count;\n\t        let i;\n\t        const move = (arr)=>{\n\t            arr.length += count;\n\t            for(i = arr.length - 1; i >= end; i--){\n\t                arr[i] = arr[i - count];\n\t            }\n\t        };\n\t        move(data);\n\t        for(i = start; i < end; ++i){\n\t            data[i] = new this.dataElementType();\n\t        }\n\t        if (this._parsing) {\n\t            move(meta._parsed);\n\t        }\n\t        this.parse(start, count);\n\t        if (resetNewElements) {\n\t            this.updateElements(data, start, count, 'reset');\n\t        }\n\t    }\n\t    updateElements(element, start, count, mode) {}\n\t _removeElements(start, count) {\n\t        const meta = this._cachedMeta;\n\t        if (this._parsing) {\n\t            const removed = meta._parsed.splice(start, count);\n\t            if (meta._stacked) {\n\t                clearStacks(meta, removed);\n\t            }\n\t        }\n\t        meta.data.splice(start, count);\n\t    }\n\t _sync(args) {\n\t        if (this._parsing) {\n\t            this._syncList.push(args);\n\t        } else {\n\t            const [method, arg1, arg2] = args;\n\t            this[method](arg1, arg2);\n\t        }\n\t        this.chart._dataChanges.push([\n\t            this.index,\n\t            ...args\n\t        ]);\n\t    }\n\t    _onDataPush() {\n\t        const count = arguments.length;\n\t        this._sync([\n\t            '_insertElements',\n\t            this.getDataset().data.length - count,\n\t            count\n\t        ]);\n\t    }\n\t    _onDataPop() {\n\t        this._sync([\n\t            '_removeElements',\n\t            this._cachedMeta.data.length - 1,\n\t            1\n\t        ]);\n\t    }\n\t    _onDataShift() {\n\t        this._sync([\n\t            '_removeElements',\n\t            0,\n\t            1\n\t        ]);\n\t    }\n\t    _onDataSplice(start, count) {\n\t        if (count) {\n\t            this._sync([\n\t                '_removeElements',\n\t                start,\n\t                count\n\t            ]);\n\t        }\n\t        const newCount = arguments.length - 2;\n\t        if (newCount) {\n\t            this._sync([\n\t                '_insertElements',\n\t                start,\n\t                newCount\n\t            ]);\n\t        }\n\t    }\n\t    _onDataUnshift() {\n\t        this._sync([\n\t            '_insertElements',\n\t            0,\n\t            arguments.length\n\t        ]);\n\t    }\n\t}\n\n\tfunction getAllScaleValues(scale, type) {\n\t    if (!scale._cache.$bar) {\n\t        const visibleMetas = scale.getMatchingVisibleMetas(type);\n\t        let values = [];\n\t        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n\t            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n\t        }\n\t        scale._cache.$bar = helpers_segment._arrayUnique(values.sort((a, b)=>a - b));\n\t    }\n\t    return scale._cache.$bar;\n\t}\n\t function computeMinSampleSize(meta) {\n\t    const scale = meta.iScale;\n\t    const values = getAllScaleValues(scale, meta.type);\n\t    let min = scale._length;\n\t    let i, ilen, curr, prev;\n\t    const updateMinAndPrev = ()=>{\n\t        if (curr === 32767 || curr === -32768) {\n\t            return;\n\t        }\n\t        if (helpers_segment.defined(prev)) {\n\t            min = Math.min(min, Math.abs(curr - prev) || min);\n\t        }\n\t        prev = curr;\n\t    };\n\t    for(i = 0, ilen = values.length; i < ilen; ++i){\n\t        curr = scale.getPixelForValue(values[i]);\n\t        updateMinAndPrev();\n\t    }\n\t    prev = undefined;\n\t    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n\t        curr = scale.getPixelForTick(i);\n\t        updateMinAndPrev();\n\t    }\n\t    return min;\n\t}\n\t function computeFitCategoryTraits(index, ruler, options, stackCount) {\n\t    const thickness = options.barThickness;\n\t    let size, ratio;\n\t    if (helpers_segment.isNullOrUndef(thickness)) {\n\t        size = ruler.min * options.categoryPercentage;\n\t        ratio = options.barPercentage;\n\t    } else {\n\t        size = thickness * stackCount;\n\t        ratio = 1;\n\t    }\n\t    return {\n\t        chunk: size / stackCount,\n\t        ratio,\n\t        start: ruler.pixels[index] - size / 2\n\t    };\n\t}\n\t function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n\t    const pixels = ruler.pixels;\n\t    const curr = pixels[index];\n\t    let prev = index > 0 ? pixels[index - 1] : null;\n\t    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n\t    const percent = options.categoryPercentage;\n\t    if (prev === null) {\n\t        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n\t    }\n\t    if (next === null) {\n\t        next = curr + curr - prev;\n\t    }\n\t    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n\t    const size = Math.abs(next - prev) / 2 * percent;\n\t    return {\n\t        chunk: size / stackCount,\n\t        ratio: options.barPercentage,\n\t        start\n\t    };\n\t}\n\tfunction parseFloatBar(entry, item, vScale, i) {\n\t    const startValue = vScale.parse(entry[0], i);\n\t    const endValue = vScale.parse(entry[1], i);\n\t    const min = Math.min(startValue, endValue);\n\t    const max = Math.max(startValue, endValue);\n\t    let barStart = min;\n\t    let barEnd = max;\n\t    if (Math.abs(min) > Math.abs(max)) {\n\t        barStart = max;\n\t        barEnd = min;\n\t    }\n\t    item[vScale.axis] = barEnd;\n\t    item._custom = {\n\t        barStart,\n\t        barEnd,\n\t        start: startValue,\n\t        end: endValue,\n\t        min,\n\t        max\n\t    };\n\t}\n\tfunction parseValue(entry, item, vScale, i) {\n\t    if (helpers_segment.isArray(entry)) {\n\t        parseFloatBar(entry, item, vScale, i);\n\t    } else {\n\t        item[vScale.axis] = vScale.parse(entry, i);\n\t    }\n\t    return item;\n\t}\n\tfunction parseArrayOrPrimitive(meta, data, start, count) {\n\t    const iScale = meta.iScale;\n\t    const vScale = meta.vScale;\n\t    const labels = iScale.getLabels();\n\t    const singleScale = iScale === vScale;\n\t    const parsed = [];\n\t    let i, ilen, item, entry;\n\t    for(i = start, ilen = start + count; i < ilen; ++i){\n\t        entry = data[i];\n\t        item = {};\n\t        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n\t        parsed.push(parseValue(entry, item, vScale, i));\n\t    }\n\t    return parsed;\n\t}\n\tfunction isFloatBar(custom) {\n\t    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n\t}\n\tfunction barSign(size, vScale, actualBase) {\n\t    if (size !== 0) {\n\t        return helpers_segment.sign(size);\n\t    }\n\t    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n\t}\n\tfunction borderProps(properties) {\n\t    let reverse, start, end, top, bottom;\n\t    if (properties.horizontal) {\n\t        reverse = properties.base > properties.x;\n\t        start = 'left';\n\t        end = 'right';\n\t    } else {\n\t        reverse = properties.base < properties.y;\n\t        start = 'bottom';\n\t        end = 'top';\n\t    }\n\t    if (reverse) {\n\t        top = 'end';\n\t        bottom = 'start';\n\t    } else {\n\t        top = 'start';\n\t        bottom = 'end';\n\t    }\n\t    return {\n\t        start,\n\t        end,\n\t        reverse,\n\t        top,\n\t        bottom\n\t    };\n\t}\n\tfunction setBorderSkipped(properties, options, stack, index) {\n\t    let edge = options.borderSkipped;\n\t    const res = {};\n\t    if (!edge) {\n\t        properties.borderSkipped = res;\n\t        return;\n\t    }\n\t    if (edge === true) {\n\t        properties.borderSkipped = {\n\t            top: true,\n\t            right: true,\n\t            bottom: true,\n\t            left: true\n\t        };\n\t        return;\n\t    }\n\t    const { start , end , reverse , top , bottom  } = borderProps(properties);\n\t    if (edge === 'middle' && stack) {\n\t        properties.enableBorderRadius = true;\n\t        if ((stack._top || 0) === index) {\n\t            edge = top;\n\t        } else if ((stack._bottom || 0) === index) {\n\t            edge = bottom;\n\t        } else {\n\t            res[parseEdge(bottom, start, end, reverse)] = true;\n\t            edge = top;\n\t        }\n\t    }\n\t    res[parseEdge(edge, start, end, reverse)] = true;\n\t    properties.borderSkipped = res;\n\t}\n\tfunction parseEdge(edge, a, b, reverse) {\n\t    if (reverse) {\n\t        edge = swap(edge, a, b);\n\t        edge = startEnd(edge, b, a);\n\t    } else {\n\t        edge = startEnd(edge, a, b);\n\t    }\n\t    return edge;\n\t}\n\tfunction swap(orig, v1, v2) {\n\t    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n\t}\n\tfunction startEnd(v, start, end) {\n\t    return v === 'start' ? start : v === 'end' ? end : v;\n\t}\n\tfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n\t    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n\t}\n\tclass BarController extends DatasetController {\n\t    static id = 'bar';\n\t static defaults = {\n\t        datasetElementType: false,\n\t        dataElementType: 'bar',\n\t        categoryPercentage: 0.8,\n\t        barPercentage: 0.9,\n\t        grouped: true,\n\t        animations: {\n\t            numbers: {\n\t                type: 'number',\n\t                properties: [\n\t                    'x',\n\t                    'y',\n\t                    'base',\n\t                    'width',\n\t                    'height'\n\t                ]\n\t            }\n\t        }\n\t    };\n\t static overrides = {\n\t        scales: {\n\t            _index_: {\n\t                type: 'category',\n\t                offset: true,\n\t                grid: {\n\t                    offset: true\n\t                }\n\t            },\n\t            _value_: {\n\t                type: 'linear',\n\t                beginAtZero: true\n\t            }\n\t        }\n\t    };\n\t parsePrimitiveData(meta, data, start, count) {\n\t        return parseArrayOrPrimitive(meta, data, start, count);\n\t    }\n\t parseArrayData(meta, data, start, count) {\n\t        return parseArrayOrPrimitive(meta, data, start, count);\n\t    }\n\t parseObjectData(meta, data, start, count) {\n\t        const { iScale , vScale  } = meta;\n\t        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n\t        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n\t        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n\t        const parsed = [];\n\t        let i, ilen, item, obj;\n\t        for(i = start, ilen = start + count; i < ilen; ++i){\n\t            obj = data[i];\n\t            item = {};\n\t            item[iScale.axis] = iScale.parse(helpers_segment.resolveObjectKey(obj, iAxisKey), i);\n\t            parsed.push(parseValue(helpers_segment.resolveObjectKey(obj, vAxisKey), item, vScale, i));\n\t        }\n\t        return parsed;\n\t    }\n\t updateRangeFromParsed(range, scale, parsed, stack) {\n\t        super.updateRangeFromParsed(range, scale, parsed, stack);\n\t        const custom = parsed._custom;\n\t        if (custom && scale === this._cachedMeta.vScale) {\n\t            range.min = Math.min(range.min, custom.min);\n\t            range.max = Math.max(range.max, custom.max);\n\t        }\n\t    }\n\t getMaxOverflow() {\n\t        return 0;\n\t    }\n\t getLabelAndValue(index) {\n\t        const meta = this._cachedMeta;\n\t        const { iScale , vScale  } = meta;\n\t        const parsed = this.getParsed(index);\n\t        const custom = parsed._custom;\n\t        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\t        return {\n\t            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n\t            value\n\t        };\n\t    }\n\t    initialize() {\n\t        this.enableOptionSharing = true;\n\t        super.initialize();\n\t        const meta = this._cachedMeta;\n\t        meta.stack = this.getDataset().stack;\n\t    }\n\t    update(mode) {\n\t        const meta = this._cachedMeta;\n\t        this.updateElements(meta.data, 0, meta.data.length, mode);\n\t    }\n\t    updateElements(bars, start, count, mode) {\n\t        const reset = mode === 'reset';\n\t        const { index , _cachedMeta: { vScale  }  } = this;\n\t        const base = vScale.getBasePixel();\n\t        const horizontal = vScale.isHorizontal();\n\t        const ruler = this._getRuler();\n\t        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n\t        for(let i = start; i < start + count; i++){\n\t            const parsed = this.getParsed(i);\n\t            const vpixels = reset || helpers_segment.isNullOrUndef(parsed[vScale.axis]) ? {\n\t                base,\n\t                head: base\n\t            } : this._calculateBarValuePixels(i);\n\t            const ipixels = this._calculateBarIndexPixels(i, ruler);\n\t            const stack = (parsed._stacks || {})[vScale.axis];\n\t            const properties = {\n\t                horizontal,\n\t                base: vpixels.base,\n\t                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n\t                x: horizontal ? vpixels.head : ipixels.center,\n\t                y: horizontal ? ipixels.center : vpixels.head,\n\t                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n\t                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n\t            };\n\t            if (includeOptions) {\n\t                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n\t            }\n\t            const options = properties.options || bars[i].options;\n\t            setBorderSkipped(properties, options, stack, index);\n\t            setInflateAmount(properties, options, ruler.ratio);\n\t            this.updateElement(bars[i], i, properties, mode);\n\t        }\n\t    }\n\t _getStacks(last, dataIndex) {\n\t        const { iScale  } = this._cachedMeta;\n\t        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n\t        const stacked = iScale.options.stacked;\n\t        const stacks = [];\n\t        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n\t        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\t        const skipNull = (meta)=>{\n\t            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n\t            const val = parsed && parsed[meta.vScale.axis];\n\t            if (helpers_segment.isNullOrUndef(val) || isNaN(val)) {\n\t                return true;\n\t            }\n\t        };\n\t        for (const meta of metasets){\n\t            if (dataIndex !== undefined && skipNull(meta)) {\n\t                continue;\n\t            }\n\t            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n\t                stacks.push(meta.stack);\n\t            }\n\t            if (meta.index === last) {\n\t                break;\n\t            }\n\t        }\n\t        if (!stacks.length) {\n\t            stacks.push(undefined);\n\t        }\n\t        return stacks;\n\t    }\n\t _getStackCount(index) {\n\t        return this._getStacks(undefined, index).length;\n\t    }\n\t _getStackIndex(datasetIndex, name, dataIndex) {\n\t        const stacks = this._getStacks(datasetIndex, dataIndex);\n\t        const index = name !== undefined ? stacks.indexOf(name) : -1;\n\t        return index === -1 ? stacks.length - 1 : index;\n\t    }\n\t _getRuler() {\n\t        const opts = this.options;\n\t        const meta = this._cachedMeta;\n\t        const iScale = meta.iScale;\n\t        const pixels = [];\n\t        let i, ilen;\n\t        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n\t            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n\t        }\n\t        const barThickness = opts.barThickness;\n\t        const min = barThickness || computeMinSampleSize(meta);\n\t        return {\n\t            min,\n\t            pixels,\n\t            start: iScale._startPixel,\n\t            end: iScale._endPixel,\n\t            stackCount: this._getStackCount(),\n\t            scale: iScale,\n\t            grouped: opts.grouped,\n\t            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n\t        };\n\t    }\n\t _calculateBarValuePixels(index) {\n\t        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n\t        const actualBase = baseValue || 0;\n\t        const parsed = this.getParsed(index);\n\t        const custom = parsed._custom;\n\t        const floating = isFloatBar(custom);\n\t        let value = parsed[vScale.axis];\n\t        let start = 0;\n\t        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n\t        let head, size;\n\t        if (length !== value) {\n\t            start = length - value;\n\t            length = value;\n\t        }\n\t        if (floating) {\n\t            value = custom.barStart;\n\t            length = custom.barEnd - custom.barStart;\n\t            if (value !== 0 && helpers_segment.sign(value) !== helpers_segment.sign(custom.barEnd)) {\n\t                start = 0;\n\t            }\n\t            start += value;\n\t        }\n\t        const startValue = !helpers_segment.isNullOrUndef(baseValue) && !floating ? baseValue : start;\n\t        let base = vScale.getPixelForValue(startValue);\n\t        if (this.chart.getDataVisibility(index)) {\n\t            head = vScale.getPixelForValue(start + length);\n\t        } else {\n\t            head = base;\n\t        }\n\t        size = head - base;\n\t        if (Math.abs(size) < minBarLength) {\n\t            size = barSign(size, vScale, actualBase) * minBarLength;\n\t            if (value === actualBase) {\n\t                base -= size / 2;\n\t            }\n\t            const startPixel = vScale.getPixelForDecimal(0);\n\t            const endPixel = vScale.getPixelForDecimal(1);\n\t            const min = Math.min(startPixel, endPixel);\n\t            const max = Math.max(startPixel, endPixel);\n\t            base = Math.max(Math.min(base, max), min);\n\t            head = base + size;\n\t            if (_stacked && !floating) {\n\t                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n\t            }\n\t        }\n\t        if (base === vScale.getPixelForValue(actualBase)) {\n\t            const halfGrid = helpers_segment.sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n\t            base += halfGrid;\n\t            size -= halfGrid;\n\t        }\n\t        return {\n\t            size,\n\t            base,\n\t            head,\n\t            center: head + size / 2\n\t        };\n\t    }\n\t _calculateBarIndexPixels(index, ruler) {\n\t        const scale = ruler.scale;\n\t        const options = this.options;\n\t        const skipNull = options.skipNull;\n\t        const maxBarThickness = helpers_segment.valueOrDefault(options.maxBarThickness, Infinity);\n\t        let center, size;\n\t        if (ruler.grouped) {\n\t            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n\t            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\t            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\t            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n\t            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n\t        } else {\n\t            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n\t            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n\t        }\n\t        return {\n\t            base: center - size / 2,\n\t            head: center + size / 2,\n\t            center,\n\t            size\n\t        };\n\t    }\n\t    draw() {\n\t        const meta = this._cachedMeta;\n\t        const vScale = meta.vScale;\n\t        const rects = meta.data;\n\t        const ilen = rects.length;\n\t        let i = 0;\n\t        for(; i < ilen; ++i){\n\t            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n\t                rects[i].draw(this._ctx);\n\t            }\n\t        }\n\t    }\n\t}\n\n\tclass BubbleController extends DatasetController {\n\t    static id = 'bubble';\n\t static defaults = {\n\t        datasetElementType: false,\n\t        dataElementType: 'point',\n\t        animations: {\n\t            numbers: {\n\t                type: 'number',\n\t                properties: [\n\t                    'x',\n\t                    'y',\n\t                    'borderWidth',\n\t                    'radius'\n\t                ]\n\t            }\n\t        }\n\t    };\n\t static overrides = {\n\t        scales: {\n\t            x: {\n\t                type: 'linear'\n\t            },\n\t            y: {\n\t                type: 'linear'\n\t            }\n\t        }\n\t    };\n\t    initialize() {\n\t        this.enableOptionSharing = true;\n\t        super.initialize();\n\t    }\n\t parsePrimitiveData(meta, data, start, count) {\n\t        const parsed = super.parsePrimitiveData(meta, data, start, count);\n\t        for(let i = 0; i < parsed.length; i++){\n\t            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n\t        }\n\t        return parsed;\n\t    }\n\t parseArrayData(meta, data, start, count) {\n\t        const parsed = super.parseArrayData(meta, data, start, count);\n\t        for(let i = 0; i < parsed.length; i++){\n\t            const item = data[start + i];\n\t            parsed[i]._custom = helpers_segment.valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n\t        }\n\t        return parsed;\n\t    }\n\t parseObjectData(meta, data, start, count) {\n\t        const parsed = super.parseObjectData(meta, data, start, count);\n\t        for(let i = 0; i < parsed.length; i++){\n\t            const item = data[start + i];\n\t            parsed[i]._custom = helpers_segment.valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n\t        }\n\t        return parsed;\n\t    }\n\t getMaxOverflow() {\n\t        const data = this._cachedMeta.data;\n\t        let max = 0;\n\t        for(let i = data.length - 1; i >= 0; --i){\n\t            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n\t        }\n\t        return max > 0 && max;\n\t    }\n\t getLabelAndValue(index) {\n\t        const meta = this._cachedMeta;\n\t        const labels = this.chart.data.labels || [];\n\t        const { xScale , yScale  } = meta;\n\t        const parsed = this.getParsed(index);\n\t        const x = xScale.getLabelForValue(parsed.x);\n\t        const y = yScale.getLabelForValue(parsed.y);\n\t        const r = parsed._custom;\n\t        return {\n\t            label: labels[index] || '',\n\t            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n\t        };\n\t    }\n\t    update(mode) {\n\t        const points = this._cachedMeta.data;\n\t        this.updateElements(points, 0, points.length, mode);\n\t    }\n\t    updateElements(points, start, count, mode) {\n\t        const reset = mode === 'reset';\n\t        const { iScale , vScale  } = this._cachedMeta;\n\t        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n\t        const iAxis = iScale.axis;\n\t        const vAxis = vScale.axis;\n\t        for(let i = start; i < start + count; i++){\n\t            const point = points[i];\n\t            const parsed = !reset && this.getParsed(i);\n\t            const properties = {};\n\t            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n\t            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\t            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\t            if (includeOptions) {\n\t                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\t                if (reset) {\n\t                    properties.options.radius = 0;\n\t                }\n\t            }\n\t            this.updateElement(point, i, properties, mode);\n\t        }\n\t    }\n\t resolveDataElementOptions(index, mode) {\n\t        const parsed = this.getParsed(index);\n\t        let values = super.resolveDataElementOptions(index, mode);\n\t        if (values.$shared) {\n\t            values = Object.assign({}, values, {\n\t                $shared: false\n\t            });\n\t        }\n\t        const radius = values.radius;\n\t        if (mode !== 'active') {\n\t            values.radius = 0;\n\t        }\n\t        values.radius += helpers_segment.valueOrDefault(parsed && parsed._custom, radius);\n\t        return values;\n\t    }\n\t}\n\n\tfunction getRatioAndOffset(rotation, circumference, cutout) {\n\t    let ratioX = 1;\n\t    let ratioY = 1;\n\t    let offsetX = 0;\n\t    let offsetY = 0;\n\t    if (circumference < helpers_segment.TAU) {\n\t        const startAngle = rotation;\n\t        const endAngle = startAngle + circumference;\n\t        const startX = Math.cos(startAngle);\n\t        const startY = Math.sin(startAngle);\n\t        const endX = Math.cos(endAngle);\n\t        const endY = Math.sin(endAngle);\n\t        const calcMax = (angle, a, b)=>helpers_segment._angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\t        const calcMin = (angle, a, b)=>helpers_segment._angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\t        const maxX = calcMax(0, startX, endX);\n\t        const maxY = calcMax(helpers_segment.HALF_PI, startY, endY);\n\t        const minX = calcMin(helpers_segment.PI, startX, endX);\n\t        const minY = calcMin(helpers_segment.PI + helpers_segment.HALF_PI, startY, endY);\n\t        ratioX = (maxX - minX) / 2;\n\t        ratioY = (maxY - minY) / 2;\n\t        offsetX = -(maxX + minX) / 2;\n\t        offsetY = -(maxY + minY) / 2;\n\t    }\n\t    return {\n\t        ratioX,\n\t        ratioY,\n\t        offsetX,\n\t        offsetY\n\t    };\n\t}\n\tclass DoughnutController extends DatasetController {\n\t    static id = 'doughnut';\n\t static defaults = {\n\t        datasetElementType: false,\n\t        dataElementType: 'arc',\n\t        animation: {\n\t            animateRotate: true,\n\t            animateScale: false\n\t        },\n\t        animations: {\n\t            numbers: {\n\t                type: 'number',\n\t                properties: [\n\t                    'circumference',\n\t                    'endAngle',\n\t                    'innerRadius',\n\t                    'outerRadius',\n\t                    'startAngle',\n\t                    'x',\n\t                    'y',\n\t                    'offset',\n\t                    'borderWidth',\n\t                    'spacing'\n\t                ]\n\t            }\n\t        },\n\t        cutout: '50%',\n\t        rotation: 0,\n\t        circumference: 360,\n\t        radius: '100%',\n\t        spacing: 0,\n\t        indexAxis: 'r'\n\t    };\n\t    static descriptors = {\n\t        _scriptable: (name)=>name !== 'spacing',\n\t        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n\t    };\n\t static overrides = {\n\t        aspectRatio: 1,\n\t        plugins: {\n\t            legend: {\n\t                labels: {\n\t                    generateLabels (chart) {\n\t                        const data = chart.data;\n\t                        if (data.labels.length && data.datasets.length) {\n\t                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n\t                            return data.labels.map((label, i)=>{\n\t                                const meta = chart.getDatasetMeta(0);\n\t                                const style = meta.controller.getStyle(i);\n\t                                return {\n\t                                    text: label,\n\t                                    fillStyle: style.backgroundColor,\n\t                                    strokeStyle: style.borderColor,\n\t                                    fontColor: color,\n\t                                    lineWidth: style.borderWidth,\n\t                                    pointStyle: pointStyle,\n\t                                    hidden: !chart.getDataVisibility(i),\n\t                                    index: i\n\t                                };\n\t                            });\n\t                        }\n\t                        return [];\n\t                    }\n\t                },\n\t                onClick (e, legendItem, legend) {\n\t                    legend.chart.toggleDataVisibility(legendItem.index);\n\t                    legend.chart.update();\n\t                }\n\t            }\n\t        }\n\t    };\n\t    constructor(chart, datasetIndex){\n\t        super(chart, datasetIndex);\n\t        this.enableOptionSharing = true;\n\t        this.innerRadius = undefined;\n\t        this.outerRadius = undefined;\n\t        this.offsetX = undefined;\n\t        this.offsetY = undefined;\n\t    }\n\t    linkScales() {}\n\t parse(start, count) {\n\t        const data = this.getDataset().data;\n\t        const meta = this._cachedMeta;\n\t        if (this._parsing === false) {\n\t            meta._parsed = data;\n\t        } else {\n\t            let getter = (i)=>+data[i];\n\t            if (helpers_segment.isObject(data[start])) {\n\t                const { key ='value'  } = this._parsing;\n\t                getter = (i)=>+helpers_segment.resolveObjectKey(data[i], key);\n\t            }\n\t            let i, ilen;\n\t            for(i = start, ilen = start + count; i < ilen; ++i){\n\t                meta._parsed[i] = getter(i);\n\t            }\n\t        }\n\t    }\n\t _getRotation() {\n\t        return helpers_segment.toRadians(this.options.rotation - 90);\n\t    }\n\t _getCircumference() {\n\t        return helpers_segment.toRadians(this.options.circumference);\n\t    }\n\t _getRotationExtents() {\n\t        let min = helpers_segment.TAU;\n\t        let max = -helpers_segment.TAU;\n\t        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n\t            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n\t                const controller = this.chart.getDatasetMeta(i).controller;\n\t                const rotation = controller._getRotation();\n\t                const circumference = controller._getCircumference();\n\t                min = Math.min(min, rotation);\n\t                max = Math.max(max, rotation + circumference);\n\t            }\n\t        }\n\t        return {\n\t            rotation: min,\n\t            circumference: max - min\n\t        };\n\t    }\n\t update(mode) {\n\t        const chart = this.chart;\n\t        const { chartArea  } = chart;\n\t        const meta = this._cachedMeta;\n\t        const arcs = meta.data;\n\t        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n\t        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n\t        const cutout = Math.min(helpers_segment.toPercentage(this.options.cutout, maxSize), 1);\n\t        const chartWeight = this._getRingWeight(this.index);\n\t        const { circumference , rotation  } = this._getRotationExtents();\n\t        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n\t        const maxWidth = (chartArea.width - spacing) / ratioX;\n\t        const maxHeight = (chartArea.height - spacing) / ratioY;\n\t        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n\t        const outerRadius = helpers_segment.toDimension(this.options.radius, maxRadius);\n\t        const innerRadius = Math.max(outerRadius * cutout, 0);\n\t        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\t        this.offsetX = offsetX * outerRadius;\n\t        this.offsetY = offsetY * outerRadius;\n\t        meta.total = this.calculateTotal();\n\t        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n\t        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\t        this.updateElements(arcs, 0, arcs.length, mode);\n\t    }\n\t _circumference(i, reset) {\n\t        const opts = this.options;\n\t        const meta = this._cachedMeta;\n\t        const circumference = this._getCircumference();\n\t        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n\t            return 0;\n\t        }\n\t        return this.calculateCircumference(meta._parsed[i] * circumference / helpers_segment.TAU);\n\t    }\n\t    updateElements(arcs, start, count, mode) {\n\t        const reset = mode === 'reset';\n\t        const chart = this.chart;\n\t        const chartArea = chart.chartArea;\n\t        const opts = chart.options;\n\t        const animationOpts = opts.animation;\n\t        const centerX = (chartArea.left + chartArea.right) / 2;\n\t        const centerY = (chartArea.top + chartArea.bottom) / 2;\n\t        const animateScale = reset && animationOpts.animateScale;\n\t        const innerRadius = animateScale ? 0 : this.innerRadius;\n\t        const outerRadius = animateScale ? 0 : this.outerRadius;\n\t        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n\t        let startAngle = this._getRotation();\n\t        let i;\n\t        for(i = 0; i < start; ++i){\n\t            startAngle += this._circumference(i, reset);\n\t        }\n\t        for(i = start; i < start + count; ++i){\n\t            const circumference = this._circumference(i, reset);\n\t            const arc = arcs[i];\n\t            const properties = {\n\t                x: centerX + this.offsetX,\n\t                y: centerY + this.offsetY,\n\t                startAngle,\n\t                endAngle: startAngle + circumference,\n\t                circumference,\n\t                outerRadius,\n\t                innerRadius\n\t            };\n\t            if (includeOptions) {\n\t                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n\t            }\n\t            startAngle += circumference;\n\t            this.updateElement(arc, i, properties, mode);\n\t        }\n\t    }\n\t    calculateTotal() {\n\t        const meta = this._cachedMeta;\n\t        const metaData = meta.data;\n\t        let total = 0;\n\t        let i;\n\t        for(i = 0; i < metaData.length; i++){\n\t            const value = meta._parsed[i];\n\t            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n\t                total += Math.abs(value);\n\t            }\n\t        }\n\t        return total;\n\t    }\n\t    calculateCircumference(value) {\n\t        const total = this._cachedMeta.total;\n\t        if (total > 0 && !isNaN(value)) {\n\t            return helpers_segment.TAU * (Math.abs(value) / total);\n\t        }\n\t        return 0;\n\t    }\n\t    getLabelAndValue(index) {\n\t        const meta = this._cachedMeta;\n\t        const chart = this.chart;\n\t        const labels = chart.data.labels || [];\n\t        const value = helpers_segment.formatNumber(meta._parsed[index], chart.options.locale);\n\t        return {\n\t            label: labels[index] || '',\n\t            value\n\t        };\n\t    }\n\t    getMaxBorderWidth(arcs) {\n\t        let max = 0;\n\t        const chart = this.chart;\n\t        let i, ilen, meta, controller, options;\n\t        if (!arcs) {\n\t            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n\t                if (chart.isDatasetVisible(i)) {\n\t                    meta = chart.getDatasetMeta(i);\n\t                    arcs = meta.data;\n\t                    controller = meta.controller;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        if (!arcs) {\n\t            return 0;\n\t        }\n\t        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n\t            options = controller.resolveDataElementOptions(i);\n\t            if (options.borderAlign !== 'inner') {\n\t                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n\t            }\n\t        }\n\t        return max;\n\t    }\n\t    getMaxOffset(arcs) {\n\t        let max = 0;\n\t        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n\t            const options = this.resolveDataElementOptions(i);\n\t            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n\t        }\n\t        return max;\n\t    }\n\t _getRingWeightOffset(datasetIndex) {\n\t        let ringWeightOffset = 0;\n\t        for(let i = 0; i < datasetIndex; ++i){\n\t            if (this.chart.isDatasetVisible(i)) {\n\t                ringWeightOffset += this._getRingWeight(i);\n\t            }\n\t        }\n\t        return ringWeightOffset;\n\t    }\n\t _getRingWeight(datasetIndex) {\n\t        return Math.max(helpers_segment.valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n\t    }\n\t _getVisibleDatasetWeightTotal() {\n\t        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n\t    }\n\t}\n\n\tclass LineController extends DatasetController {\n\t    static id = 'line';\n\t static defaults = {\n\t        datasetElementType: 'line',\n\t        dataElementType: 'point',\n\t        showLine: true,\n\t        spanGaps: false\n\t    };\n\t static overrides = {\n\t        scales: {\n\t            _index_: {\n\t                type: 'category'\n\t            },\n\t            _value_: {\n\t                type: 'linear'\n\t            }\n\t        }\n\t    };\n\t    initialize() {\n\t        this.enableOptionSharing = true;\n\t        this.supportsDecimation = true;\n\t        super.initialize();\n\t    }\n\t    update(mode) {\n\t        const meta = this._cachedMeta;\n\t        const { dataset: line , data: points = [] , _dataset  } = meta;\n\t        const animationsDisabled = this.chart._animationsDisabled;\n\t        let { start , count  } = helpers_segment._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\t        this._drawStart = start;\n\t        this._drawCount = count;\n\t        if (helpers_segment._scaleRangesChanged(meta)) {\n\t            start = 0;\n\t            count = points.length;\n\t        }\n\t        line._chart = this.chart;\n\t        line._datasetIndex = this.index;\n\t        line._decimated = !!_dataset._decimated;\n\t        line.points = points;\n\t        const options = this.resolveDatasetElementOptions(mode);\n\t        if (!this.options.showLine) {\n\t            options.borderWidth = 0;\n\t        }\n\t        options.segment = this.options.segment;\n\t        this.updateElement(line, undefined, {\n\t            animated: !animationsDisabled,\n\t            options\n\t        }, mode);\n\t        this.updateElements(points, start, count, mode);\n\t    }\n\t    updateElements(points, start, count, mode) {\n\t        const reset = mode === 'reset';\n\t        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n\t        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n\t        const iAxis = iScale.axis;\n\t        const vAxis = vScale.axis;\n\t        const { spanGaps , segment  } = this.options;\n\t        const maxGapLength = helpers_segment.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n\t        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n\t        const end = start + count;\n\t        const pointsCount = points.length;\n\t        let prevParsed = start > 0 && this.getParsed(start - 1);\n\t        for(let i = 0; i < pointsCount; ++i){\n\t            const point = points[i];\n\t            const properties = directUpdate ? point : {};\n\t            if (i < start || i >= end) {\n\t                properties.skip = true;\n\t                continue;\n\t            }\n\t            const parsed = this.getParsed(i);\n\t            const nullData = helpers_segment.isNullOrUndef(parsed[vAxis]);\n\t            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n\t            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\t            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n\t            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\t            if (segment) {\n\t                properties.parsed = parsed;\n\t                properties.raw = _dataset.data[i];\n\t            }\n\t            if (includeOptions) {\n\t                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\t            }\n\t            if (!directUpdate) {\n\t                this.updateElement(point, i, properties, mode);\n\t            }\n\t            prevParsed = parsed;\n\t        }\n\t    }\n\t getMaxOverflow() {\n\t        const meta = this._cachedMeta;\n\t        const dataset = meta.dataset;\n\t        const border = dataset.options && dataset.options.borderWidth || 0;\n\t        const data = meta.data || [];\n\t        if (!data.length) {\n\t            return border;\n\t        }\n\t        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n\t        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n\t        return Math.max(border, firstPoint, lastPoint) / 2;\n\t    }\n\t    draw() {\n\t        const meta = this._cachedMeta;\n\t        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n\t        super.draw();\n\t    }\n\t}\n\n\tclass PolarAreaController extends DatasetController {\n\t    static id = 'polarArea';\n\t static defaults = {\n\t        dataElementType: 'arc',\n\t        animation: {\n\t            animateRotate: true,\n\t            animateScale: true\n\t        },\n\t        animations: {\n\t            numbers: {\n\t                type: 'number',\n\t                properties: [\n\t                    'x',\n\t                    'y',\n\t                    'startAngle',\n\t                    'endAngle',\n\t                    'innerRadius',\n\t                    'outerRadius'\n\t                ]\n\t            }\n\t        },\n\t        indexAxis: 'r',\n\t        startAngle: 0\n\t    };\n\t static overrides = {\n\t        aspectRatio: 1,\n\t        plugins: {\n\t            legend: {\n\t                labels: {\n\t                    generateLabels (chart) {\n\t                        const data = chart.data;\n\t                        if (data.labels.length && data.datasets.length) {\n\t                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n\t                            return data.labels.map((label, i)=>{\n\t                                const meta = chart.getDatasetMeta(0);\n\t                                const style = meta.controller.getStyle(i);\n\t                                return {\n\t                                    text: label,\n\t                                    fillStyle: style.backgroundColor,\n\t                                    strokeStyle: style.borderColor,\n\t                                    fontColor: color,\n\t                                    lineWidth: style.borderWidth,\n\t                                    pointStyle: pointStyle,\n\t                                    hidden: !chart.getDataVisibility(i),\n\t                                    index: i\n\t                                };\n\t                            });\n\t                        }\n\t                        return [];\n\t                    }\n\t                },\n\t                onClick (e, legendItem, legend) {\n\t                    legend.chart.toggleDataVisibility(legendItem.index);\n\t                    legend.chart.update();\n\t                }\n\t            }\n\t        },\n\t        scales: {\n\t            r: {\n\t                type: 'radialLinear',\n\t                angleLines: {\n\t                    display: false\n\t                },\n\t                beginAtZero: true,\n\t                grid: {\n\t                    circular: true\n\t                },\n\t                pointLabels: {\n\t                    display: false\n\t                },\n\t                startAngle: 0\n\t            }\n\t        }\n\t    };\n\t    constructor(chart, datasetIndex){\n\t        super(chart, datasetIndex);\n\t        this.innerRadius = undefined;\n\t        this.outerRadius = undefined;\n\t    }\n\t    getLabelAndValue(index) {\n\t        const meta = this._cachedMeta;\n\t        const chart = this.chart;\n\t        const labels = chart.data.labels || [];\n\t        const value = helpers_segment.formatNumber(meta._parsed[index].r, chart.options.locale);\n\t        return {\n\t            label: labels[index] || '',\n\t            value\n\t        };\n\t    }\n\t    parseObjectData(meta, data, start, count) {\n\t        return helpers_segment._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n\t    }\n\t    update(mode) {\n\t        const arcs = this._cachedMeta.data;\n\t        this._updateRadius();\n\t        this.updateElements(arcs, 0, arcs.length, mode);\n\t    }\n\t getMinMax() {\n\t        const meta = this._cachedMeta;\n\t        const range = {\n\t            min: Number.POSITIVE_INFINITY,\n\t            max: Number.NEGATIVE_INFINITY\n\t        };\n\t        meta.data.forEach((element, index)=>{\n\t            const parsed = this.getParsed(index).r;\n\t            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n\t                if (parsed < range.min) {\n\t                    range.min = parsed;\n\t                }\n\t                if (parsed > range.max) {\n\t                    range.max = parsed;\n\t                }\n\t            }\n\t        });\n\t        return range;\n\t    }\n\t _updateRadius() {\n\t        const chart = this.chart;\n\t        const chartArea = chart.chartArea;\n\t        const opts = chart.options;\n\t        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\t        const outerRadius = Math.max(minSize / 2, 0);\n\t        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n\t        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\t        this.outerRadius = outerRadius - radiusLength * this.index;\n\t        this.innerRadius = this.outerRadius - radiusLength;\n\t    }\n\t    updateElements(arcs, start, count, mode) {\n\t        const reset = mode === 'reset';\n\t        const chart = this.chart;\n\t        const opts = chart.options;\n\t        const animationOpts = opts.animation;\n\t        const scale = this._cachedMeta.rScale;\n\t        const centerX = scale.xCenter;\n\t        const centerY = scale.yCenter;\n\t        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * helpers_segment.PI;\n\t        let angle = datasetStartAngle;\n\t        let i;\n\t        const defaultAngle = 360 / this.countVisibleElements();\n\t        for(i = 0; i < start; ++i){\n\t            angle += this._computeAngle(i, mode, defaultAngle);\n\t        }\n\t        for(i = start; i < start + count; i++){\n\t            const arc = arcs[i];\n\t            let startAngle = angle;\n\t            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\t            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n\t            angle = endAngle;\n\t            if (reset) {\n\t                if (animationOpts.animateScale) {\n\t                    outerRadius = 0;\n\t                }\n\t                if (animationOpts.animateRotate) {\n\t                    startAngle = endAngle = datasetStartAngle;\n\t                }\n\t            }\n\t            const properties = {\n\t                x: centerX,\n\t                y: centerY,\n\t                innerRadius: 0,\n\t                outerRadius,\n\t                startAngle,\n\t                endAngle,\n\t                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n\t            };\n\t            this.updateElement(arc, i, properties, mode);\n\t        }\n\t    }\n\t    countVisibleElements() {\n\t        const meta = this._cachedMeta;\n\t        let count = 0;\n\t        meta.data.forEach((element, index)=>{\n\t            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n\t                count++;\n\t            }\n\t        });\n\t        return count;\n\t    }\n\t _computeAngle(index, mode, defaultAngle) {\n\t        return this.chart.getDataVisibility(index) ? helpers_segment.toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n\t    }\n\t}\n\n\tclass PieController extends DoughnutController {\n\t    static id = 'pie';\n\t static defaults = {\n\t        cutout: 0,\n\t        rotation: 0,\n\t        circumference: 360,\n\t        radius: '100%'\n\t    };\n\t}\n\n\tclass RadarController extends DatasetController {\n\t    static id = 'radar';\n\t static defaults = {\n\t        datasetElementType: 'line',\n\t        dataElementType: 'point',\n\t        indexAxis: 'r',\n\t        showLine: true,\n\t        elements: {\n\t            line: {\n\t                fill: 'start'\n\t            }\n\t        }\n\t    };\n\t static overrides = {\n\t        aspectRatio: 1,\n\t        scales: {\n\t            r: {\n\t                type: 'radialLinear'\n\t            }\n\t        }\n\t    };\n\t getLabelAndValue(index) {\n\t        const vScale = this._cachedMeta.vScale;\n\t        const parsed = this.getParsed(index);\n\t        return {\n\t            label: vScale.getLabels()[index],\n\t            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n\t        };\n\t    }\n\t    parseObjectData(meta, data, start, count) {\n\t        return helpers_segment._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n\t    }\n\t    update(mode) {\n\t        const meta = this._cachedMeta;\n\t        const line = meta.dataset;\n\t        const points = meta.data || [];\n\t        const labels = meta.iScale.getLabels();\n\t        line.points = points;\n\t        if (mode !== 'resize') {\n\t            const options = this.resolveDatasetElementOptions(mode);\n\t            if (!this.options.showLine) {\n\t                options.borderWidth = 0;\n\t            }\n\t            const properties = {\n\t                _loop: true,\n\t                _fullLoop: labels.length === points.length,\n\t                options\n\t            };\n\t            this.updateElement(line, undefined, properties, mode);\n\t        }\n\t        this.updateElements(points, 0, points.length, mode);\n\t    }\n\t    updateElements(points, start, count, mode) {\n\t        const scale = this._cachedMeta.rScale;\n\t        const reset = mode === 'reset';\n\t        for(let i = start; i < start + count; i++){\n\t            const point = points[i];\n\t            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\t            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\t            const x = reset ? scale.xCenter : pointPosition.x;\n\t            const y = reset ? scale.yCenter : pointPosition.y;\n\t            const properties = {\n\t                x,\n\t                y,\n\t                angle: pointPosition.angle,\n\t                skip: isNaN(x) || isNaN(y),\n\t                options\n\t            };\n\t            this.updateElement(point, i, properties, mode);\n\t        }\n\t    }\n\t}\n\n\tclass ScatterController extends DatasetController {\n\t    static id = 'scatter';\n\t static defaults = {\n\t        datasetElementType: false,\n\t        dataElementType: 'point',\n\t        showLine: false,\n\t        fill: false\n\t    };\n\t static overrides = {\n\t        interaction: {\n\t            mode: 'point'\n\t        },\n\t        scales: {\n\t            x: {\n\t                type: 'linear'\n\t            },\n\t            y: {\n\t                type: 'linear'\n\t            }\n\t        }\n\t    };\n\t getLabelAndValue(index) {\n\t        const meta = this._cachedMeta;\n\t        const labels = this.chart.data.labels || [];\n\t        const { xScale , yScale  } = meta;\n\t        const parsed = this.getParsed(index);\n\t        const x = xScale.getLabelForValue(parsed.x);\n\t        const y = yScale.getLabelForValue(parsed.y);\n\t        return {\n\t            label: labels[index] || '',\n\t            value: '(' + x + ', ' + y + ')'\n\t        };\n\t    }\n\t    update(mode) {\n\t        const meta = this._cachedMeta;\n\t        const { data: points = []  } = meta;\n\t        const animationsDisabled = this.chart._animationsDisabled;\n\t        let { start , count  } = helpers_segment._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\t        this._drawStart = start;\n\t        this._drawCount = count;\n\t        if (helpers_segment._scaleRangesChanged(meta)) {\n\t            start = 0;\n\t            count = points.length;\n\t        }\n\t        if (this.options.showLine) {\n\t            if (!this.datasetElementType) {\n\t                this.addElements();\n\t            }\n\t            const { dataset: line , _dataset  } = meta;\n\t            line._chart = this.chart;\n\t            line._datasetIndex = this.index;\n\t            line._decimated = !!_dataset._decimated;\n\t            line.points = points;\n\t            const options = this.resolveDatasetElementOptions(mode);\n\t            options.segment = this.options.segment;\n\t            this.updateElement(line, undefined, {\n\t                animated: !animationsDisabled,\n\t                options\n\t            }, mode);\n\t        } else if (this.datasetElementType) {\n\t            delete meta.dataset;\n\t            this.datasetElementType = false;\n\t        }\n\t        this.updateElements(points, start, count, mode);\n\t    }\n\t    addElements() {\n\t        const { showLine  } = this.options;\n\t        if (!this.datasetElementType && showLine) {\n\t            this.datasetElementType = this.chart.registry.getElement('line');\n\t        }\n\t        super.addElements();\n\t    }\n\t    updateElements(points, start, count, mode) {\n\t        const reset = mode === 'reset';\n\t        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n\t        const firstOpts = this.resolveDataElementOptions(start, mode);\n\t        const sharedOptions = this.getSharedOptions(firstOpts);\n\t        const includeOptions = this.includeOptions(mode, sharedOptions);\n\t        const iAxis = iScale.axis;\n\t        const vAxis = vScale.axis;\n\t        const { spanGaps , segment  } = this.options;\n\t        const maxGapLength = helpers_segment.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n\t        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n\t        let prevParsed = start > 0 && this.getParsed(start - 1);\n\t        for(let i = start; i < start + count; ++i){\n\t            const point = points[i];\n\t            const parsed = this.getParsed(i);\n\t            const properties = directUpdate ? point : {};\n\t            const nullData = helpers_segment.isNullOrUndef(parsed[vAxis]);\n\t            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n\t            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\t            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n\t            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\t            if (segment) {\n\t                properties.parsed = parsed;\n\t                properties.raw = _dataset.data[i];\n\t            }\n\t            if (includeOptions) {\n\t                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\t            }\n\t            if (!directUpdate) {\n\t                this.updateElement(point, i, properties, mode);\n\t            }\n\t            prevParsed = parsed;\n\t        }\n\t        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n\t    }\n\t getMaxOverflow() {\n\t        const meta = this._cachedMeta;\n\t        const data = meta.data || [];\n\t        if (!this.options.showLine) {\n\t            let max = 0;\n\t            for(let i = data.length - 1; i >= 0; --i){\n\t                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n\t            }\n\t            return max > 0 && max;\n\t        }\n\t        const dataset = meta.dataset;\n\t        const border = dataset.options && dataset.options.borderWidth || 0;\n\t        if (!data.length) {\n\t            return border;\n\t        }\n\t        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n\t        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n\t        return Math.max(border, firstPoint, lastPoint) / 2;\n\t    }\n\t}\n\n\tvar controllers = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBarController: BarController,\n\tBubbleController: BubbleController,\n\tDoughnutController: DoughnutController,\n\tLineController: LineController,\n\tPieController: PieController,\n\tPolarAreaController: PolarAreaController,\n\tRadarController: RadarController,\n\tScatterController: ScatterController\n\t});\n\n\t/**\n\t * @namespace Chart._adapters\n\t * @since 2.8.0\n\t * @private\n\t */ function abstract() {\n\t    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n\t}\n\t/**\n\t * Date adapter (current used by the time scale)\n\t * @namespace Chart._adapters._date\n\t * @memberof Chart._adapters\n\t * @private\n\t */ class DateAdapterBase {\n\t    /**\n\t   * Override default date adapter methods.\n\t   * Accepts type parameter to define options type.\n\t   * @example\n\t   * Chart._adapters._date.override<{myAdapterOption: string}>({\n\t   *   init() {\n\t   *     console.log(this.options.myAdapterOption);\n\t   *   }\n\t   * })\n\t   */ static override(members) {\n\t        Object.assign(DateAdapterBase.prototype, members);\n\t    }\n\t    options;\n\t    constructor(options){\n\t        this.options = options || {};\n\t    }\n\t    // eslint-disable-next-line @typescript-eslint/no-empty-function\n\t    init() {}\n\t    formats() {\n\t        return abstract();\n\t    }\n\t    parse() {\n\t        return abstract();\n\t    }\n\t    format() {\n\t        return abstract();\n\t    }\n\t    add() {\n\t        return abstract();\n\t    }\n\t    diff() {\n\t        return abstract();\n\t    }\n\t    startOf() {\n\t        return abstract();\n\t    }\n\t    endOf() {\n\t        return abstract();\n\t    }\n\t}\n\tvar adapters = {\n\t    _date: DateAdapterBase\n\t};\n\n\tfunction binarySearch(metaset, axis, value, intersect) {\n\t    const { controller , data , _sorted  } = metaset;\n\t    const iScale = controller._cachedMeta.iScale;\n\t    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n\t        const lookupMethod = iScale._reversePixels ? helpers_segment._rlookupByKey : helpers_segment._lookupByKey;\n\t        if (!intersect) {\n\t            return lookupMethod(data, axis, value);\n\t        } else if (controller._sharedOptions) {\n\t            const el = data[0];\n\t            const range = typeof el.getRange === 'function' && el.getRange(axis);\n\t            if (range) {\n\t                const start = lookupMethod(data, axis, value - range);\n\t                const end = lookupMethod(data, axis, value + range);\n\t                return {\n\t                    lo: start.lo,\n\t                    hi: end.hi\n\t                };\n\t            }\n\t        }\n\t    }\n\t    return {\n\t        lo: 0,\n\t        hi: data.length - 1\n\t    };\n\t}\n\t function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n\t    const metasets = chart.getSortedVisibleDatasetMetas();\n\t    const value = position[axis];\n\t    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n\t        const { index , data  } = metasets[i];\n\t        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n\t        for(let j = lo; j <= hi; ++j){\n\t            const element = data[j];\n\t            if (!element.skip) {\n\t                handler(element, index, j);\n\t            }\n\t        }\n\t    }\n\t}\n\t function getDistanceMetricForAxis(axis) {\n\t    const useX = axis.indexOf('x') !== -1;\n\t    const useY = axis.indexOf('y') !== -1;\n\t    return function(pt1, pt2) {\n\t        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n\t        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n\t        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\t    };\n\t}\n\t function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n\t    const items = [];\n\t    if (!includeInvisible && !chart.isPointInArea(position)) {\n\t        return items;\n\t    }\n\t    const evaluationFunc = function(element, datasetIndex, index) {\n\t        if (!includeInvisible && !helpers_segment._isPointInArea(element, chart.chartArea, 0)) {\n\t            return;\n\t        }\n\t        if (element.inRange(position.x, position.y, useFinalPosition)) {\n\t            items.push({\n\t                element,\n\t                datasetIndex,\n\t                index\n\t            });\n\t        }\n\t    };\n\t    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n\t    return items;\n\t}\n\t function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n\t    let items = [];\n\t    function evaluationFunc(element, datasetIndex, index) {\n\t        const { startAngle , endAngle  } = element.getProps([\n\t            'startAngle',\n\t            'endAngle'\n\t        ], useFinalPosition);\n\t        const { angle  } = helpers_segment.getAngleFromPoint(element, {\n\t            x: position.x,\n\t            y: position.y\n\t        });\n\t        if (helpers_segment._angleBetween(angle, startAngle, endAngle)) {\n\t            items.push({\n\t                element,\n\t                datasetIndex,\n\t                index\n\t            });\n\t        }\n\t    }\n\t    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n\t    return items;\n\t}\n\t function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n\t    let items = [];\n\t    const distanceMetric = getDistanceMetricForAxis(axis);\n\t    let minDistance = Number.POSITIVE_INFINITY;\n\t    function evaluationFunc(element, datasetIndex, index) {\n\t        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\t        if (intersect && !inRange) {\n\t            return;\n\t        }\n\t        const center = element.getCenterPoint(useFinalPosition);\n\t        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\t        if (!pointInArea && !inRange) {\n\t            return;\n\t        }\n\t        const distance = distanceMetric(position, center);\n\t        if (distance < minDistance) {\n\t            items = [\n\t                {\n\t                    element,\n\t                    datasetIndex,\n\t                    index\n\t                }\n\t            ];\n\t            minDistance = distance;\n\t        } else if (distance === minDistance) {\n\t            items.push({\n\t                element,\n\t                datasetIndex,\n\t                index\n\t            });\n\t        }\n\t    }\n\t    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n\t    return items;\n\t}\n\t function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n\t    if (!includeInvisible && !chart.isPointInArea(position)) {\n\t        return [];\n\t    }\n\t    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n\t}\n\t function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n\t    const items = [];\n\t    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n\t    let intersectsItem = false;\n\t    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n\t        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n\t            items.push({\n\t                element,\n\t                datasetIndex,\n\t                index\n\t            });\n\t            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n\t        }\n\t    });\n\t    if (intersect && !intersectsItem) {\n\t        return [];\n\t    }\n\t    return items;\n\t}\n\t var Interaction = {\n\t    evaluateInteractionItems,\n\t    modes: {\n\t index (chart, e, options, useFinalPosition) {\n\t            const position = helpers_segment.getRelativePosition(e, chart);\n\t            const axis = options.axis || 'x';\n\t            const includeInvisible = options.includeInvisible || false;\n\t            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\t            const elements = [];\n\t            if (!items.length) {\n\t                return [];\n\t            }\n\t            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n\t                const index = items[0].index;\n\t                const element = meta.data[index];\n\t                if (element && !element.skip) {\n\t                    elements.push({\n\t                        element,\n\t                        datasetIndex: meta.index,\n\t                        index\n\t                    });\n\t                }\n\t            });\n\t            return elements;\n\t        },\n\t dataset (chart, e, options, useFinalPosition) {\n\t            const position = helpers_segment.getRelativePosition(e, chart);\n\t            const axis = options.axis || 'xy';\n\t            const includeInvisible = options.includeInvisible || false;\n\t            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\t            if (items.length > 0) {\n\t                const datasetIndex = items[0].datasetIndex;\n\t                const data = chart.getDatasetMeta(datasetIndex).data;\n\t                items = [];\n\t                for(let i = 0; i < data.length; ++i){\n\t                    items.push({\n\t                        element: data[i],\n\t                        datasetIndex,\n\t                        index: i\n\t                    });\n\t                }\n\t            }\n\t            return items;\n\t        },\n\t point (chart, e, options, useFinalPosition) {\n\t            const position = helpers_segment.getRelativePosition(e, chart);\n\t            const axis = options.axis || 'xy';\n\t            const includeInvisible = options.includeInvisible || false;\n\t            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n\t        },\n\t nearest (chart, e, options, useFinalPosition) {\n\t            const position = helpers_segment.getRelativePosition(e, chart);\n\t            const axis = options.axis || 'xy';\n\t            const includeInvisible = options.includeInvisible || false;\n\t            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n\t        },\n\t x (chart, e, options, useFinalPosition) {\n\t            const position = helpers_segment.getRelativePosition(e, chart);\n\t            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n\t        },\n\t y (chart, e, options, useFinalPosition) {\n\t            const position = helpers_segment.getRelativePosition(e, chart);\n\t            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n\t        }\n\t    }\n\t};\n\n\tconst STATIC_POSITIONS = [\n\t    'left',\n\t    'top',\n\t    'right',\n\t    'bottom'\n\t];\n\tfunction filterByPosition(array, position) {\n\t    return array.filter((v)=>v.pos === position);\n\t}\n\tfunction filterDynamicPositionByAxis(array, axis) {\n\t    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n\t}\n\tfunction sortByWeight(array, reverse) {\n\t    return array.sort((a, b)=>{\n\t        const v0 = reverse ? b : a;\n\t        const v1 = reverse ? a : b;\n\t        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n\t    });\n\t}\n\tfunction wrapBoxes(boxes) {\n\t    const layoutBoxes = [];\n\t    let i, ilen, box, pos, stack, stackWeight;\n\t    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n\t        box = boxes[i];\n\t        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n\t        layoutBoxes.push({\n\t            index: i,\n\t            box,\n\t            pos,\n\t            horizontal: box.isHorizontal(),\n\t            weight: box.weight,\n\t            stack: stack && pos + stack,\n\t            stackWeight\n\t        });\n\t    }\n\t    return layoutBoxes;\n\t}\n\tfunction buildStacks(layouts) {\n\t    const stacks = {};\n\t    for (const wrap of layouts){\n\t        const { stack , pos , stackWeight  } = wrap;\n\t        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n\t            continue;\n\t        }\n\t        const _stack = stacks[stack] || (stacks[stack] = {\n\t            count: 0,\n\t            placed: 0,\n\t            weight: 0,\n\t            size: 0\n\t        });\n\t        _stack.count++;\n\t        _stack.weight += stackWeight;\n\t    }\n\t    return stacks;\n\t}\n\t function setLayoutDims(layouts, params) {\n\t    const stacks = buildStacks(layouts);\n\t    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n\t    let i, ilen, layout;\n\t    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n\t        layout = layouts[i];\n\t        const { fullSize  } = layout.box;\n\t        const stack = stacks[layout.stack];\n\t        const factor = stack && layout.stackWeight / stack.weight;\n\t        if (layout.horizontal) {\n\t            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n\t            layout.height = hBoxMaxHeight;\n\t        } else {\n\t            layout.width = vBoxMaxWidth;\n\t            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n\t        }\n\t    }\n\t    return stacks;\n\t}\n\tfunction buildLayoutBoxes(boxes) {\n\t    const layoutBoxes = wrapBoxes(boxes);\n\t    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n\t    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n\t    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n\t    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n\t    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n\t    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n\t    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\t    return {\n\t        fullSize,\n\t        leftAndTop: left.concat(top),\n\t        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n\t        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n\t        vertical: left.concat(right).concat(centerVertical),\n\t        horizontal: top.concat(bottom).concat(centerHorizontal)\n\t    };\n\t}\n\tfunction getCombinedMax(maxPadding, chartArea, a, b) {\n\t    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n\t}\n\tfunction updateMaxPadding(maxPadding, boxPadding) {\n\t    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n\t    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n\t    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n\t    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n\t}\n\tfunction updateDims(chartArea, params, layout, stacks) {\n\t    const { pos , box  } = layout;\n\t    const maxPadding = chartArea.maxPadding;\n\t    if (!helpers_segment.isObject(pos)) {\n\t        if (layout.size) {\n\t            chartArea[pos] -= layout.size;\n\t        }\n\t        const stack = stacks[layout.stack] || {\n\t            size: 0,\n\t            count: 1\n\t        };\n\t        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n\t        layout.size = stack.size / stack.count;\n\t        chartArea[pos] += layout.size;\n\t    }\n\t    if (box.getPadding) {\n\t        updateMaxPadding(maxPadding, box.getPadding());\n\t    }\n\t    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n\t    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n\t    const widthChanged = newWidth !== chartArea.w;\n\t    const heightChanged = newHeight !== chartArea.h;\n\t    chartArea.w = newWidth;\n\t    chartArea.h = newHeight;\n\t    return layout.horizontal ? {\n\t        same: widthChanged,\n\t        other: heightChanged\n\t    } : {\n\t        same: heightChanged,\n\t        other: widthChanged\n\t    };\n\t}\n\tfunction handleMaxPadding(chartArea) {\n\t    const maxPadding = chartArea.maxPadding;\n\t    function updatePos(pos) {\n\t        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n\t        chartArea[pos] += change;\n\t        return change;\n\t    }\n\t    chartArea.y += updatePos('top');\n\t    chartArea.x += updatePos('left');\n\t    updatePos('right');\n\t    updatePos('bottom');\n\t}\n\tfunction getMargins(horizontal, chartArea) {\n\t    const maxPadding = chartArea.maxPadding;\n\t    function marginForPositions(positions) {\n\t        const margin = {\n\t            left: 0,\n\t            top: 0,\n\t            right: 0,\n\t            bottom: 0\n\t        };\n\t        positions.forEach((pos)=>{\n\t            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n\t        });\n\t        return margin;\n\t    }\n\t    return horizontal ? marginForPositions([\n\t        'left',\n\t        'right'\n\t    ]) : marginForPositions([\n\t        'top',\n\t        'bottom'\n\t    ]);\n\t}\n\tfunction fitBoxes(boxes, chartArea, params, stacks) {\n\t    const refitBoxes = [];\n\t    let i, ilen, layout, box, refit, changed;\n\t    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n\t        layout = boxes[i];\n\t        box = layout.box;\n\t        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n\t        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n\t        refit |= same && refitBoxes.length;\n\t        changed = changed || other;\n\t        if (!box.fullSize) {\n\t            refitBoxes.push(layout);\n\t        }\n\t    }\n\t    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n\t}\n\tfunction setBoxDims(box, left, top, width, height) {\n\t    box.top = top;\n\t    box.left = left;\n\t    box.right = left + width;\n\t    box.bottom = top + height;\n\t    box.width = width;\n\t    box.height = height;\n\t}\n\tfunction placeBoxes(boxes, chartArea, params, stacks) {\n\t    const userPadding = params.padding;\n\t    let { x , y  } = chartArea;\n\t    for (const layout of boxes){\n\t        const box = layout.box;\n\t        const stack = stacks[layout.stack] || {\n\t            count: 1,\n\t            placed: 0,\n\t            weight: 1\n\t        };\n\t        const weight = layout.stackWeight / stack.weight || 1;\n\t        if (layout.horizontal) {\n\t            const width = chartArea.w * weight;\n\t            const height = stack.size || box.height;\n\t            if (helpers_segment.defined(stack.start)) {\n\t                y = stack.start;\n\t            }\n\t            if (box.fullSize) {\n\t                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n\t            } else {\n\t                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n\t            }\n\t            stack.start = y;\n\t            stack.placed += width;\n\t            y = box.bottom;\n\t        } else {\n\t            const height = chartArea.h * weight;\n\t            const width = stack.size || box.width;\n\t            if (helpers_segment.defined(stack.start)) {\n\t                x = stack.start;\n\t            }\n\t            if (box.fullSize) {\n\t                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n\t            } else {\n\t                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n\t            }\n\t            stack.start = x;\n\t            stack.placed += height;\n\t            x = box.right;\n\t        }\n\t    }\n\t    chartArea.x = x;\n\t    chartArea.y = y;\n\t}\n\tvar layouts = {\n\t addBox (chart, item) {\n\t        if (!chart.boxes) {\n\t            chart.boxes = [];\n\t        }\n\t        item.fullSize = item.fullSize || false;\n\t        item.position = item.position || 'top';\n\t        item.weight = item.weight || 0;\n\t        item._layers = item._layers || function() {\n\t            return [\n\t                {\n\t                    z: 0,\n\t                    draw (chartArea) {\n\t                        item.draw(chartArea);\n\t                    }\n\t                }\n\t            ];\n\t        };\n\t        chart.boxes.push(item);\n\t    },\n\t removeBox (chart, layoutItem) {\n\t        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\t        if (index !== -1) {\n\t            chart.boxes.splice(index, 1);\n\t        }\n\t    },\n\t configure (chart, item, options) {\n\t        item.fullSize = options.fullSize;\n\t        item.position = options.position;\n\t        item.weight = options.weight;\n\t    },\n\t update (chart, width, height, minPadding) {\n\t        if (!chart) {\n\t            return;\n\t        }\n\t        const padding = helpers_segment.toPadding(chart.options.layout.padding);\n\t        const availableWidth = Math.max(width - padding.width, 0);\n\t        const availableHeight = Math.max(height - padding.height, 0);\n\t        const boxes = buildLayoutBoxes(chart.boxes);\n\t        const verticalBoxes = boxes.vertical;\n\t        const horizontalBoxes = boxes.horizontal;\n\t        helpers_segment.each(chart.boxes, (box)=>{\n\t            if (typeof box.beforeLayout === 'function') {\n\t                box.beforeLayout();\n\t            }\n\t        });\n\t        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\t        const params = Object.freeze({\n\t            outerWidth: width,\n\t            outerHeight: height,\n\t            padding,\n\t            availableWidth,\n\t            availableHeight,\n\t            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n\t            hBoxMaxHeight: availableHeight / 2\n\t        });\n\t        const maxPadding = Object.assign({}, padding);\n\t        updateMaxPadding(maxPadding, helpers_segment.toPadding(minPadding));\n\t        const chartArea = Object.assign({\n\t            maxPadding,\n\t            w: availableWidth,\n\t            h: availableHeight,\n\t            x: padding.left,\n\t            y: padding.top\n\t        }, padding);\n\t        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\t        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\t        fitBoxes(verticalBoxes, chartArea, params, stacks);\n\t        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n\t            fitBoxes(verticalBoxes, chartArea, params, stacks);\n\t        }\n\t        handleMaxPadding(chartArea);\n\t        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\t        chartArea.x += chartArea.w;\n\t        chartArea.y += chartArea.h;\n\t        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\t        chart.chartArea = {\n\t            left: chartArea.left,\n\t            top: chartArea.top,\n\t            right: chartArea.left + chartArea.w,\n\t            bottom: chartArea.top + chartArea.h,\n\t            height: chartArea.h,\n\t            width: chartArea.w\n\t        };\n\t        helpers_segment.each(boxes.chartArea, (layout)=>{\n\t            const box = layout.box;\n\t            Object.assign(box, chart.chartArea);\n\t            box.update(chartArea.w, chartArea.h, {\n\t                left: 0,\n\t                top: 0,\n\t                right: 0,\n\t                bottom: 0\n\t            });\n\t        });\n\t    }\n\t};\n\n\tclass BasePlatform {\n\t acquireContext(canvas, aspectRatio) {}\n\t releaseContext(context) {\n\t        return false;\n\t    }\n\t addEventListener(chart, type, listener) {}\n\t removeEventListener(chart, type, listener) {}\n\t getDevicePixelRatio() {\n\t        return 1;\n\t    }\n\t getMaximumSize(element, width, height, aspectRatio) {\n\t        width = Math.max(0, width || element.width);\n\t        height = height || element.height;\n\t        return {\n\t            width,\n\t            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n\t        };\n\t    }\n\t isAttached(canvas) {\n\t        return true;\n\t    }\n\t updateConfig(config) {\n\t    }\n\t}\n\n\tclass BasicPlatform extends BasePlatform {\n\t    acquireContext(item) {\n\t        return item && item.getContext && item.getContext('2d') || null;\n\t    }\n\t    updateConfig(config) {\n\t        config.options.animation = false;\n\t    }\n\t}\n\n\tconst EXPANDO_KEY = '$chartjs';\n\t const EVENT_TYPES = {\n\t    touchstart: 'mousedown',\n\t    touchmove: 'mousemove',\n\t    touchend: 'mouseup',\n\t    pointerenter: 'mouseenter',\n\t    pointerdown: 'mousedown',\n\t    pointermove: 'mousemove',\n\t    pointerup: 'mouseup',\n\t    pointerleave: 'mouseout',\n\t    pointerout: 'mouseout'\n\t};\n\tconst isNullOrEmpty = (value)=>value === null || value === '';\n\t function initCanvas(canvas, aspectRatio) {\n\t    const style = canvas.style;\n\t    const renderHeight = canvas.getAttribute('height');\n\t    const renderWidth = canvas.getAttribute('width');\n\t    canvas[EXPANDO_KEY] = {\n\t        initial: {\n\t            height: renderHeight,\n\t            width: renderWidth,\n\t            style: {\n\t                display: style.display,\n\t                height: style.height,\n\t                width: style.width\n\t            }\n\t        }\n\t    };\n\t    style.display = style.display || 'block';\n\t    style.boxSizing = style.boxSizing || 'border-box';\n\t    if (isNullOrEmpty(renderWidth)) {\n\t        const displayWidth = helpers_segment.readUsedSize(canvas, 'width');\n\t        if (displayWidth !== undefined) {\n\t            canvas.width = displayWidth;\n\t        }\n\t    }\n\t    if (isNullOrEmpty(renderHeight)) {\n\t        if (canvas.style.height === '') {\n\t            canvas.height = canvas.width / (aspectRatio || 2);\n\t        } else {\n\t            const displayHeight = helpers_segment.readUsedSize(canvas, 'height');\n\t            if (displayHeight !== undefined) {\n\t                canvas.height = displayHeight;\n\t            }\n\t        }\n\t    }\n\t    return canvas;\n\t}\n\tconst eventListenerOptions = helpers_segment.supportsEventListenerOptions ? {\n\t    passive: true\n\t} : false;\n\tfunction addListener(node, type, listener) {\n\t    if (node) {\n\t        node.addEventListener(type, listener, eventListenerOptions);\n\t    }\n\t}\n\tfunction removeListener(chart, type, listener) {\n\t    if (chart && chart.canvas) {\n\t        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n\t    }\n\t}\n\tfunction fromNativeEvent(event, chart) {\n\t    const type = EVENT_TYPES[event.type] || event.type;\n\t    const { x , y  } = helpers_segment.getRelativePosition(event, chart);\n\t    return {\n\t        type,\n\t        chart,\n\t        native: event,\n\t        x: x !== undefined ? x : null,\n\t        y: y !== undefined ? y : null\n\t    };\n\t}\n\tfunction nodeListContains(nodeList, canvas) {\n\t    for (const node of nodeList){\n\t        if (node === canvas || node.contains(canvas)) {\n\t            return true;\n\t        }\n\t    }\n\t}\n\tfunction createAttachObserver(chart, type, listener) {\n\t    const canvas = chart.canvas;\n\t    const observer = new MutationObserver((entries)=>{\n\t        let trigger = false;\n\t        for (const entry of entries){\n\t            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n\t            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n\t        }\n\t        if (trigger) {\n\t            listener();\n\t        }\n\t    });\n\t    observer.observe(document, {\n\t        childList: true,\n\t        subtree: true\n\t    });\n\t    return observer;\n\t}\n\tfunction createDetachObserver(chart, type, listener) {\n\t    const canvas = chart.canvas;\n\t    const observer = new MutationObserver((entries)=>{\n\t        let trigger = false;\n\t        for (const entry of entries){\n\t            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n\t            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n\t        }\n\t        if (trigger) {\n\t            listener();\n\t        }\n\t    });\n\t    observer.observe(document, {\n\t        childList: true,\n\t        subtree: true\n\t    });\n\t    return observer;\n\t}\n\tconst drpListeningCharts = new Map();\n\tlet oldDevicePixelRatio = 0;\n\tfunction onWindowResize() {\n\t    const dpr = window.devicePixelRatio;\n\t    if (dpr === oldDevicePixelRatio) {\n\t        return;\n\t    }\n\t    oldDevicePixelRatio = dpr;\n\t    drpListeningCharts.forEach((resize, chart)=>{\n\t        if (chart.currentDevicePixelRatio !== dpr) {\n\t            resize();\n\t        }\n\t    });\n\t}\n\tfunction listenDevicePixelRatioChanges(chart, resize) {\n\t    if (!drpListeningCharts.size) {\n\t        window.addEventListener('resize', onWindowResize);\n\t    }\n\t    drpListeningCharts.set(chart, resize);\n\t}\n\tfunction unlistenDevicePixelRatioChanges(chart) {\n\t    drpListeningCharts.delete(chart);\n\t    if (!drpListeningCharts.size) {\n\t        window.removeEventListener('resize', onWindowResize);\n\t    }\n\t}\n\tfunction createResizeObserver(chart, type, listener) {\n\t    const canvas = chart.canvas;\n\t    const container = canvas && helpers_segment._getParentNode(canvas);\n\t    if (!container) {\n\t        return;\n\t    }\n\t    const resize = helpers_segment.throttled((width, height)=>{\n\t        const w = container.clientWidth;\n\t        listener(width, height);\n\t        if (w < container.clientWidth) {\n\t            listener();\n\t        }\n\t    }, window);\n\t    const observer = new ResizeObserver((entries)=>{\n\t        const entry = entries[0];\n\t        const width = entry.contentRect.width;\n\t        const height = entry.contentRect.height;\n\t        if (width === 0 && height === 0) {\n\t            return;\n\t        }\n\t        resize(width, height);\n\t    });\n\t    observer.observe(container);\n\t    listenDevicePixelRatioChanges(chart, resize);\n\t    return observer;\n\t}\n\tfunction releaseObserver(chart, type, observer) {\n\t    if (observer) {\n\t        observer.disconnect();\n\t    }\n\t    if (type === 'resize') {\n\t        unlistenDevicePixelRatioChanges(chart);\n\t    }\n\t}\n\tfunction createProxyAndListen(chart, type, listener) {\n\t    const canvas = chart.canvas;\n\t    const proxy = helpers_segment.throttled((event)=>{\n\t        if (chart.ctx !== null) {\n\t            listener(fromNativeEvent(event, chart));\n\t        }\n\t    }, chart);\n\t    addListener(canvas, type, proxy);\n\t    return proxy;\n\t}\n\t class DomPlatform extends BasePlatform {\n\t acquireContext(canvas, aspectRatio) {\n\t        const context = canvas && canvas.getContext && canvas.getContext('2d');\n\t        if (context && context.canvas === canvas) {\n\t            initCanvas(canvas, aspectRatio);\n\t            return context;\n\t        }\n\t        return null;\n\t    }\n\t releaseContext(context) {\n\t        const canvas = context.canvas;\n\t        if (!canvas[EXPANDO_KEY]) {\n\t            return false;\n\t        }\n\t        const initial = canvas[EXPANDO_KEY].initial;\n\t        [\n\t            'height',\n\t            'width'\n\t        ].forEach((prop)=>{\n\t            const value = initial[prop];\n\t            if (helpers_segment.isNullOrUndef(value)) {\n\t                canvas.removeAttribute(prop);\n\t            } else {\n\t                canvas.setAttribute(prop, value);\n\t            }\n\t        });\n\t        const style = initial.style || {};\n\t        Object.keys(style).forEach((key)=>{\n\t            canvas.style[key] = style[key];\n\t        });\n\t        canvas.width = canvas.width;\n\t        delete canvas[EXPANDO_KEY];\n\t        return true;\n\t    }\n\t addEventListener(chart, type, listener) {\n\t        this.removeEventListener(chart, type);\n\t        const proxies = chart.$proxies || (chart.$proxies = {});\n\t        const handlers = {\n\t            attach: createAttachObserver,\n\t            detach: createDetachObserver,\n\t            resize: createResizeObserver\n\t        };\n\t        const handler = handlers[type] || createProxyAndListen;\n\t        proxies[type] = handler(chart, type, listener);\n\t    }\n\t removeEventListener(chart, type) {\n\t        const proxies = chart.$proxies || (chart.$proxies = {});\n\t        const proxy = proxies[type];\n\t        if (!proxy) {\n\t            return;\n\t        }\n\t        const handlers = {\n\t            attach: releaseObserver,\n\t            detach: releaseObserver,\n\t            resize: releaseObserver\n\t        };\n\t        const handler = handlers[type] || removeListener;\n\t        handler(chart, type, proxy);\n\t        proxies[type] = undefined;\n\t    }\n\t    getDevicePixelRatio() {\n\t        return window.devicePixelRatio;\n\t    }\n\t getMaximumSize(canvas, width, height, aspectRatio) {\n\t        return helpers_segment.getMaximumSize(canvas, width, height, aspectRatio);\n\t    }\n\t isAttached(canvas) {\n\t        const container = canvas && helpers_segment._getParentNode(canvas);\n\t        return !!(container && container.isConnected);\n\t    }\n\t}\n\n\tfunction _detectPlatform(canvas) {\n\t    if (!helpers_segment._isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n\t        return BasicPlatform;\n\t    }\n\t    return DomPlatform;\n\t}\n\n\tclass Element {\n\t    static defaults = {};\n\t    static defaultRoutes = undefined;\n\t    x;\n\t    y;\n\t    active = false;\n\t    options;\n\t    $animations;\n\t    tooltipPosition(useFinalPosition) {\n\t        const { x , y  } = this.getProps([\n\t            'x',\n\t            'y'\n\t        ], useFinalPosition);\n\t        return {\n\t            x,\n\t            y\n\t        };\n\t    }\n\t    hasValue() {\n\t        return helpers_segment.isNumber(this.x) && helpers_segment.isNumber(this.y);\n\t    }\n\t    getProps(props, final) {\n\t        const anims = this.$animations;\n\t        if (!final || !anims) {\n\t            // let's not create an object, if not needed\n\t            return this;\n\t        }\n\t        const ret = {};\n\t        props.forEach((prop)=>{\n\t            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n\t        });\n\t        return ret;\n\t    }\n\t}\n\n\tfunction autoSkip(scale, ticks) {\n\t    const tickOpts = scale.options.ticks;\n\t    const determinedMaxTicks = determineMaxTicks(scale);\n\t    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n\t    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n\t    const numMajorIndices = majorIndices.length;\n\t    const first = majorIndices[0];\n\t    const last = majorIndices[numMajorIndices - 1];\n\t    const newTicks = [];\n\t    if (numMajorIndices > ticksLimit) {\n\t        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n\t        return newTicks;\n\t    }\n\t    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\t    if (numMajorIndices > 0) {\n\t        let i, ilen;\n\t        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n\t        skip(ticks, newTicks, spacing, helpers_segment.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\t        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n\t            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n\t        }\n\t        skip(ticks, newTicks, spacing, last, helpers_segment.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n\t        return newTicks;\n\t    }\n\t    skip(ticks, newTicks, spacing);\n\t    return newTicks;\n\t}\n\tfunction determineMaxTicks(scale) {\n\t    const offset = scale.options.offset;\n\t    const tickLength = scale._tickSize();\n\t    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n\t    const maxChart = scale._maxLength / tickLength;\n\t    return Math.floor(Math.min(maxScale, maxChart));\n\t}\n\t function calculateSpacing(majorIndices, ticks, ticksLimit) {\n\t    const evenMajorSpacing = getEvenSpacing(majorIndices);\n\t    const spacing = ticks.length / ticksLimit;\n\t    if (!evenMajorSpacing) {\n\t        return Math.max(spacing, 1);\n\t    }\n\t    const factors = helpers_segment._factorize(evenMajorSpacing);\n\t    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n\t        const factor = factors[i];\n\t        if (factor > spacing) {\n\t            return factor;\n\t        }\n\t    }\n\t    return Math.max(spacing, 1);\n\t}\n\t function getMajorIndices(ticks) {\n\t    const result = [];\n\t    let i, ilen;\n\t    for(i = 0, ilen = ticks.length; i < ilen; i++){\n\t        if (ticks[i].major) {\n\t            result.push(i);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t function skipMajors(ticks, newTicks, majorIndices, spacing) {\n\t    let count = 0;\n\t    let next = majorIndices[0];\n\t    let i;\n\t    spacing = Math.ceil(spacing);\n\t    for(i = 0; i < ticks.length; i++){\n\t        if (i === next) {\n\t            newTicks.push(ticks[i]);\n\t            count++;\n\t            next = majorIndices[count * spacing];\n\t        }\n\t    }\n\t}\n\t function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n\t    const start = helpers_segment.valueOrDefault(majorStart, 0);\n\t    const end = Math.min(helpers_segment.valueOrDefault(majorEnd, ticks.length), ticks.length);\n\t    let count = 0;\n\t    let length, i, next;\n\t    spacing = Math.ceil(spacing);\n\t    if (majorEnd) {\n\t        length = majorEnd - majorStart;\n\t        spacing = length / Math.floor(length / spacing);\n\t    }\n\t    next = start;\n\t    while(next < 0){\n\t        count++;\n\t        next = Math.round(start + count * spacing);\n\t    }\n\t    for(i = Math.max(start, 0); i < end; i++){\n\t        if (i === next) {\n\t            newTicks.push(ticks[i]);\n\t            count++;\n\t            next = Math.round(start + count * spacing);\n\t        }\n\t    }\n\t}\n\t function getEvenSpacing(arr) {\n\t    const len = arr.length;\n\t    let i, diff;\n\t    if (len < 2) {\n\t        return false;\n\t    }\n\t    for(diff = arr[0], i = 1; i < len; ++i){\n\t        if (arr[i] - arr[i - 1] !== diff) {\n\t            return false;\n\t        }\n\t    }\n\t    return diff;\n\t}\n\n\tconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\tconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\tconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n\t function sample(arr, numItems) {\n\t    const result = [];\n\t    const increment = arr.length / numItems;\n\t    const len = arr.length;\n\t    let i = 0;\n\t    for(; i < len; i += increment){\n\t        result.push(arr[Math.floor(i)]);\n\t    }\n\t    return result;\n\t}\n\t function getPixelForGridLine(scale, index, offsetGridLines) {\n\t    const length = scale.ticks.length;\n\t    const validIndex = Math.min(index, length - 1);\n\t    const start = scale._startPixel;\n\t    const end = scale._endPixel;\n\t    const epsilon = 1e-6;\n\t    let lineValue = scale.getPixelForTick(validIndex);\n\t    let offset;\n\t    if (offsetGridLines) {\n\t        if (length === 1) {\n\t            offset = Math.max(lineValue - start, end - lineValue);\n\t        } else if (index === 0) {\n\t            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n\t        } else {\n\t            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n\t        }\n\t        lineValue += validIndex < index ? offset : -offset;\n\t        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n\t            return;\n\t        }\n\t    }\n\t    return lineValue;\n\t}\n\t function garbageCollect(caches, length) {\n\t    helpers_segment.each(caches, (cache)=>{\n\t        const gc = cache.gc;\n\t        const gcLen = gc.length / 2;\n\t        let i;\n\t        if (gcLen > length) {\n\t            for(i = 0; i < gcLen; ++i){\n\t                delete cache.data[gc[i]];\n\t            }\n\t            gc.splice(0, gcLen);\n\t        }\n\t    });\n\t}\n\t function getTickMarkLength(options) {\n\t    return options.drawTicks ? options.tickLength : 0;\n\t}\n\t function getTitleHeight(options, fallback) {\n\t    if (!options.display) {\n\t        return 0;\n\t    }\n\t    const font = helpers_segment.toFont(options.font, fallback);\n\t    const padding = helpers_segment.toPadding(options.padding);\n\t    const lines = helpers_segment.isArray(options.text) ? options.text.length : 1;\n\t    return lines * font.lineHeight + padding.height;\n\t}\n\tfunction createScaleContext(parent, scale) {\n\t    return helpers_segment.createContext(parent, {\n\t        scale,\n\t        type: 'scale'\n\t    });\n\t}\n\tfunction createTickContext(parent, index, tick) {\n\t    return helpers_segment.createContext(parent, {\n\t        tick,\n\t        index,\n\t        type: 'tick'\n\t    });\n\t}\n\tfunction titleAlign(align, position, reverse) {\n\t     let ret = helpers_segment._toLeftRightCenter(align);\n\t    if (reverse && position !== 'right' || !reverse && position === 'right') {\n\t        ret = reverseAlign(ret);\n\t    }\n\t    return ret;\n\t}\n\tfunction titleArgs(scale, offset, position, align) {\n\t    const { top , left , bottom , right , chart  } = scale;\n\t    const { chartArea , scales  } = chart;\n\t    let rotation = 0;\n\t    let maxWidth, titleX, titleY;\n\t    const height = bottom - top;\n\t    const width = right - left;\n\t    if (scale.isHorizontal()) {\n\t        titleX = helpers_segment._alignStartEnd(align, left, right);\n\t        if (helpers_segment.isObject(position)) {\n\t            const positionAxisID = Object.keys(position)[0];\n\t            const value = position[positionAxisID];\n\t            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n\t        } else if (position === 'center') {\n\t            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n\t        } else {\n\t            titleY = offsetFromEdge(scale, position, offset);\n\t        }\n\t        maxWidth = right - left;\n\t    } else {\n\t        if (helpers_segment.isObject(position)) {\n\t            const positionAxisID = Object.keys(position)[0];\n\t            const value = position[positionAxisID];\n\t            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n\t        } else if (position === 'center') {\n\t            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n\t        } else {\n\t            titleX = offsetFromEdge(scale, position, offset);\n\t        }\n\t        titleY = helpers_segment._alignStartEnd(align, bottom, top);\n\t        rotation = position === 'left' ? -helpers_segment.HALF_PI : helpers_segment.HALF_PI;\n\t    }\n\t    return {\n\t        titleX,\n\t        titleY,\n\t        maxWidth,\n\t        rotation\n\t    };\n\t}\n\tclass Scale extends Element {\n\t    constructor(cfg){\n\t        super();\n\t         this.id = cfg.id;\n\t         this.type = cfg.type;\n\t         this.options = undefined;\n\t         this.ctx = cfg.ctx;\n\t         this.chart = cfg.chart;\n\t         this.top = undefined;\n\t         this.bottom = undefined;\n\t         this.left = undefined;\n\t         this.right = undefined;\n\t         this.width = undefined;\n\t         this.height = undefined;\n\t        this._margins = {\n\t            left: 0,\n\t            right: 0,\n\t            top: 0,\n\t            bottom: 0\n\t        };\n\t         this.maxWidth = undefined;\n\t         this.maxHeight = undefined;\n\t         this.paddingTop = undefined;\n\t         this.paddingBottom = undefined;\n\t         this.paddingLeft = undefined;\n\t         this.paddingRight = undefined;\n\t         this.axis = undefined;\n\t         this.labelRotation = undefined;\n\t        this.min = undefined;\n\t        this.max = undefined;\n\t        this._range = undefined;\n\t         this.ticks = [];\n\t         this._gridLineItems = null;\n\t         this._labelItems = null;\n\t         this._labelSizes = null;\n\t        this._length = 0;\n\t        this._maxLength = 0;\n\t        this._longestTextCache = {};\n\t         this._startPixel = undefined;\n\t         this._endPixel = undefined;\n\t        this._reversePixels = false;\n\t        this._userMax = undefined;\n\t        this._userMin = undefined;\n\t        this._suggestedMax = undefined;\n\t        this._suggestedMin = undefined;\n\t        this._ticksLength = 0;\n\t        this._borderValue = 0;\n\t        this._cache = {};\n\t        this._dataLimitsCached = false;\n\t        this.$context = undefined;\n\t    }\n\t init(options) {\n\t        this.options = options.setContext(this.getContext());\n\t        this.axis = options.axis;\n\t        this._userMin = this.parse(options.min);\n\t        this._userMax = this.parse(options.max);\n\t        this._suggestedMin = this.parse(options.suggestedMin);\n\t        this._suggestedMax = this.parse(options.suggestedMax);\n\t    }\n\t parse(raw, index) {\n\t        return raw;\n\t    }\n\t getUserBounds() {\n\t        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n\t        _userMin = helpers_segment.finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n\t        _userMax = helpers_segment.finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n\t        _suggestedMin = helpers_segment.finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n\t        _suggestedMax = helpers_segment.finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n\t        return {\n\t            min: helpers_segment.finiteOrDefault(_userMin, _suggestedMin),\n\t            max: helpers_segment.finiteOrDefault(_userMax, _suggestedMax),\n\t            minDefined: helpers_segment.isNumberFinite(_userMin),\n\t            maxDefined: helpers_segment.isNumberFinite(_userMax)\n\t        };\n\t    }\n\t getMinMax(canStack) {\n\t        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n\t        let range;\n\t        if (minDefined && maxDefined) {\n\t            return {\n\t                min,\n\t                max\n\t            };\n\t        }\n\t        const metas = this.getMatchingVisibleMetas();\n\t        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n\t            range = metas[i].controller.getMinMax(this, canStack);\n\t            if (!minDefined) {\n\t                min = Math.min(min, range.min);\n\t            }\n\t            if (!maxDefined) {\n\t                max = Math.max(max, range.max);\n\t            }\n\t        }\n\t        min = maxDefined && min > max ? max : min;\n\t        max = minDefined && min > max ? min : max;\n\t        return {\n\t            min: helpers_segment.finiteOrDefault(min, helpers_segment.finiteOrDefault(max, min)),\n\t            max: helpers_segment.finiteOrDefault(max, helpers_segment.finiteOrDefault(min, max))\n\t        };\n\t    }\n\t getPadding() {\n\t        return {\n\t            left: this.paddingLeft || 0,\n\t            top: this.paddingTop || 0,\n\t            right: this.paddingRight || 0,\n\t            bottom: this.paddingBottom || 0\n\t        };\n\t    }\n\t getTicks() {\n\t        return this.ticks;\n\t    }\n\t getLabels() {\n\t        const data = this.chart.data;\n\t        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n\t    }\n\t getLabelItems(chartArea = this.chart.chartArea) {\n\t        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\t        return items;\n\t    }\n\t    beforeLayout() {\n\t        this._cache = {};\n\t        this._dataLimitsCached = false;\n\t    }\n\t    beforeUpdate() {\n\t        helpers_segment.callback(this.options.beforeUpdate, [\n\t            this\n\t        ]);\n\t    }\n\t update(maxWidth, maxHeight, margins) {\n\t        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n\t        const sampleSize = tickOpts.sampleSize;\n\t        this.beforeUpdate();\n\t        this.maxWidth = maxWidth;\n\t        this.maxHeight = maxHeight;\n\t        this._margins = margins = Object.assign({\n\t            left: 0,\n\t            right: 0,\n\t            top: 0,\n\t            bottom: 0\n\t        }, margins);\n\t        this.ticks = null;\n\t        this._labelSizes = null;\n\t        this._gridLineItems = null;\n\t        this._labelItems = null;\n\t        this.beforeSetDimensions();\n\t        this.setDimensions();\n\t        this.afterSetDimensions();\n\t        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\t        if (!this._dataLimitsCached) {\n\t            this.beforeDataLimits();\n\t            this.determineDataLimits();\n\t            this.afterDataLimits();\n\t            this._range = helpers_segment._addGrace(this, grace, beginAtZero);\n\t            this._dataLimitsCached = true;\n\t        }\n\t        this.beforeBuildTicks();\n\t        this.ticks = this.buildTicks() || [];\n\t        this.afterBuildTicks();\n\t        const samplingEnabled = sampleSize < this.ticks.length;\n\t        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\t        this.configure();\n\t        this.beforeCalculateLabelRotation();\n\t        this.calculateLabelRotation();\n\t        this.afterCalculateLabelRotation();\n\t        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n\t            this.ticks = autoSkip(this, this.ticks);\n\t            this._labelSizes = null;\n\t            this.afterAutoSkip();\n\t        }\n\t        if (samplingEnabled) {\n\t            this._convertTicksToLabels(this.ticks);\n\t        }\n\t        this.beforeFit();\n\t        this.fit();\n\t        this.afterFit();\n\t        this.afterUpdate();\n\t    }\n\t configure() {\n\t        let reversePixels = this.options.reverse;\n\t        let startPixel, endPixel;\n\t        if (this.isHorizontal()) {\n\t            startPixel = this.left;\n\t            endPixel = this.right;\n\t        } else {\n\t            startPixel = this.top;\n\t            endPixel = this.bottom;\n\t            reversePixels = !reversePixels;\n\t        }\n\t        this._startPixel = startPixel;\n\t        this._endPixel = endPixel;\n\t        this._reversePixels = reversePixels;\n\t        this._length = endPixel - startPixel;\n\t        this._alignToPixels = this.options.alignToPixels;\n\t    }\n\t    afterUpdate() {\n\t        helpers_segment.callback(this.options.afterUpdate, [\n\t            this\n\t        ]);\n\t    }\n\t    beforeSetDimensions() {\n\t        helpers_segment.callback(this.options.beforeSetDimensions, [\n\t            this\n\t        ]);\n\t    }\n\t    setDimensions() {\n\t        if (this.isHorizontal()) {\n\t            this.width = this.maxWidth;\n\t            this.left = 0;\n\t            this.right = this.width;\n\t        } else {\n\t            this.height = this.maxHeight;\n\t            this.top = 0;\n\t            this.bottom = this.height;\n\t        }\n\t        this.paddingLeft = 0;\n\t        this.paddingTop = 0;\n\t        this.paddingRight = 0;\n\t        this.paddingBottom = 0;\n\t    }\n\t    afterSetDimensions() {\n\t        helpers_segment.callback(this.options.afterSetDimensions, [\n\t            this\n\t        ]);\n\t    }\n\t    _callHooks(name) {\n\t        this.chart.notifyPlugins(name, this.getContext());\n\t        helpers_segment.callback(this.options[name], [\n\t            this\n\t        ]);\n\t    }\n\t    beforeDataLimits() {\n\t        this._callHooks('beforeDataLimits');\n\t    }\n\t    determineDataLimits() {}\n\t    afterDataLimits() {\n\t        this._callHooks('afterDataLimits');\n\t    }\n\t    beforeBuildTicks() {\n\t        this._callHooks('beforeBuildTicks');\n\t    }\n\t buildTicks() {\n\t        return [];\n\t    }\n\t    afterBuildTicks() {\n\t        this._callHooks('afterBuildTicks');\n\t    }\n\t    beforeTickToLabelConversion() {\n\t        helpers_segment.callback(this.options.beforeTickToLabelConversion, [\n\t            this\n\t        ]);\n\t    }\n\t generateTickLabels(ticks) {\n\t        const tickOpts = this.options.ticks;\n\t        let i, ilen, tick;\n\t        for(i = 0, ilen = ticks.length; i < ilen; i++){\n\t            tick = ticks[i];\n\t            tick.label = helpers_segment.callback(tickOpts.callback, [\n\t                tick.value,\n\t                i,\n\t                ticks\n\t            ], this);\n\t        }\n\t    }\n\t    afterTickToLabelConversion() {\n\t        helpers_segment.callback(this.options.afterTickToLabelConversion, [\n\t            this\n\t        ]);\n\t    }\n\t    beforeCalculateLabelRotation() {\n\t        helpers_segment.callback(this.options.beforeCalculateLabelRotation, [\n\t            this\n\t        ]);\n\t    }\n\t    calculateLabelRotation() {\n\t        const options = this.options;\n\t        const tickOpts = options.ticks;\n\t        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n\t        const minRotation = tickOpts.minRotation || 0;\n\t        const maxRotation = tickOpts.maxRotation;\n\t        let labelRotation = minRotation;\n\t        let tickWidth, maxHeight, maxLabelDiagonal;\n\t        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n\t            this.labelRotation = minRotation;\n\t            return;\n\t        }\n\t        const labelSizes = this._getLabelSizes();\n\t        const maxLabelWidth = labelSizes.widest.width;\n\t        const maxLabelHeight = labelSizes.highest.height;\n\t        const maxWidth = helpers_segment._limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\t        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\t        if (maxLabelWidth + 6 > tickWidth) {\n\t            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n\t            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n\t            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n\t            labelRotation = helpers_segment.toDegrees(Math.min(Math.asin(helpers_segment._limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(helpers_segment._limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(helpers_segment._limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n\t            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n\t        }\n\t        this.labelRotation = labelRotation;\n\t    }\n\t    afterCalculateLabelRotation() {\n\t        helpers_segment.callback(this.options.afterCalculateLabelRotation, [\n\t            this\n\t        ]);\n\t    }\n\t    afterAutoSkip() {}\n\t    beforeFit() {\n\t        helpers_segment.callback(this.options.beforeFit, [\n\t            this\n\t        ]);\n\t    }\n\t    fit() {\n\t        const minSize = {\n\t            width: 0,\n\t            height: 0\n\t        };\n\t        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n\t        const display = this._isVisible();\n\t        const isHorizontal = this.isHorizontal();\n\t        if (display) {\n\t            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\t            if (isHorizontal) {\n\t                minSize.width = this.maxWidth;\n\t                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n\t            } else {\n\t                minSize.height = this.maxHeight;\n\t                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n\t            }\n\t            if (tickOpts.display && this.ticks.length) {\n\t                const { first , last , widest , highest  } = this._getLabelSizes();\n\t                const tickPadding = tickOpts.padding * 2;\n\t                const angleRadians = helpers_segment.toRadians(this.labelRotation);\n\t                const cos = Math.cos(angleRadians);\n\t                const sin = Math.sin(angleRadians);\n\t                if (isHorizontal) {\n\t                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n\t                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n\t                } else {\n\t                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\t                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n\t                }\n\t                this._calculatePadding(first, last, sin, cos);\n\t            }\n\t        }\n\t        this._handleMargins();\n\t        if (isHorizontal) {\n\t            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n\t            this.height = minSize.height;\n\t        } else {\n\t            this.width = minSize.width;\n\t            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n\t        }\n\t    }\n\t    _calculatePadding(first, last, sin, cos) {\n\t        const { ticks: { align , padding  } , position  } = this.options;\n\t        const isRotated = this.labelRotation !== 0;\n\t        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\t        if (this.isHorizontal()) {\n\t            const offsetLeft = this.getPixelForTick(0) - this.left;\n\t            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n\t            let paddingLeft = 0;\n\t            let paddingRight = 0;\n\t            if (isRotated) {\n\t                if (labelsBelowTicks) {\n\t                    paddingLeft = cos * first.width;\n\t                    paddingRight = sin * last.height;\n\t                } else {\n\t                    paddingLeft = sin * first.height;\n\t                    paddingRight = cos * last.width;\n\t                }\n\t            } else if (align === 'start') {\n\t                paddingRight = last.width;\n\t            } else if (align === 'end') {\n\t                paddingLeft = first.width;\n\t            } else if (align !== 'inner') {\n\t                paddingLeft = first.width / 2;\n\t                paddingRight = last.width / 2;\n\t            }\n\t            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n\t            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n\t        } else {\n\t            let paddingTop = last.height / 2;\n\t            let paddingBottom = first.height / 2;\n\t            if (align === 'start') {\n\t                paddingTop = 0;\n\t                paddingBottom = first.height;\n\t            } else if (align === 'end') {\n\t                paddingTop = last.height;\n\t                paddingBottom = 0;\n\t            }\n\t            this.paddingTop = paddingTop + padding;\n\t            this.paddingBottom = paddingBottom + padding;\n\t        }\n\t    }\n\t _handleMargins() {\n\t        if (this._margins) {\n\t            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n\t            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n\t            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n\t            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n\t        }\n\t    }\n\t    afterFit() {\n\t        helpers_segment.callback(this.options.afterFit, [\n\t            this\n\t        ]);\n\t    }\n\t isHorizontal() {\n\t        const { axis , position  } = this.options;\n\t        return position === 'top' || position === 'bottom' || axis === 'x';\n\t    }\n\t isFullSize() {\n\t        return this.options.fullSize;\n\t    }\n\t _convertTicksToLabels(ticks) {\n\t        this.beforeTickToLabelConversion();\n\t        this.generateTickLabels(ticks);\n\t        let i, ilen;\n\t        for(i = 0, ilen = ticks.length; i < ilen; i++){\n\t            if (helpers_segment.isNullOrUndef(ticks[i].label)) {\n\t                ticks.splice(i, 1);\n\t                ilen--;\n\t                i--;\n\t            }\n\t        }\n\t        this.afterTickToLabelConversion();\n\t    }\n\t _getLabelSizes() {\n\t        let labelSizes = this._labelSizes;\n\t        if (!labelSizes) {\n\t            const sampleSize = this.options.ticks.sampleSize;\n\t            let ticks = this.ticks;\n\t            if (sampleSize < ticks.length) {\n\t                ticks = sample(ticks, sampleSize);\n\t            }\n\t            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n\t        }\n\t        return labelSizes;\n\t    }\n\t _computeLabelSizes(ticks, length, maxTicksLimit) {\n\t        const { ctx , _longestTextCache: caches  } = this;\n\t        const widths = [];\n\t        const heights = [];\n\t        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n\t        let widestLabelSize = 0;\n\t        let highestLabelSize = 0;\n\t        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\t        for(i = 0; i < length; i += increment){\n\t            label = ticks[i].label;\n\t            tickFont = this._resolveTickFontOptions(i);\n\t            ctx.font = fontString = tickFont.string;\n\t            cache = caches[fontString] = caches[fontString] || {\n\t                data: {},\n\t                gc: []\n\t            };\n\t            lineHeight = tickFont.lineHeight;\n\t            width = height = 0;\n\t            if (!helpers_segment.isNullOrUndef(label) && !helpers_segment.isArray(label)) {\n\t                width = helpers_segment._measureText(ctx, cache.data, cache.gc, width, label);\n\t                height = lineHeight;\n\t            } else if (helpers_segment.isArray(label)) {\n\t                for(j = 0, jlen = label.length; j < jlen; ++j){\n\t                    nestedLabel =  label[j];\n\t                    if (!helpers_segment.isNullOrUndef(nestedLabel) && !helpers_segment.isArray(nestedLabel)) {\n\t                        width = helpers_segment._measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n\t                        height += lineHeight;\n\t                    }\n\t                }\n\t            }\n\t            widths.push(width);\n\t            heights.push(height);\n\t            widestLabelSize = Math.max(width, widestLabelSize);\n\t            highestLabelSize = Math.max(height, highestLabelSize);\n\t        }\n\t        garbageCollect(caches, length);\n\t        const widest = widths.indexOf(widestLabelSize);\n\t        const highest = heights.indexOf(highestLabelSize);\n\t        const valueAt = (idx)=>({\n\t                width: widths[idx] || 0,\n\t                height: heights[idx] || 0\n\t            });\n\t        return {\n\t            first: valueAt(0),\n\t            last: valueAt(length - 1),\n\t            widest: valueAt(widest),\n\t            highest: valueAt(highest),\n\t            widths,\n\t            heights\n\t        };\n\t    }\n\t getLabelForValue(value) {\n\t        return value;\n\t    }\n\t getPixelForValue(value, index) {\n\t        return NaN;\n\t    }\n\t getValueForPixel(pixel) {}\n\t getPixelForTick(index) {\n\t        const ticks = this.ticks;\n\t        if (index < 0 || index > ticks.length - 1) {\n\t            return null;\n\t        }\n\t        return this.getPixelForValue(ticks[index].value);\n\t    }\n\t getPixelForDecimal(decimal) {\n\t        if (this._reversePixels) {\n\t            decimal = 1 - decimal;\n\t        }\n\t        const pixel = this._startPixel + decimal * this._length;\n\t        return helpers_segment._int16Range(this._alignToPixels ? helpers_segment._alignPixel(this.chart, pixel, 0) : pixel);\n\t    }\n\t getDecimalForPixel(pixel) {\n\t        const decimal = (pixel - this._startPixel) / this._length;\n\t        return this._reversePixels ? 1 - decimal : decimal;\n\t    }\n\t getBasePixel() {\n\t        return this.getPixelForValue(this.getBaseValue());\n\t    }\n\t getBaseValue() {\n\t        const { min , max  } = this;\n\t        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n\t    }\n\t getContext(index) {\n\t        const ticks = this.ticks || [];\n\t        if (index >= 0 && index < ticks.length) {\n\t            const tick = ticks[index];\n\t            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n\t        }\n\t        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n\t    }\n\t _tickSize() {\n\t        const optionTicks = this.options.ticks;\n\t        const rot = helpers_segment.toRadians(this.labelRotation);\n\t        const cos = Math.abs(Math.cos(rot));\n\t        const sin = Math.abs(Math.sin(rot));\n\t        const labelSizes = this._getLabelSizes();\n\t        const padding = optionTicks.autoSkipPadding || 0;\n\t        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n\t        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\t        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n\t    }\n\t _isVisible() {\n\t        const display = this.options.display;\n\t        if (display !== 'auto') {\n\t            return !!display;\n\t        }\n\t        return this.getMatchingVisibleMetas().length > 0;\n\t    }\n\t _computeGridLineItems(chartArea) {\n\t        const axis = this.axis;\n\t        const chart = this.chart;\n\t        const options = this.options;\n\t        const { grid , position , border  } = options;\n\t        const offset = grid.offset;\n\t        const isHorizontal = this.isHorizontal();\n\t        const ticks = this.ticks;\n\t        const ticksLength = ticks.length + (offset ? 1 : 0);\n\t        const tl = getTickMarkLength(grid);\n\t        const items = [];\n\t        const borderOpts = border.setContext(this.getContext());\n\t        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n\t        const axisHalfWidth = axisWidth / 2;\n\t        const alignBorderValue = function(pixel) {\n\t            return helpers_segment._alignPixel(chart, pixel, axisWidth);\n\t        };\n\t        let borderValue, i, lineValue, alignedLineValue;\n\t        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\t        if (position === 'top') {\n\t            borderValue = alignBorderValue(this.bottom);\n\t            ty1 = this.bottom - tl;\n\t            ty2 = borderValue - axisHalfWidth;\n\t            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n\t            y2 = chartArea.bottom;\n\t        } else if (position === 'bottom') {\n\t            borderValue = alignBorderValue(this.top);\n\t            y1 = chartArea.top;\n\t            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n\t            ty1 = borderValue + axisHalfWidth;\n\t            ty2 = this.top + tl;\n\t        } else if (position === 'left') {\n\t            borderValue = alignBorderValue(this.right);\n\t            tx1 = this.right - tl;\n\t            tx2 = borderValue - axisHalfWidth;\n\t            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n\t            x2 = chartArea.right;\n\t        } else if (position === 'right') {\n\t            borderValue = alignBorderValue(this.left);\n\t            x1 = chartArea.left;\n\t            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n\t            tx1 = borderValue + axisHalfWidth;\n\t            tx2 = this.left + tl;\n\t        } else if (axis === 'x') {\n\t            if (position === 'center') {\n\t                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n\t            } else if (helpers_segment.isObject(position)) {\n\t                const positionAxisID = Object.keys(position)[0];\n\t                const value = position[positionAxisID];\n\t                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n\t            }\n\t            y1 = chartArea.top;\n\t            y2 = chartArea.bottom;\n\t            ty1 = borderValue + axisHalfWidth;\n\t            ty2 = ty1 + tl;\n\t        } else if (axis === 'y') {\n\t            if (position === 'center') {\n\t                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n\t            } else if (helpers_segment.isObject(position)) {\n\t                const positionAxisID = Object.keys(position)[0];\n\t                const value = position[positionAxisID];\n\t                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n\t            }\n\t            tx1 = borderValue - axisHalfWidth;\n\t            tx2 = tx1 - tl;\n\t            x1 = chartArea.left;\n\t            x2 = chartArea.right;\n\t        }\n\t        const limit = helpers_segment.valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n\t        const step = Math.max(1, Math.ceil(ticksLength / limit));\n\t        for(i = 0; i < ticksLength; i += step){\n\t            const context = this.getContext(i);\n\t            const optsAtIndex = grid.setContext(context);\n\t            const optsAtIndexBorder = border.setContext(context);\n\t            const lineWidth = optsAtIndex.lineWidth;\n\t            const lineColor = optsAtIndex.color;\n\t            const borderDash = optsAtIndexBorder.dash || [];\n\t            const borderDashOffset = optsAtIndexBorder.dashOffset;\n\t            const tickWidth = optsAtIndex.tickWidth;\n\t            const tickColor = optsAtIndex.tickColor;\n\t            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n\t            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\t            lineValue = getPixelForGridLine(this, i, offset);\n\t            if (lineValue === undefined) {\n\t                continue;\n\t            }\n\t            alignedLineValue = helpers_segment._alignPixel(chart, lineValue, lineWidth);\n\t            if (isHorizontal) {\n\t                tx1 = tx2 = x1 = x2 = alignedLineValue;\n\t            } else {\n\t                ty1 = ty2 = y1 = y2 = alignedLineValue;\n\t            }\n\t            items.push({\n\t                tx1,\n\t                ty1,\n\t                tx2,\n\t                ty2,\n\t                x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                width: lineWidth,\n\t                color: lineColor,\n\t                borderDash,\n\t                borderDashOffset,\n\t                tickWidth,\n\t                tickColor,\n\t                tickBorderDash,\n\t                tickBorderDashOffset\n\t            });\n\t        }\n\t        this._ticksLength = ticksLength;\n\t        this._borderValue = borderValue;\n\t        return items;\n\t    }\n\t _computeLabelItems(chartArea) {\n\t        const axis = this.axis;\n\t        const options = this.options;\n\t        const { position , ticks: optionTicks  } = options;\n\t        const isHorizontal = this.isHorizontal();\n\t        const ticks = this.ticks;\n\t        const { align , crossAlign , padding , mirror  } = optionTicks;\n\t        const tl = getTickMarkLength(options.grid);\n\t        const tickAndPadding = tl + padding;\n\t        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n\t        const rotation = -helpers_segment.toRadians(this.labelRotation);\n\t        const items = [];\n\t        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n\t        let textBaseline = 'middle';\n\t        if (position === 'top') {\n\t            y = this.bottom - hTickAndPadding;\n\t            textAlign = this._getXAxisLabelAlignment();\n\t        } else if (position === 'bottom') {\n\t            y = this.top + hTickAndPadding;\n\t            textAlign = this._getXAxisLabelAlignment();\n\t        } else if (position === 'left') {\n\t            const ret = this._getYAxisLabelAlignment(tl);\n\t            textAlign = ret.textAlign;\n\t            x = ret.x;\n\t        } else if (position === 'right') {\n\t            const ret = this._getYAxisLabelAlignment(tl);\n\t            textAlign = ret.textAlign;\n\t            x = ret.x;\n\t        } else if (axis === 'x') {\n\t            if (position === 'center') {\n\t                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n\t            } else if (helpers_segment.isObject(position)) {\n\t                const positionAxisID = Object.keys(position)[0];\n\t                const value = position[positionAxisID];\n\t                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n\t            }\n\t            textAlign = this._getXAxisLabelAlignment();\n\t        } else if (axis === 'y') {\n\t            if (position === 'center') {\n\t                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n\t            } else if (helpers_segment.isObject(position)) {\n\t                const positionAxisID = Object.keys(position)[0];\n\t                const value = position[positionAxisID];\n\t                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n\t            }\n\t            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n\t        }\n\t        if (axis === 'y') {\n\t            if (align === 'start') {\n\t                textBaseline = 'top';\n\t            } else if (align === 'end') {\n\t                textBaseline = 'bottom';\n\t            }\n\t        }\n\t        const labelSizes = this._getLabelSizes();\n\t        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n\t            tick = ticks[i];\n\t            label = tick.label;\n\t            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n\t            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n\t            font = this._resolveTickFontOptions(i);\n\t            lineHeight = font.lineHeight;\n\t            lineCount = helpers_segment.isArray(label) ? label.length : 1;\n\t            const halfCount = lineCount / 2;\n\t            const color = optsAtIndex.color;\n\t            const strokeColor = optsAtIndex.textStrokeColor;\n\t            const strokeWidth = optsAtIndex.textStrokeWidth;\n\t            let tickTextAlign = textAlign;\n\t            if (isHorizontal) {\n\t                x = pixel;\n\t                if (textAlign === 'inner') {\n\t                    if (i === ilen - 1) {\n\t                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n\t                    } else if (i === 0) {\n\t                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n\t                    } else {\n\t                        tickTextAlign = 'center';\n\t                    }\n\t                }\n\t                if (position === 'top') {\n\t                    if (crossAlign === 'near' || rotation !== 0) {\n\t                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n\t                    } else if (crossAlign === 'center') {\n\t                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n\t                    } else {\n\t                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n\t                    }\n\t                } else {\n\t                    if (crossAlign === 'near' || rotation !== 0) {\n\t                        textOffset = lineHeight / 2;\n\t                    } else if (crossAlign === 'center') {\n\t                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n\t                    } else {\n\t                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n\t                    }\n\t                }\n\t                if (mirror) {\n\t                    textOffset *= -1;\n\t                }\n\t                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n\t                    x += lineHeight / 2 * Math.sin(rotation);\n\t                }\n\t            } else {\n\t                y = pixel;\n\t                textOffset = (1 - lineCount) * lineHeight / 2;\n\t            }\n\t            let backdrop;\n\t            if (optsAtIndex.showLabelBackdrop) {\n\t                const labelPadding = helpers_segment.toPadding(optsAtIndex.backdropPadding);\n\t                const height = labelSizes.heights[i];\n\t                const width = labelSizes.widths[i];\n\t                let top = textOffset - labelPadding.top;\n\t                let left = 0 - labelPadding.left;\n\t                switch(textBaseline){\n\t                    case 'middle':\n\t                        top -= height / 2;\n\t                        break;\n\t                    case 'bottom':\n\t                        top -= height;\n\t                        break;\n\t                }\n\t                switch(textAlign){\n\t                    case 'center':\n\t                        left -= width / 2;\n\t                        break;\n\t                    case 'right':\n\t                        left -= width;\n\t                        break;\n\t                    case 'inner':\n\t                        if (i === ilen - 1) {\n\t                            left -= width;\n\t                        } else if (i > 0) {\n\t                            left -= width / 2;\n\t                        }\n\t                        break;\n\t                }\n\t                backdrop = {\n\t                    left,\n\t                    top,\n\t                    width: width + labelPadding.width,\n\t                    height: height + labelPadding.height,\n\t                    color: optsAtIndex.backdropColor\n\t                };\n\t            }\n\t            items.push({\n\t                label,\n\t                font,\n\t                textOffset,\n\t                options: {\n\t                    rotation,\n\t                    color,\n\t                    strokeColor,\n\t                    strokeWidth,\n\t                    textAlign: tickTextAlign,\n\t                    textBaseline,\n\t                    translation: [\n\t                        x,\n\t                        y\n\t                    ],\n\t                    backdrop\n\t                }\n\t            });\n\t        }\n\t        return items;\n\t    }\n\t    _getXAxisLabelAlignment() {\n\t        const { position , ticks  } = this.options;\n\t        const rotation = -helpers_segment.toRadians(this.labelRotation);\n\t        if (rotation) {\n\t            return position === 'top' ? 'left' : 'right';\n\t        }\n\t        let align = 'center';\n\t        if (ticks.align === 'start') {\n\t            align = 'left';\n\t        } else if (ticks.align === 'end') {\n\t            align = 'right';\n\t        } else if (ticks.align === 'inner') {\n\t            align = 'inner';\n\t        }\n\t        return align;\n\t    }\n\t    _getYAxisLabelAlignment(tl) {\n\t        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n\t        const labelSizes = this._getLabelSizes();\n\t        const tickAndPadding = tl + padding;\n\t        const widest = labelSizes.widest.width;\n\t        let textAlign;\n\t        let x;\n\t        if (position === 'left') {\n\t            if (mirror) {\n\t                x = this.right + padding;\n\t                if (crossAlign === 'near') {\n\t                    textAlign = 'left';\n\t                } else if (crossAlign === 'center') {\n\t                    textAlign = 'center';\n\t                    x += widest / 2;\n\t                } else {\n\t                    textAlign = 'right';\n\t                    x += widest;\n\t                }\n\t            } else {\n\t                x = this.right - tickAndPadding;\n\t                if (crossAlign === 'near') {\n\t                    textAlign = 'right';\n\t                } else if (crossAlign === 'center') {\n\t                    textAlign = 'center';\n\t                    x -= widest / 2;\n\t                } else {\n\t                    textAlign = 'left';\n\t                    x = this.left;\n\t                }\n\t            }\n\t        } else if (position === 'right') {\n\t            if (mirror) {\n\t                x = this.left + padding;\n\t                if (crossAlign === 'near') {\n\t                    textAlign = 'right';\n\t                } else if (crossAlign === 'center') {\n\t                    textAlign = 'center';\n\t                    x -= widest / 2;\n\t                } else {\n\t                    textAlign = 'left';\n\t                    x -= widest;\n\t                }\n\t            } else {\n\t                x = this.left + tickAndPadding;\n\t                if (crossAlign === 'near') {\n\t                    textAlign = 'left';\n\t                } else if (crossAlign === 'center') {\n\t                    textAlign = 'center';\n\t                    x += widest / 2;\n\t                } else {\n\t                    textAlign = 'right';\n\t                    x = this.right;\n\t                }\n\t            }\n\t        } else {\n\t            textAlign = 'right';\n\t        }\n\t        return {\n\t            textAlign,\n\t            x\n\t        };\n\t    }\n\t _computeLabelArea() {\n\t        if (this.options.ticks.mirror) {\n\t            return;\n\t        }\n\t        const chart = this.chart;\n\t        const position = this.options.position;\n\t        if (position === 'left' || position === 'right') {\n\t            return {\n\t                top: 0,\n\t                left: this.left,\n\t                bottom: chart.height,\n\t                right: this.right\n\t            };\n\t        }\n\t        if (position === 'top' || position === 'bottom') {\n\t            return {\n\t                top: this.top,\n\t                left: 0,\n\t                bottom: this.bottom,\n\t                right: chart.width\n\t            };\n\t        }\n\t    }\n\t drawBackground() {\n\t        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n\t        if (backgroundColor) {\n\t            ctx.save();\n\t            ctx.fillStyle = backgroundColor;\n\t            ctx.fillRect(left, top, width, height);\n\t            ctx.restore();\n\t        }\n\t    }\n\t    getLineWidthForValue(value) {\n\t        const grid = this.options.grid;\n\t        if (!this._isVisible() || !grid.display) {\n\t            return 0;\n\t        }\n\t        const ticks = this.ticks;\n\t        const index = ticks.findIndex((t)=>t.value === value);\n\t        if (index >= 0) {\n\t            const opts = grid.setContext(this.getContext(index));\n\t            return opts.lineWidth;\n\t        }\n\t        return 0;\n\t    }\n\t drawGrid(chartArea) {\n\t        const grid = this.options.grid;\n\t        const ctx = this.ctx;\n\t        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\t        let i, ilen;\n\t        const drawLine = (p1, p2, style)=>{\n\t            if (!style.width || !style.color) {\n\t                return;\n\t            }\n\t            ctx.save();\n\t            ctx.lineWidth = style.width;\n\t            ctx.strokeStyle = style.color;\n\t            ctx.setLineDash(style.borderDash || []);\n\t            ctx.lineDashOffset = style.borderDashOffset;\n\t            ctx.beginPath();\n\t            ctx.moveTo(p1.x, p1.y);\n\t            ctx.lineTo(p2.x, p2.y);\n\t            ctx.stroke();\n\t            ctx.restore();\n\t        };\n\t        if (grid.display) {\n\t            for(i = 0, ilen = items.length; i < ilen; ++i){\n\t                const item = items[i];\n\t                if (grid.drawOnChartArea) {\n\t                    drawLine({\n\t                        x: item.x1,\n\t                        y: item.y1\n\t                    }, {\n\t                        x: item.x2,\n\t                        y: item.y2\n\t                    }, item);\n\t                }\n\t                if (grid.drawTicks) {\n\t                    drawLine({\n\t                        x: item.tx1,\n\t                        y: item.ty1\n\t                    }, {\n\t                        x: item.tx2,\n\t                        y: item.ty2\n\t                    }, {\n\t                        color: item.tickColor,\n\t                        width: item.tickWidth,\n\t                        borderDash: item.tickBorderDash,\n\t                        borderDashOffset: item.tickBorderDashOffset\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    }\n\t drawBorder() {\n\t        const { chart , ctx , options: { border , grid  }  } = this;\n\t        const borderOpts = border.setContext(this.getContext());\n\t        const axisWidth = border.display ? borderOpts.width : 0;\n\t        if (!axisWidth) {\n\t            return;\n\t        }\n\t        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n\t        const borderValue = this._borderValue;\n\t        let x1, x2, y1, y2;\n\t        if (this.isHorizontal()) {\n\t            x1 = helpers_segment._alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n\t            x2 = helpers_segment._alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n\t            y1 = y2 = borderValue;\n\t        } else {\n\t            y1 = helpers_segment._alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n\t            y2 = helpers_segment._alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n\t            x1 = x2 = borderValue;\n\t        }\n\t        ctx.save();\n\t        ctx.lineWidth = borderOpts.width;\n\t        ctx.strokeStyle = borderOpts.color;\n\t        ctx.beginPath();\n\t        ctx.moveTo(x1, y1);\n\t        ctx.lineTo(x2, y2);\n\t        ctx.stroke();\n\t        ctx.restore();\n\t    }\n\t drawLabels(chartArea) {\n\t        const optionTicks = this.options.ticks;\n\t        if (!optionTicks.display) {\n\t            return;\n\t        }\n\t        const ctx = this.ctx;\n\t        const area = this._computeLabelArea();\n\t        if (area) {\n\t            helpers_segment.clipArea(ctx, area);\n\t        }\n\t        const items = this.getLabelItems(chartArea);\n\t        for (const item of items){\n\t            const renderTextOptions = item.options;\n\t            const tickFont = item.font;\n\t            const label = item.label;\n\t            const y = item.textOffset;\n\t            helpers_segment.renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n\t        }\n\t        if (area) {\n\t            helpers_segment.unclipArea(ctx);\n\t        }\n\t    }\n\t drawTitle() {\n\t        const { ctx , options: { position , title , reverse  }  } = this;\n\t        if (!title.display) {\n\t            return;\n\t        }\n\t        const font = helpers_segment.toFont(title.font);\n\t        const padding = helpers_segment.toPadding(title.padding);\n\t        const align = title.align;\n\t        let offset = font.lineHeight / 2;\n\t        if (position === 'bottom' || position === 'center' || helpers_segment.isObject(position)) {\n\t            offset += padding.bottom;\n\t            if (helpers_segment.isArray(title.text)) {\n\t                offset += font.lineHeight * (title.text.length - 1);\n\t            }\n\t        } else {\n\t            offset += padding.top;\n\t        }\n\t        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n\t        helpers_segment.renderText(ctx, title.text, 0, 0, font, {\n\t            color: title.color,\n\t            maxWidth,\n\t            rotation,\n\t            textAlign: titleAlign(align, position, reverse),\n\t            textBaseline: 'middle',\n\t            translation: [\n\t                titleX,\n\t                titleY\n\t            ]\n\t        });\n\t    }\n\t    draw(chartArea) {\n\t        if (!this._isVisible()) {\n\t            return;\n\t        }\n\t        this.drawBackground();\n\t        this.drawGrid(chartArea);\n\t        this.drawBorder();\n\t        this.drawTitle();\n\t        this.drawLabels(chartArea);\n\t    }\n\t _layers() {\n\t        const opts = this.options;\n\t        const tz = opts.ticks && opts.ticks.z || 0;\n\t        const gz = helpers_segment.valueOrDefault(opts.grid && opts.grid.z, -1);\n\t        const bz = helpers_segment.valueOrDefault(opts.border && opts.border.z, 0);\n\t        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n\t            return [\n\t                {\n\t                    z: tz,\n\t                    draw: (chartArea)=>{\n\t                        this.draw(chartArea);\n\t                    }\n\t                }\n\t            ];\n\t        }\n\t        return [\n\t            {\n\t                z: gz,\n\t                draw: (chartArea)=>{\n\t                    this.drawBackground();\n\t                    this.drawGrid(chartArea);\n\t                    this.drawTitle();\n\t                }\n\t            },\n\t            {\n\t                z: bz,\n\t                draw: ()=>{\n\t                    this.drawBorder();\n\t                }\n\t            },\n\t            {\n\t                z: tz,\n\t                draw: (chartArea)=>{\n\t                    this.drawLabels(chartArea);\n\t                }\n\t            }\n\t        ];\n\t    }\n\t getMatchingVisibleMetas(type) {\n\t        const metas = this.chart.getSortedVisibleDatasetMetas();\n\t        const axisID = this.axis + 'AxisID';\n\t        const result = [];\n\t        let i, ilen;\n\t        for(i = 0, ilen = metas.length; i < ilen; ++i){\n\t            const meta = metas[i];\n\t            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n\t                result.push(meta);\n\t            }\n\t        }\n\t        return result;\n\t    }\n\t _resolveTickFontOptions(index) {\n\t        const opts = this.options.ticks.setContext(this.getContext(index));\n\t        return helpers_segment.toFont(opts.font);\n\t    }\n\t _maxDigits() {\n\t        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\t        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n\t    }\n\t}\n\n\tclass TypedRegistry {\n\t    constructor(type, scope, override){\n\t        this.type = type;\n\t        this.scope = scope;\n\t        this.override = override;\n\t        this.items = Object.create(null);\n\t    }\n\t    isForType(type) {\n\t        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n\t    }\n\t register(item) {\n\t        const proto = Object.getPrototypeOf(item);\n\t        let parentScope;\n\t        if (isIChartComponent(proto)) {\n\t            parentScope = this.register(proto);\n\t        }\n\t        const items = this.items;\n\t        const id = item.id;\n\t        const scope = this.scope + '.' + id;\n\t        if (!id) {\n\t            throw new Error('class does not have id: ' + item);\n\t        }\n\t        if (id in items) {\n\t            return scope;\n\t        }\n\t        items[id] = item;\n\t        registerDefaults(item, scope, parentScope);\n\t        if (this.override) {\n\t            helpers_segment.defaults.override(item.id, item.overrides);\n\t        }\n\t        return scope;\n\t    }\n\t get(id) {\n\t        return this.items[id];\n\t    }\n\t unregister(item) {\n\t        const items = this.items;\n\t        const id = item.id;\n\t        const scope = this.scope;\n\t        if (id in items) {\n\t            delete items[id];\n\t        }\n\t        if (scope && id in helpers_segment.defaults[scope]) {\n\t            delete helpers_segment.defaults[scope][id];\n\t            if (this.override) {\n\t                delete helpers_segment.overrides[id];\n\t            }\n\t        }\n\t    }\n\t}\n\tfunction registerDefaults(item, scope, parentScope) {\n\t    const itemDefaults = helpers_segment.merge(Object.create(null), [\n\t        parentScope ? helpers_segment.defaults.get(parentScope) : {},\n\t        helpers_segment.defaults.get(scope),\n\t        item.defaults\n\t    ]);\n\t    helpers_segment.defaults.set(scope, itemDefaults);\n\t    if (item.defaultRoutes) {\n\t        routeDefaults(scope, item.defaultRoutes);\n\t    }\n\t    if (item.descriptors) {\n\t        helpers_segment.defaults.describe(scope, item.descriptors);\n\t    }\n\t}\n\tfunction routeDefaults(scope, routes) {\n\t    Object.keys(routes).forEach((property)=>{\n\t        const propertyParts = property.split('.');\n\t        const sourceName = propertyParts.pop();\n\t        const sourceScope = [\n\t            scope\n\t        ].concat(propertyParts).join('.');\n\t        const parts = routes[property].split('.');\n\t        const targetName = parts.pop();\n\t        const targetScope = parts.join('.');\n\t        helpers_segment.defaults.route(sourceScope, sourceName, targetScope, targetName);\n\t    });\n\t}\n\tfunction isIChartComponent(proto) {\n\t    return 'id' in proto && 'defaults' in proto;\n\t}\n\n\tclass Registry {\n\t    constructor(){\n\t        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n\t        this.elements = new TypedRegistry(Element, 'elements');\n\t        this.plugins = new TypedRegistry(Object, 'plugins');\n\t        this.scales = new TypedRegistry(Scale, 'scales');\n\t        this._typedRegistries = [\n\t            this.controllers,\n\t            this.scales,\n\t            this.elements\n\t        ];\n\t    }\n\t add(...args) {\n\t        this._each('register', args);\n\t    }\n\t    remove(...args) {\n\t        this._each('unregister', args);\n\t    }\n\t addControllers(...args) {\n\t        this._each('register', args, this.controllers);\n\t    }\n\t addElements(...args) {\n\t        this._each('register', args, this.elements);\n\t    }\n\t addPlugins(...args) {\n\t        this._each('register', args, this.plugins);\n\t    }\n\t addScales(...args) {\n\t        this._each('register', args, this.scales);\n\t    }\n\t getController(id) {\n\t        return this._get(id, this.controllers, 'controller');\n\t    }\n\t getElement(id) {\n\t        return this._get(id, this.elements, 'element');\n\t    }\n\t getPlugin(id) {\n\t        return this._get(id, this.plugins, 'plugin');\n\t    }\n\t getScale(id) {\n\t        return this._get(id, this.scales, 'scale');\n\t    }\n\t removeControllers(...args) {\n\t        this._each('unregister', args, this.controllers);\n\t    }\n\t removeElements(...args) {\n\t        this._each('unregister', args, this.elements);\n\t    }\n\t removePlugins(...args) {\n\t        this._each('unregister', args, this.plugins);\n\t    }\n\t removeScales(...args) {\n\t        this._each('unregister', args, this.scales);\n\t    }\n\t _each(method, args, typedRegistry) {\n\t        [\n\t            ...args\n\t        ].forEach((arg)=>{\n\t            const reg = typedRegistry || this._getRegistryForType(arg);\n\t            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n\t                this._exec(method, reg, arg);\n\t            } else {\n\t                helpers_segment.each(arg, (item)=>{\n\t                    const itemReg = typedRegistry || this._getRegistryForType(item);\n\t                    this._exec(method, itemReg, item);\n\t                });\n\t            }\n\t        });\n\t    }\n\t _exec(method, registry, component) {\n\t        const camelMethod = helpers_segment._capitalize(method);\n\t        helpers_segment.callback(component['before' + camelMethod], [], component);\n\t        registry[method](component);\n\t        helpers_segment.callback(component['after' + camelMethod], [], component);\n\t    }\n\t _getRegistryForType(type) {\n\t        for(let i = 0; i < this._typedRegistries.length; i++){\n\t            const reg = this._typedRegistries[i];\n\t            if (reg.isForType(type)) {\n\t                return reg;\n\t            }\n\t        }\n\t        return this.plugins;\n\t    }\n\t _get(id, typedRegistry, type) {\n\t        const item = typedRegistry.get(id);\n\t        if (item === undefined) {\n\t            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n\t        }\n\t        return item;\n\t    }\n\t}\n\tvar registry = /* #__PURE__ */ new Registry();\n\n\tclass PluginService {\n\t    constructor(){\n\t        this._init = [];\n\t    }\n\t notify(chart, hook, args, filter) {\n\t        if (hook === 'beforeInit') {\n\t            this._init = this._createDescriptors(chart, true);\n\t            this._notify(this._init, chart, 'install');\n\t        }\n\t        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\t        const result = this._notify(descriptors, chart, hook, args);\n\t        if (hook === 'afterDestroy') {\n\t            this._notify(descriptors, chart, 'stop');\n\t            this._notify(this._init, chart, 'uninstall');\n\t        }\n\t        return result;\n\t    }\n\t _notify(descriptors, chart, hook, args) {\n\t        args = args || {};\n\t        for (const descriptor of descriptors){\n\t            const plugin = descriptor.plugin;\n\t            const method = plugin[hook];\n\t            const params = [\n\t                chart,\n\t                args,\n\t                descriptor.options\n\t            ];\n\t            if (helpers_segment.callback(method, params, plugin) === false && args.cancelable) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    invalidate() {\n\t        if (!helpers_segment.isNullOrUndef(this._cache)) {\n\t            this._oldCache = this._cache;\n\t            this._cache = undefined;\n\t        }\n\t    }\n\t _descriptors(chart) {\n\t        if (this._cache) {\n\t            return this._cache;\n\t        }\n\t        const descriptors = this._cache = this._createDescriptors(chart);\n\t        this._notifyStateChanges(chart);\n\t        return descriptors;\n\t    }\n\t    _createDescriptors(chart, all) {\n\t        const config = chart && chart.config;\n\t        const options = helpers_segment.valueOrDefault(config.options && config.options.plugins, {});\n\t        const plugins = allPlugins(config);\n\t        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n\t    }\n\t _notifyStateChanges(chart) {\n\t        const previousDescriptors = this._oldCache || [];\n\t        const descriptors = this._cache;\n\t        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n\t        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\t        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n\t    }\n\t}\n\t function allPlugins(config) {\n\t    const localIds = {};\n\t    const plugins = [];\n\t    const keys = Object.keys(registry.plugins.items);\n\t    for(let i = 0; i < keys.length; i++){\n\t        plugins.push(registry.getPlugin(keys[i]));\n\t    }\n\t    const local = config.plugins || [];\n\t    for(let i = 0; i < local.length; i++){\n\t        const plugin = local[i];\n\t        if (plugins.indexOf(plugin) === -1) {\n\t            plugins.push(plugin);\n\t            localIds[plugin.id] = true;\n\t        }\n\t    }\n\t    return {\n\t        plugins,\n\t        localIds\n\t    };\n\t}\n\tfunction getOpts(options, all) {\n\t    if (!all && options === false) {\n\t        return null;\n\t    }\n\t    if (options === true) {\n\t        return {};\n\t    }\n\t    return options;\n\t}\n\tfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n\t    const result = [];\n\t    const context = chart.getContext();\n\t    for (const plugin of plugins){\n\t        const id = plugin.id;\n\t        const opts = getOpts(options[id], all);\n\t        if (opts === null) {\n\t            continue;\n\t        }\n\t        result.push({\n\t            plugin,\n\t            options: pluginOpts(chart.config, {\n\t                plugin,\n\t                local: localIds[id]\n\t            }, opts, context)\n\t        });\n\t    }\n\t    return result;\n\t}\n\tfunction pluginOpts(config, { plugin , local  }, opts, context) {\n\t    const keys = config.pluginScopeKeys(plugin);\n\t    const scopes = config.getOptionScopes(opts, keys);\n\t    if (local && plugin.defaults) {\n\t        scopes.push(plugin.defaults);\n\t    }\n\t    return config.createResolver(scopes, context, [\n\t        ''\n\t    ], {\n\t        scriptable: false,\n\t        indexable: false,\n\t        allKeys: true\n\t    });\n\t}\n\n\tfunction getIndexAxis(type, options) {\n\t    const datasetDefaults = helpers_segment.defaults.datasets[type] || {};\n\t    const datasetOptions = (options.datasets || {})[type] || {};\n\t    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n\t}\n\tfunction getAxisFromDefaultScaleID(id, indexAxis) {\n\t    let axis = id;\n\t    if (id === '_index_') {\n\t        axis = indexAxis;\n\t    } else if (id === '_value_') {\n\t        axis = indexAxis === 'x' ? 'y' : 'x';\n\t    }\n\t    return axis;\n\t}\n\tfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n\t    return axis === indexAxis ? '_index_' : '_value_';\n\t}\n\tfunction idMatchesAxis(id) {\n\t    if (id === 'x' || id === 'y' || id === 'r') {\n\t        return id;\n\t    }\n\t}\n\tfunction axisFromPosition(position) {\n\t    if (position === 'top' || position === 'bottom') {\n\t        return 'x';\n\t    }\n\t    if (position === 'left' || position === 'right') {\n\t        return 'y';\n\t    }\n\t}\n\tfunction determineAxis(id, ...scaleOptions) {\n\t    if (idMatchesAxis(id)) {\n\t        return id;\n\t    }\n\t    for (const opts of scaleOptions){\n\t        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n\t        if (axis) {\n\t            return axis;\n\t        }\n\t    }\n\t    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n\t}\n\tfunction getAxisFromDataset(id, axis, dataset) {\n\t    if (dataset[axis + 'AxisID'] === id) {\n\t        return {\n\t            axis\n\t        };\n\t    }\n\t}\n\tfunction retrieveAxisFromDatasets(id, config) {\n\t    if (config.data && config.data.datasets) {\n\t        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n\t        if (boundDs.length) {\n\t            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n\t        }\n\t    }\n\t    return {};\n\t}\n\tfunction mergeScaleConfig(config, options) {\n\t    const chartDefaults = helpers_segment.overrides[config.type] || {\n\t        scales: {}\n\t    };\n\t    const configScales = options.scales || {};\n\t    const chartIndexAxis = getIndexAxis(config.type, options);\n\t    const scales = Object.create(null);\n\t    Object.keys(configScales).forEach((id)=>{\n\t        const scaleConf = configScales[id];\n\t        if (!helpers_segment.isObject(scaleConf)) {\n\t            return console.error(`Invalid scale configuration for scale: ${id}`);\n\t        }\n\t        if (scaleConf._proxy) {\n\t            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n\t        }\n\t        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), helpers_segment.defaults.scales[scaleConf.type]);\n\t        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n\t        const defaultScaleOptions = chartDefaults.scales || {};\n\t        scales[id] = helpers_segment.mergeIf(Object.create(null), [\n\t            {\n\t                axis\n\t            },\n\t            scaleConf,\n\t            defaultScaleOptions[axis],\n\t            defaultScaleOptions[defaultId]\n\t        ]);\n\t    });\n\t    config.data.datasets.forEach((dataset)=>{\n\t        const type = dataset.type || config.type;\n\t        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n\t        const datasetDefaults = helpers_segment.overrides[type] || {};\n\t        const defaultScaleOptions = datasetDefaults.scales || {};\n\t        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n\t            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n\t            const id = dataset[axis + 'AxisID'] || axis;\n\t            scales[id] = scales[id] || Object.create(null);\n\t            helpers_segment.mergeIf(scales[id], [\n\t                {\n\t                    axis\n\t                },\n\t                configScales[id],\n\t                defaultScaleOptions[defaultID]\n\t            ]);\n\t        });\n\t    });\n\t    Object.keys(scales).forEach((key)=>{\n\t        const scale = scales[key];\n\t        helpers_segment.mergeIf(scale, [\n\t            helpers_segment.defaults.scales[scale.type],\n\t            helpers_segment.defaults.scale\n\t        ]);\n\t    });\n\t    return scales;\n\t}\n\tfunction initOptions(config) {\n\t    const options = config.options || (config.options = {});\n\t    options.plugins = helpers_segment.valueOrDefault(options.plugins, {});\n\t    options.scales = mergeScaleConfig(config, options);\n\t}\n\tfunction initData(data) {\n\t    data = data || {};\n\t    data.datasets = data.datasets || [];\n\t    data.labels = data.labels || [];\n\t    return data;\n\t}\n\tfunction initConfig(config) {\n\t    config = config || {};\n\t    config.data = initData(config.data);\n\t    initOptions(config);\n\t    return config;\n\t}\n\tconst keyCache = new Map();\n\tconst keysCached = new Set();\n\tfunction cachedKeys(cacheKey, generate) {\n\t    let keys = keyCache.get(cacheKey);\n\t    if (!keys) {\n\t        keys = generate();\n\t        keyCache.set(cacheKey, keys);\n\t        keysCached.add(keys);\n\t    }\n\t    return keys;\n\t}\n\tconst addIfFound = (set, obj, key)=>{\n\t    const opts = helpers_segment.resolveObjectKey(obj, key);\n\t    if (opts !== undefined) {\n\t        set.add(opts);\n\t    }\n\t};\n\tclass Config {\n\t    constructor(config){\n\t        this._config = initConfig(config);\n\t        this._scopeCache = new Map();\n\t        this._resolverCache = new Map();\n\t    }\n\t    get platform() {\n\t        return this._config.platform;\n\t    }\n\t    get type() {\n\t        return this._config.type;\n\t    }\n\t    set type(type) {\n\t        this._config.type = type;\n\t    }\n\t    get data() {\n\t        return this._config.data;\n\t    }\n\t    set data(data) {\n\t        this._config.data = initData(data);\n\t    }\n\t    get options() {\n\t        return this._config.options;\n\t    }\n\t    set options(options) {\n\t        this._config.options = options;\n\t    }\n\t    get plugins() {\n\t        return this._config.plugins;\n\t    }\n\t    update() {\n\t        const config = this._config;\n\t        this.clearCache();\n\t        initOptions(config);\n\t    }\n\t    clearCache() {\n\t        this._scopeCache.clear();\n\t        this._resolverCache.clear();\n\t    }\n\t datasetScopeKeys(datasetType) {\n\t        return cachedKeys(datasetType, ()=>[\n\t                [\n\t                    `datasets.${datasetType}`,\n\t                    ''\n\t                ]\n\t            ]);\n\t    }\n\t datasetAnimationScopeKeys(datasetType, transition) {\n\t        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n\t                [\n\t                    `datasets.${datasetType}.transitions.${transition}`,\n\t                    `transitions.${transition}`\n\t                ],\n\t                [\n\t                    `datasets.${datasetType}`,\n\t                    ''\n\t                ]\n\t            ]);\n\t    }\n\t datasetElementScopeKeys(datasetType, elementType) {\n\t        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n\t                [\n\t                    `datasets.${datasetType}.elements.${elementType}`,\n\t                    `datasets.${datasetType}`,\n\t                    `elements.${elementType}`,\n\t                    ''\n\t                ]\n\t            ]);\n\t    }\n\t pluginScopeKeys(plugin) {\n\t        const id = plugin.id;\n\t        const type = this.type;\n\t        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n\t                [\n\t                    `plugins.${id}`,\n\t                    ...plugin.additionalOptionScopes || []\n\t                ]\n\t            ]);\n\t    }\n\t _cachedScopes(mainScope, resetCache) {\n\t        const _scopeCache = this._scopeCache;\n\t        let cache = _scopeCache.get(mainScope);\n\t        if (!cache || resetCache) {\n\t            cache = new Map();\n\t            _scopeCache.set(mainScope, cache);\n\t        }\n\t        return cache;\n\t    }\n\t getOptionScopes(mainScope, keyLists, resetCache) {\n\t        const { options , type  } = this;\n\t        const cache = this._cachedScopes(mainScope, resetCache);\n\t        const cached = cache.get(keyLists);\n\t        if (cached) {\n\t            return cached;\n\t        }\n\t        const scopes = new Set();\n\t        keyLists.forEach((keys)=>{\n\t            if (mainScope) {\n\t                scopes.add(mainScope);\n\t                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n\t            }\n\t            keys.forEach((key)=>addIfFound(scopes, options, key));\n\t            keys.forEach((key)=>addIfFound(scopes, helpers_segment.overrides[type] || {}, key));\n\t            keys.forEach((key)=>addIfFound(scopes, helpers_segment.defaults, key));\n\t            keys.forEach((key)=>addIfFound(scopes, helpers_segment.descriptors, key));\n\t        });\n\t        const array = Array.from(scopes);\n\t        if (array.length === 0) {\n\t            array.push(Object.create(null));\n\t        }\n\t        if (keysCached.has(keyLists)) {\n\t            cache.set(keyLists, array);\n\t        }\n\t        return array;\n\t    }\n\t chartOptionScopes() {\n\t        const { options , type  } = this;\n\t        return [\n\t            options,\n\t            helpers_segment.overrides[type] || {},\n\t            helpers_segment.defaults.datasets[type] || {},\n\t            {\n\t                type\n\t            },\n\t            helpers_segment.defaults,\n\t            helpers_segment.descriptors\n\t        ];\n\t    }\n\t resolveNamedOptions(scopes, names, context, prefixes = [\n\t        ''\n\t    ]) {\n\t        const result = {\n\t            $shared: true\n\t        };\n\t        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n\t        let options = resolver;\n\t        if (needContext(resolver, names)) {\n\t            result.$shared = false;\n\t            context = helpers_segment.isFunction(context) ? context() : context;\n\t            const subResolver = this.createResolver(scopes, context, subPrefixes);\n\t            options = helpers_segment._attachContext(resolver, context, subResolver);\n\t        }\n\t        for (const prop of names){\n\t            result[prop] = options[prop];\n\t        }\n\t        return result;\n\t    }\n\t createResolver(scopes, context, prefixes = [\n\t        ''\n\t    ], descriptorDefaults) {\n\t        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n\t        return helpers_segment.isObject(context) ? helpers_segment._attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n\t    }\n\t}\n\tfunction getResolver(resolverCache, scopes, prefixes) {\n\t    let cache = resolverCache.get(scopes);\n\t    if (!cache) {\n\t        cache = new Map();\n\t        resolverCache.set(scopes, cache);\n\t    }\n\t    const cacheKey = prefixes.join();\n\t    let cached = cache.get(cacheKey);\n\t    if (!cached) {\n\t        const resolver = helpers_segment._createResolver(scopes, prefixes);\n\t        cached = {\n\t            resolver,\n\t            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n\t        };\n\t        cache.set(cacheKey, cached);\n\t    }\n\t    return cached;\n\t}\n\tconst hasFunction = (value)=>helpers_segment.isObject(value) && Object.getOwnPropertyNames(value).some((key)=>helpers_segment.isFunction(value[key]));\n\tfunction needContext(proxy, names) {\n\t    const { isScriptable , isIndexable  } = helpers_segment._descriptors(proxy);\n\t    for (const prop of names){\n\t        const scriptable = isScriptable(prop);\n\t        const indexable = isIndexable(prop);\n\t        const value = (indexable || scriptable) && proxy[prop];\n\t        if (scriptable && (helpers_segment.isFunction(value) || hasFunction(value)) || indexable && helpers_segment.isArray(value)) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\n\tvar version = \"4.4.4\";\n\n\tconst KNOWN_POSITIONS = [\n\t    'top',\n\t    'bottom',\n\t    'left',\n\t    'right',\n\t    'chartArea'\n\t];\n\tfunction positionIsHorizontal(position, axis) {\n\t    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n\t}\n\tfunction compare2Level(l1, l2) {\n\t    return function(a, b) {\n\t        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n\t    };\n\t}\n\tfunction onAnimationsComplete(context) {\n\t    const chart = context.chart;\n\t    const animationOptions = chart.options.animation;\n\t    chart.notifyPlugins('afterRender');\n\t    helpers_segment.callback(animationOptions && animationOptions.onComplete, [\n\t        context\n\t    ], chart);\n\t}\n\tfunction onAnimationProgress(context) {\n\t    const chart = context.chart;\n\t    const animationOptions = chart.options.animation;\n\t    helpers_segment.callback(animationOptions && animationOptions.onProgress, [\n\t        context\n\t    ], chart);\n\t}\n\t function getCanvas(item) {\n\t    if (helpers_segment._isDomSupported() && typeof item === 'string') {\n\t        item = document.getElementById(item);\n\t    } else if (item && item.length) {\n\t        item = item[0];\n\t    }\n\t    if (item && item.canvas) {\n\t        item = item.canvas;\n\t    }\n\t    return item;\n\t}\n\tconst instances = {};\n\tconst getChart = (key)=>{\n\t    const canvas = getCanvas(key);\n\t    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n\t};\n\tfunction moveNumericKeys(obj, start, move) {\n\t    const keys = Object.keys(obj);\n\t    for (const key of keys){\n\t        const intKey = +key;\n\t        if (intKey >= start) {\n\t            const value = obj[key];\n\t            delete obj[key];\n\t            if (move > 0 || intKey > start) {\n\t                obj[intKey + move] = value;\n\t            }\n\t        }\n\t    }\n\t}\n\t function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n\t    if (!inChartArea || e.type === 'mouseout') {\n\t        return null;\n\t    }\n\t    if (isClick) {\n\t        return lastEvent;\n\t    }\n\t    return e;\n\t}\n\tfunction getSizeForArea(scale, chartArea, field) {\n\t    return scale.options.clip ? scale[field] : chartArea[field];\n\t}\n\tfunction getDatasetArea(meta, chartArea) {\n\t    const { xScale , yScale  } = meta;\n\t    if (xScale && yScale) {\n\t        return {\n\t            left: getSizeForArea(xScale, chartArea, 'left'),\n\t            right: getSizeForArea(xScale, chartArea, 'right'),\n\t            top: getSizeForArea(yScale, chartArea, 'top'),\n\t            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n\t        };\n\t    }\n\t    return chartArea;\n\t}\n\tclass Chart {\n\t    static defaults = helpers_segment.defaults;\n\t    static instances = instances;\n\t    static overrides = helpers_segment.overrides;\n\t    static registry = registry;\n\t    static version = version;\n\t    static getChart = getChart;\n\t    static register(...items) {\n\t        registry.add(...items);\n\t        invalidatePlugins();\n\t    }\n\t    static unregister(...items) {\n\t        registry.remove(...items);\n\t        invalidatePlugins();\n\t    }\n\t    constructor(item, userConfig){\n\t        const config = this.config = new Config(userConfig);\n\t        const initialCanvas = getCanvas(item);\n\t        const existingChart = getChart(initialCanvas);\n\t        if (existingChart) {\n\t            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n\t        }\n\t        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\t        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n\t        this.platform.updateConfig(config);\n\t        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n\t        const canvas = context && context.canvas;\n\t        const height = canvas && canvas.height;\n\t        const width = canvas && canvas.width;\n\t        this.id = helpers_segment.uid();\n\t        this.ctx = context;\n\t        this.canvas = canvas;\n\t        this.width = width;\n\t        this.height = height;\n\t        this._options = options;\n\t        this._aspectRatio = this.aspectRatio;\n\t        this._layers = [];\n\t        this._metasets = [];\n\t        this._stacks = undefined;\n\t        this.boxes = [];\n\t        this.currentDevicePixelRatio = undefined;\n\t        this.chartArea = undefined;\n\t        this._active = [];\n\t        this._lastEvent = undefined;\n\t        this._listeners = {};\n\t         this._responsiveListeners = undefined;\n\t        this._sortedMetasets = [];\n\t        this.scales = {};\n\t        this._plugins = new PluginService();\n\t        this.$proxies = {};\n\t        this._hiddenIndices = {};\n\t        this.attached = false;\n\t        this._animationsDisabled = undefined;\n\t        this.$context = undefined;\n\t        this._doResize = helpers_segment.debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n\t        this._dataChanges = [];\n\t        instances[this.id] = this;\n\t        if (!context || !canvas) {\n\t            console.error(\"Failed to create chart: can't acquire context from the given item\");\n\t            return;\n\t        }\n\t        animator.listen(this, 'complete', onAnimationsComplete);\n\t        animator.listen(this, 'progress', onAnimationProgress);\n\t        this._initialize();\n\t        if (this.attached) {\n\t            this.update();\n\t        }\n\t    }\n\t    get aspectRatio() {\n\t        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n\t        if (!helpers_segment.isNullOrUndef(aspectRatio)) {\n\t            return aspectRatio;\n\t        }\n\t        if (maintainAspectRatio && _aspectRatio) {\n\t            return _aspectRatio;\n\t        }\n\t        return height ? width / height : null;\n\t    }\n\t    get data() {\n\t        return this.config.data;\n\t    }\n\t    set data(data) {\n\t        this.config.data = data;\n\t    }\n\t    get options() {\n\t        return this._options;\n\t    }\n\t    set options(options) {\n\t        this.config.options = options;\n\t    }\n\t    get registry() {\n\t        return registry;\n\t    }\n\t _initialize() {\n\t        this.notifyPlugins('beforeInit');\n\t        if (this.options.responsive) {\n\t            this.resize();\n\t        } else {\n\t            helpers_segment.retinaScale(this, this.options.devicePixelRatio);\n\t        }\n\t        this.bindEvents();\n\t        this.notifyPlugins('afterInit');\n\t        return this;\n\t    }\n\t    clear() {\n\t        helpers_segment.clearCanvas(this.canvas, this.ctx);\n\t        return this;\n\t    }\n\t    stop() {\n\t        animator.stop(this);\n\t        return this;\n\t    }\n\t resize(width, height) {\n\t        if (!animator.running(this)) {\n\t            this._resize(width, height);\n\t        } else {\n\t            this._resizeBeforeDraw = {\n\t                width,\n\t                height\n\t            };\n\t        }\n\t    }\n\t    _resize(width, height) {\n\t        const options = this.options;\n\t        const canvas = this.canvas;\n\t        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n\t        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n\t        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n\t        const mode = this.width ? 'resize' : 'attach';\n\t        this.width = newSize.width;\n\t        this.height = newSize.height;\n\t        this._aspectRatio = this.aspectRatio;\n\t        if (!helpers_segment.retinaScale(this, newRatio, true)) {\n\t            return;\n\t        }\n\t        this.notifyPlugins('resize', {\n\t            size: newSize\n\t        });\n\t        helpers_segment.callback(options.onResize, [\n\t            this,\n\t            newSize\n\t        ], this);\n\t        if (this.attached) {\n\t            if (this._doResize(mode)) {\n\t                this.render();\n\t            }\n\t        }\n\t    }\n\t    ensureScalesHaveIDs() {\n\t        const options = this.options;\n\t        const scalesOptions = options.scales || {};\n\t        helpers_segment.each(scalesOptions, (axisOptions, axisID)=>{\n\t            axisOptions.id = axisID;\n\t        });\n\t    }\n\t buildOrUpdateScales() {\n\t        const options = this.options;\n\t        const scaleOpts = options.scales;\n\t        const scales = this.scales;\n\t        const updated = Object.keys(scales).reduce((obj, id)=>{\n\t            obj[id] = false;\n\t            return obj;\n\t        }, {});\n\t        let items = [];\n\t        if (scaleOpts) {\n\t            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n\t                const scaleOptions = scaleOpts[id];\n\t                const axis = determineAxis(id, scaleOptions);\n\t                const isRadial = axis === 'r';\n\t                const isHorizontal = axis === 'x';\n\t                return {\n\t                    options: scaleOptions,\n\t                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n\t                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n\t                };\n\t            }));\n\t        }\n\t        helpers_segment.each(items, (item)=>{\n\t            const scaleOptions = item.options;\n\t            const id = scaleOptions.id;\n\t            const axis = determineAxis(id, scaleOptions);\n\t            const scaleType = helpers_segment.valueOrDefault(scaleOptions.type, item.dtype);\n\t            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n\t                scaleOptions.position = item.dposition;\n\t            }\n\t            updated[id] = true;\n\t            let scale = null;\n\t            if (id in scales && scales[id].type === scaleType) {\n\t                scale = scales[id];\n\t            } else {\n\t                const scaleClass = registry.getScale(scaleType);\n\t                scale = new scaleClass({\n\t                    id,\n\t                    type: scaleType,\n\t                    ctx: this.ctx,\n\t                    chart: this\n\t                });\n\t                scales[scale.id] = scale;\n\t            }\n\t            scale.init(scaleOptions, options);\n\t        });\n\t        helpers_segment.each(updated, (hasUpdated, id)=>{\n\t            if (!hasUpdated) {\n\t                delete scales[id];\n\t            }\n\t        });\n\t        helpers_segment.each(scales, (scale)=>{\n\t            layouts.configure(this, scale, scale.options);\n\t            layouts.addBox(this, scale);\n\t        });\n\t    }\n\t _updateMetasets() {\n\t        const metasets = this._metasets;\n\t        const numData = this.data.datasets.length;\n\t        const numMeta = metasets.length;\n\t        metasets.sort((a, b)=>a.index - b.index);\n\t        if (numMeta > numData) {\n\t            for(let i = numData; i < numMeta; ++i){\n\t                this._destroyDatasetMeta(i);\n\t            }\n\t            metasets.splice(numData, numMeta - numData);\n\t        }\n\t        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n\t    }\n\t _removeUnreferencedMetasets() {\n\t        const { _metasets: metasets , data: { datasets  }  } = this;\n\t        if (metasets.length > datasets.length) {\n\t            delete this._stacks;\n\t        }\n\t        metasets.forEach((meta, index)=>{\n\t            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n\t                this._destroyDatasetMeta(index);\n\t            }\n\t        });\n\t    }\n\t    buildOrUpdateControllers() {\n\t        const newControllers = [];\n\t        const datasets = this.data.datasets;\n\t        let i, ilen;\n\t        this._removeUnreferencedMetasets();\n\t        for(i = 0, ilen = datasets.length; i < ilen; i++){\n\t            const dataset = datasets[i];\n\t            let meta = this.getDatasetMeta(i);\n\t            const type = dataset.type || this.config.type;\n\t            if (meta.type && meta.type !== type) {\n\t                this._destroyDatasetMeta(i);\n\t                meta = this.getDatasetMeta(i);\n\t            }\n\t            meta.type = type;\n\t            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n\t            meta.order = dataset.order || 0;\n\t            meta.index = i;\n\t            meta.label = '' + dataset.label;\n\t            meta.visible = this.isDatasetVisible(i);\n\t            if (meta.controller) {\n\t                meta.controller.updateIndex(i);\n\t                meta.controller.linkScales();\n\t            } else {\n\t                const ControllerClass = registry.getController(type);\n\t                const { datasetElementType , dataElementType  } = helpers_segment.defaults.datasets[type];\n\t                Object.assign(ControllerClass, {\n\t                    dataElementType: registry.getElement(dataElementType),\n\t                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n\t                });\n\t                meta.controller = new ControllerClass(this, i);\n\t                newControllers.push(meta.controller);\n\t            }\n\t        }\n\t        this._updateMetasets();\n\t        return newControllers;\n\t    }\n\t _resetElements() {\n\t        helpers_segment.each(this.data.datasets, (dataset, datasetIndex)=>{\n\t            this.getDatasetMeta(datasetIndex).controller.reset();\n\t        }, this);\n\t    }\n\t reset() {\n\t        this._resetElements();\n\t        this.notifyPlugins('reset');\n\t    }\n\t    update(mode) {\n\t        const config = this.config;\n\t        config.update();\n\t        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\t        const animsDisabled = this._animationsDisabled = !options.animation;\n\t        this._updateScales();\n\t        this._checkEventBindings();\n\t        this._updateHiddenIndices();\n\t        this._plugins.invalidate();\n\t        if (this.notifyPlugins('beforeUpdate', {\n\t            mode,\n\t            cancelable: true\n\t        }) === false) {\n\t            return;\n\t        }\n\t        const newControllers = this.buildOrUpdateControllers();\n\t        this.notifyPlugins('beforeElementsUpdate');\n\t        let minPadding = 0;\n\t        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n\t            const { controller  } = this.getDatasetMeta(i);\n\t            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n\t            controller.buildOrUpdateElements(reset);\n\t            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n\t        }\n\t        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\t        this._updateLayout(minPadding);\n\t        if (!animsDisabled) {\n\t            helpers_segment.each(newControllers, (controller)=>{\n\t                controller.reset();\n\t            });\n\t        }\n\t        this._updateDatasets(mode);\n\t        this.notifyPlugins('afterUpdate', {\n\t            mode\n\t        });\n\t        this._layers.sort(compare2Level('z', '_idx'));\n\t        const { _active , _lastEvent  } = this;\n\t        if (_lastEvent) {\n\t            this._eventHandler(_lastEvent, true);\n\t        } else if (_active.length) {\n\t            this._updateHoverStyles(_active, _active, true);\n\t        }\n\t        this.render();\n\t    }\n\t _updateScales() {\n\t        helpers_segment.each(this.scales, (scale)=>{\n\t            layouts.removeBox(this, scale);\n\t        });\n\t        this.ensureScalesHaveIDs();\n\t        this.buildOrUpdateScales();\n\t    }\n\t _checkEventBindings() {\n\t        const options = this.options;\n\t        const existingEvents = new Set(Object.keys(this._listeners));\n\t        const newEvents = new Set(options.events);\n\t        if (!helpers_segment.setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n\t            this.unbindEvents();\n\t            this.bindEvents();\n\t        }\n\t    }\n\t _updateHiddenIndices() {\n\t        const { _hiddenIndices  } = this;\n\t        const changes = this._getUniformDataChanges() || [];\n\t        for (const { method , start , count  } of changes){\n\t            const move = method === '_removeElements' ? -count : count;\n\t            moveNumericKeys(_hiddenIndices, start, move);\n\t        }\n\t    }\n\t _getUniformDataChanges() {\n\t        const _dataChanges = this._dataChanges;\n\t        if (!_dataChanges || !_dataChanges.length) {\n\t            return;\n\t        }\n\t        this._dataChanges = [];\n\t        const datasetCount = this.data.datasets.length;\n\t        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n\t        const changeSet = makeSet(0);\n\t        for(let i = 1; i < datasetCount; i++){\n\t            if (!helpers_segment.setsEqual(changeSet, makeSet(i))) {\n\t                return;\n\t            }\n\t        }\n\t        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n\t                method: a[1],\n\t                start: +a[2],\n\t                count: +a[3]\n\t            }));\n\t    }\n\t _updateLayout(minPadding) {\n\t        if (this.notifyPlugins('beforeLayout', {\n\t            cancelable: true\n\t        }) === false) {\n\t            return;\n\t        }\n\t        layouts.update(this, this.width, this.height, minPadding);\n\t        const area = this.chartArea;\n\t        const noArea = area.width <= 0 || area.height <= 0;\n\t        this._layers = [];\n\t        helpers_segment.each(this.boxes, (box)=>{\n\t            if (noArea && box.position === 'chartArea') {\n\t                return;\n\t            }\n\t            if (box.configure) {\n\t                box.configure();\n\t            }\n\t            this._layers.push(...box._layers());\n\t        }, this);\n\t        this._layers.forEach((item, index)=>{\n\t            item._idx = index;\n\t        });\n\t        this.notifyPlugins('afterLayout');\n\t    }\n\t _updateDatasets(mode) {\n\t        if (this.notifyPlugins('beforeDatasetsUpdate', {\n\t            mode,\n\t            cancelable: true\n\t        }) === false) {\n\t            return;\n\t        }\n\t        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n\t            this.getDatasetMeta(i).controller.configure();\n\t        }\n\t        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n\t            this._updateDataset(i, helpers_segment.isFunction(mode) ? mode({\n\t                datasetIndex: i\n\t            }) : mode);\n\t        }\n\t        this.notifyPlugins('afterDatasetsUpdate', {\n\t            mode\n\t        });\n\t    }\n\t _updateDataset(index, mode) {\n\t        const meta = this.getDatasetMeta(index);\n\t        const args = {\n\t            meta,\n\t            index,\n\t            mode,\n\t            cancelable: true\n\t        };\n\t        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n\t            return;\n\t        }\n\t        meta.controller._update(mode);\n\t        args.cancelable = false;\n\t        this.notifyPlugins('afterDatasetUpdate', args);\n\t    }\n\t    render() {\n\t        if (this.notifyPlugins('beforeRender', {\n\t            cancelable: true\n\t        }) === false) {\n\t            return;\n\t        }\n\t        if (animator.has(this)) {\n\t            if (this.attached && !animator.running(this)) {\n\t                animator.start(this);\n\t            }\n\t        } else {\n\t            this.draw();\n\t            onAnimationsComplete({\n\t                chart: this\n\t            });\n\t        }\n\t    }\n\t    draw() {\n\t        let i;\n\t        if (this._resizeBeforeDraw) {\n\t            const { width , height  } = this._resizeBeforeDraw;\n\t            this._resizeBeforeDraw = null;\n\t            this._resize(width, height);\n\t        }\n\t        this.clear();\n\t        if (this.width <= 0 || this.height <= 0) {\n\t            return;\n\t        }\n\t        if (this.notifyPlugins('beforeDraw', {\n\t            cancelable: true\n\t        }) === false) {\n\t            return;\n\t        }\n\t        const layers = this._layers;\n\t        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n\t            layers[i].draw(this.chartArea);\n\t        }\n\t        this._drawDatasets();\n\t        for(; i < layers.length; ++i){\n\t            layers[i].draw(this.chartArea);\n\t        }\n\t        this.notifyPlugins('afterDraw');\n\t    }\n\t _getSortedDatasetMetas(filterVisible) {\n\t        const metasets = this._sortedMetasets;\n\t        const result = [];\n\t        let i, ilen;\n\t        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n\t            const meta = metasets[i];\n\t            if (!filterVisible || meta.visible) {\n\t                result.push(meta);\n\t            }\n\t        }\n\t        return result;\n\t    }\n\t getSortedVisibleDatasetMetas() {\n\t        return this._getSortedDatasetMetas(true);\n\t    }\n\t _drawDatasets() {\n\t        if (this.notifyPlugins('beforeDatasetsDraw', {\n\t            cancelable: true\n\t        }) === false) {\n\t            return;\n\t        }\n\t        const metasets = this.getSortedVisibleDatasetMetas();\n\t        for(let i = metasets.length - 1; i >= 0; --i){\n\t            this._drawDataset(metasets[i]);\n\t        }\n\t        this.notifyPlugins('afterDatasetsDraw');\n\t    }\n\t _drawDataset(meta) {\n\t        const ctx = this.ctx;\n\t        const clip = meta._clip;\n\t        const useClip = !clip.disabled;\n\t        const area = getDatasetArea(meta, this.chartArea);\n\t        const args = {\n\t            meta,\n\t            index: meta.index,\n\t            cancelable: true\n\t        };\n\t        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n\t            return;\n\t        }\n\t        if (useClip) {\n\t            helpers_segment.clipArea(ctx, {\n\t                left: clip.left === false ? 0 : area.left - clip.left,\n\t                right: clip.right === false ? this.width : area.right + clip.right,\n\t                top: clip.top === false ? 0 : area.top - clip.top,\n\t                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n\t            });\n\t        }\n\t        meta.controller.draw();\n\t        if (useClip) {\n\t            helpers_segment.unclipArea(ctx);\n\t        }\n\t        args.cancelable = false;\n\t        this.notifyPlugins('afterDatasetDraw', args);\n\t    }\n\t isPointInArea(point) {\n\t        return helpers_segment._isPointInArea(point, this.chartArea, this._minPadding);\n\t    }\n\t    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n\t        const method = Interaction.modes[mode];\n\t        if (typeof method === 'function') {\n\t            return method(this, e, options, useFinalPosition);\n\t        }\n\t        return [];\n\t    }\n\t    getDatasetMeta(datasetIndex) {\n\t        const dataset = this.data.datasets[datasetIndex];\n\t        const metasets = this._metasets;\n\t        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n\t        if (!meta) {\n\t            meta = {\n\t                type: null,\n\t                data: [],\n\t                dataset: null,\n\t                controller: null,\n\t                hidden: null,\n\t                xAxisID: null,\n\t                yAxisID: null,\n\t                order: dataset && dataset.order || 0,\n\t                index: datasetIndex,\n\t                _dataset: dataset,\n\t                _parsed: [],\n\t                _sorted: false\n\t            };\n\t            metasets.push(meta);\n\t        }\n\t        return meta;\n\t    }\n\t    getContext() {\n\t        return this.$context || (this.$context = helpers_segment.createContext(null, {\n\t            chart: this,\n\t            type: 'chart'\n\t        }));\n\t    }\n\t    getVisibleDatasetCount() {\n\t        return this.getSortedVisibleDatasetMetas().length;\n\t    }\n\t    isDatasetVisible(datasetIndex) {\n\t        const dataset = this.data.datasets[datasetIndex];\n\t        if (!dataset) {\n\t            return false;\n\t        }\n\t        const meta = this.getDatasetMeta(datasetIndex);\n\t        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n\t    }\n\t    setDatasetVisibility(datasetIndex, visible) {\n\t        const meta = this.getDatasetMeta(datasetIndex);\n\t        meta.hidden = !visible;\n\t    }\n\t    toggleDataVisibility(index) {\n\t        this._hiddenIndices[index] = !this._hiddenIndices[index];\n\t    }\n\t    getDataVisibility(index) {\n\t        return !this._hiddenIndices[index];\n\t    }\n\t _updateVisibility(datasetIndex, dataIndex, visible) {\n\t        const mode = visible ? 'show' : 'hide';\n\t        const meta = this.getDatasetMeta(datasetIndex);\n\t        const anims = meta.controller._resolveAnimations(undefined, mode);\n\t        if (helpers_segment.defined(dataIndex)) {\n\t            meta.data[dataIndex].hidden = !visible;\n\t            this.update();\n\t        } else {\n\t            this.setDatasetVisibility(datasetIndex, visible);\n\t            anims.update(meta, {\n\t                visible\n\t            });\n\t            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n\t        }\n\t    }\n\t    hide(datasetIndex, dataIndex) {\n\t        this._updateVisibility(datasetIndex, dataIndex, false);\n\t    }\n\t    show(datasetIndex, dataIndex) {\n\t        this._updateVisibility(datasetIndex, dataIndex, true);\n\t    }\n\t _destroyDatasetMeta(datasetIndex) {\n\t        const meta = this._metasets[datasetIndex];\n\t        if (meta && meta.controller) {\n\t            meta.controller._destroy();\n\t        }\n\t        delete this._metasets[datasetIndex];\n\t    }\n\t    _stop() {\n\t        let i, ilen;\n\t        this.stop();\n\t        animator.remove(this);\n\t        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n\t            this._destroyDatasetMeta(i);\n\t        }\n\t    }\n\t    destroy() {\n\t        this.notifyPlugins('beforeDestroy');\n\t        const { canvas , ctx  } = this;\n\t        this._stop();\n\t        this.config.clearCache();\n\t        if (canvas) {\n\t            this.unbindEvents();\n\t            helpers_segment.clearCanvas(canvas, ctx);\n\t            this.platform.releaseContext(ctx);\n\t            this.canvas = null;\n\t            this.ctx = null;\n\t        }\n\t        delete instances[this.id];\n\t        this.notifyPlugins('afterDestroy');\n\t    }\n\t    toBase64Image(...args) {\n\t        return this.canvas.toDataURL(...args);\n\t    }\n\t bindEvents() {\n\t        this.bindUserEvents();\n\t        if (this.options.responsive) {\n\t            this.bindResponsiveEvents();\n\t        } else {\n\t            this.attached = true;\n\t        }\n\t    }\n\t bindUserEvents() {\n\t        const listeners = this._listeners;\n\t        const platform = this.platform;\n\t        const _add = (type, listener)=>{\n\t            platform.addEventListener(this, type, listener);\n\t            listeners[type] = listener;\n\t        };\n\t        const listener = (e, x, y)=>{\n\t            e.offsetX = x;\n\t            e.offsetY = y;\n\t            this._eventHandler(e);\n\t        };\n\t        helpers_segment.each(this.options.events, (type)=>_add(type, listener));\n\t    }\n\t bindResponsiveEvents() {\n\t        if (!this._responsiveListeners) {\n\t            this._responsiveListeners = {};\n\t        }\n\t        const listeners = this._responsiveListeners;\n\t        const platform = this.platform;\n\t        const _add = (type, listener)=>{\n\t            platform.addEventListener(this, type, listener);\n\t            listeners[type] = listener;\n\t        };\n\t        const _remove = (type, listener)=>{\n\t            if (listeners[type]) {\n\t                platform.removeEventListener(this, type, listener);\n\t                delete listeners[type];\n\t            }\n\t        };\n\t        const listener = (width, height)=>{\n\t            if (this.canvas) {\n\t                this.resize(width, height);\n\t            }\n\t        };\n\t        let detached;\n\t        const attached = ()=>{\n\t            _remove('attach', attached);\n\t            this.attached = true;\n\t            this.resize();\n\t            _add('resize', listener);\n\t            _add('detach', detached);\n\t        };\n\t        detached = ()=>{\n\t            this.attached = false;\n\t            _remove('resize', listener);\n\t            this._stop();\n\t            this._resize(0, 0);\n\t            _add('attach', attached);\n\t        };\n\t        if (platform.isAttached(this.canvas)) {\n\t            attached();\n\t        } else {\n\t            detached();\n\t        }\n\t    }\n\t unbindEvents() {\n\t        helpers_segment.each(this._listeners, (listener, type)=>{\n\t            this.platform.removeEventListener(this, type, listener);\n\t        });\n\t        this._listeners = {};\n\t        helpers_segment.each(this._responsiveListeners, (listener, type)=>{\n\t            this.platform.removeEventListener(this, type, listener);\n\t        });\n\t        this._responsiveListeners = undefined;\n\t    }\n\t    updateHoverStyle(items, mode, enabled) {\n\t        const prefix = enabled ? 'set' : 'remove';\n\t        let meta, item, i, ilen;\n\t        if (mode === 'dataset') {\n\t            meta = this.getDatasetMeta(items[0].datasetIndex);\n\t            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n\t        }\n\t        for(i = 0, ilen = items.length; i < ilen; ++i){\n\t            item = items[i];\n\t            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\t            if (controller) {\n\t                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n\t            }\n\t        }\n\t    }\n\t getActiveElements() {\n\t        return this._active || [];\n\t    }\n\t setActiveElements(activeElements) {\n\t        const lastActive = this._active || [];\n\t        const active = activeElements.map(({ datasetIndex , index  })=>{\n\t            const meta = this.getDatasetMeta(datasetIndex);\n\t            if (!meta) {\n\t                throw new Error('No dataset found at index ' + datasetIndex);\n\t            }\n\t            return {\n\t                datasetIndex,\n\t                element: meta.data[index],\n\t                index\n\t            };\n\t        });\n\t        const changed = !helpers_segment._elementsEqual(active, lastActive);\n\t        if (changed) {\n\t            this._active = active;\n\t            this._lastEvent = null;\n\t            this._updateHoverStyles(active, lastActive);\n\t        }\n\t    }\n\t notifyPlugins(hook, args, filter) {\n\t        return this._plugins.notify(this, hook, args, filter);\n\t    }\n\t isPluginEnabled(pluginId) {\n\t        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n\t    }\n\t _updateHoverStyles(active, lastActive, replay) {\n\t        const hoverOptions = this.options.hover;\n\t        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n\t        const deactivated = diff(lastActive, active);\n\t        const activated = replay ? active : diff(active, lastActive);\n\t        if (deactivated.length) {\n\t            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n\t        }\n\t        if (activated.length && hoverOptions.mode) {\n\t            this.updateHoverStyle(activated, hoverOptions.mode, true);\n\t        }\n\t    }\n\t _eventHandler(e, replay) {\n\t        const args = {\n\t            event: e,\n\t            replay,\n\t            cancelable: true,\n\t            inChartArea: this.isPointInArea(e)\n\t        };\n\t        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n\t        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n\t            return;\n\t        }\n\t        const changed = this._handleEvent(e, replay, args.inChartArea);\n\t        args.cancelable = false;\n\t        this.notifyPlugins('afterEvent', args, eventFilter);\n\t        if (changed || args.changed) {\n\t            this.render();\n\t        }\n\t        return this;\n\t    }\n\t _handleEvent(e, replay, inChartArea) {\n\t        const { _active: lastActive = [] , options  } = this;\n\t        const useFinalPosition = replay;\n\t        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\t        const isClick = helpers_segment._isClickEvent(e);\n\t        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\t        if (inChartArea) {\n\t            this._lastEvent = null;\n\t            helpers_segment.callback(options.onHover, [\n\t                e,\n\t                active,\n\t                this\n\t            ], this);\n\t            if (isClick) {\n\t                helpers_segment.callback(options.onClick, [\n\t                    e,\n\t                    active,\n\t                    this\n\t                ], this);\n\t            }\n\t        }\n\t        const changed = !helpers_segment._elementsEqual(active, lastActive);\n\t        if (changed || replay) {\n\t            this._active = active;\n\t            this._updateHoverStyles(active, lastActive, replay);\n\t        }\n\t        this._lastEvent = lastEvent;\n\t        return changed;\n\t    }\n\t _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n\t        if (e.type === 'mouseout') {\n\t            return [];\n\t        }\n\t        if (!inChartArea) {\n\t            return lastActive;\n\t        }\n\t        const hoverOptions = this.options.hover;\n\t        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n\t    }\n\t}\n\tfunction invalidatePlugins() {\n\t    return helpers_segment.each(Chart.instances, (chart)=>chart._plugins.invalidate());\n\t}\n\n\tfunction clipArc(ctx, element, endAngle) {\n\t    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n\t    let angleMargin = pixelMargin / outerRadius;\n\t    // Draw an inner border by clipping the arc and drawing a double-width border\n\t    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\t    ctx.beginPath();\n\t    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\t    if (innerRadius > pixelMargin) {\n\t        angleMargin = pixelMargin / innerRadius;\n\t        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n\t    } else {\n\t        ctx.arc(x, y, pixelMargin, endAngle + helpers_segment.HALF_PI, startAngle - helpers_segment.HALF_PI);\n\t    }\n\t    ctx.closePath();\n\t    ctx.clip();\n\t}\n\tfunction toRadiusCorners(value) {\n\t    return helpers_segment._readValueToProps(value, [\n\t        'outerStart',\n\t        'outerEnd',\n\t        'innerStart',\n\t        'innerEnd'\n\t    ]);\n\t}\n\t/**\n\t * Parse border radius from the provided options\n\t */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n\t    const o = toRadiusCorners(arc.options.borderRadius);\n\t    const halfThickness = (outerRadius - innerRadius) / 2;\n\t    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\t    // Outer limits are complicated. We want to compute the available angular distance at\n\t    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n\t    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n\t    //\n\t    // If the borderRadius is large, that value can become negative.\n\t    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n\t    // we know that the thickness term will dominate and compute the limits at that point\n\t    const computeOuterLimit = (val)=>{\n\t        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n\t        return helpers_segment._limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n\t    };\n\t    return {\n\t        outerStart: computeOuterLimit(o.outerStart),\n\t        outerEnd: computeOuterLimit(o.outerEnd),\n\t        innerStart: helpers_segment._limitValue(o.innerStart, 0, innerLimit),\n\t        innerEnd: helpers_segment._limitValue(o.innerEnd, 0, innerLimit)\n\t    };\n\t}\n\t/**\n\t * Convert (r, 𝜃) to (x, y)\n\t */ function rThetaToXY(r, theta, x, y) {\n\t    return {\n\t        x: x + r * Math.cos(theta),\n\t        y: y + r * Math.sin(theta)\n\t    };\n\t}\n\t/**\n\t * Path the arc, respecting border radius by separating into left and right halves.\n\t *\n\t *   Start      End\n\t *\n\t *    1--->a--->2    Outer\n\t *   /           \\\n\t *   8           3\n\t *   |           |\n\t *   |           |\n\t *   7           4\n\t *   \\           /\n\t *    6<---b<---5    Inner\n\t */ function pathArc(ctx, element, offset, spacing, end, circular) {\n\t    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n\t    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n\t    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\t    let spacingOffset = 0;\n\t    const alpha = end - start;\n\t    if (spacing) {\n\t        // When spacing is present, it is the same for all items\n\t        // So we adjust the start and end angle of the arc such that\n\t        // the distance is the same as it would be without the spacing\n\t        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n\t        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n\t        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n\t        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n\t        spacingOffset = (alpha - adjustedAngle) / 2;\n\t    }\n\t    const beta = Math.max(0.001, alpha * outerRadius - offset / helpers_segment.PI) / outerRadius;\n\t    const angleOffset = (alpha - beta) / 2;\n\t    const startAngle = start + angleOffset + spacingOffset;\n\t    const endAngle = end - angleOffset - spacingOffset;\n\t    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n\t    const outerStartAdjustedRadius = outerRadius - outerStart;\n\t    const outerEndAdjustedRadius = outerRadius - outerEnd;\n\t    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n\t    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\t    const innerStartAdjustedRadius = innerRadius + innerStart;\n\t    const innerEndAdjustedRadius = innerRadius + innerEnd;\n\t    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n\t    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\t    ctx.beginPath();\n\t    if (circular) {\n\t        // The first arc segments from point 1 to point a to point 2\n\t        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n\t        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n\t        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\t        // The corner segment from point 2 to point 3\n\t        if (outerEnd > 0) {\n\t            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n\t            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + helpers_segment.HALF_PI);\n\t        }\n\t        // The line from point 3 to point 4\n\t        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n\t        ctx.lineTo(p4.x, p4.y);\n\t        // The corner segment from point 4 to point 5\n\t        if (innerEnd > 0) {\n\t            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n\t            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + helpers_segment.HALF_PI, innerEndAdjustedAngle + Math.PI);\n\t        }\n\t        // The inner arc from point 5 to point b to point 6\n\t        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n\t        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n\t        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n\t        // The corner segment from point 6 to point 7\n\t        if (innerStart > 0) {\n\t            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n\t            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - helpers_segment.HALF_PI);\n\t        }\n\t        // The line from point 7 to point 8\n\t        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n\t        ctx.lineTo(p8.x, p8.y);\n\t        // The corner segment from point 8 to point 1\n\t        if (outerStart > 0) {\n\t            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n\t            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - helpers_segment.HALF_PI, outerStartAdjustedAngle);\n\t        }\n\t    } else {\n\t        ctx.moveTo(x, y);\n\t        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n\t        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n\t        ctx.lineTo(outerStartX, outerStartY);\n\t        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n\t        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n\t        ctx.lineTo(outerEndX, outerEndY);\n\t    }\n\t    ctx.closePath();\n\t}\n\tfunction drawArc(ctx, element, offset, spacing, circular) {\n\t    const { fullCircles , startAngle , circumference  } = element;\n\t    let endAngle = element.endAngle;\n\t    if (fullCircles) {\n\t        pathArc(ctx, element, offset, spacing, endAngle, circular);\n\t        for(let i = 0; i < fullCircles; ++i){\n\t            ctx.fill();\n\t        }\n\t        if (!isNaN(circumference)) {\n\t            endAngle = startAngle + (circumference % helpers_segment.TAU || helpers_segment.TAU);\n\t        }\n\t    }\n\t    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\t    ctx.fill();\n\t    return endAngle;\n\t}\n\tfunction drawBorder(ctx, element, offset, spacing, circular) {\n\t    const { fullCircles , startAngle , circumference , options  } = element;\n\t    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n\t    const inner = options.borderAlign === 'inner';\n\t    if (!borderWidth) {\n\t        return;\n\t    }\n\t    ctx.setLineDash(borderDash || []);\n\t    ctx.lineDashOffset = borderDashOffset;\n\t    if (inner) {\n\t        ctx.lineWidth = borderWidth * 2;\n\t        ctx.lineJoin = borderJoinStyle || 'round';\n\t    } else {\n\t        ctx.lineWidth = borderWidth;\n\t        ctx.lineJoin = borderJoinStyle || 'bevel';\n\t    }\n\t    let endAngle = element.endAngle;\n\t    if (fullCircles) {\n\t        pathArc(ctx, element, offset, spacing, endAngle, circular);\n\t        for(let i = 0; i < fullCircles; ++i){\n\t            ctx.stroke();\n\t        }\n\t        if (!isNaN(circumference)) {\n\t            endAngle = startAngle + (circumference % helpers_segment.TAU || helpers_segment.TAU);\n\t        }\n\t    }\n\t    if (inner) {\n\t        clipArc(ctx, element, endAngle);\n\t    }\n\t    if (!fullCircles) {\n\t        pathArc(ctx, element, offset, spacing, endAngle, circular);\n\t        ctx.stroke();\n\t    }\n\t}\n\tclass ArcElement extends Element {\n\t    static id = 'arc';\n\t    static defaults = {\n\t        borderAlign: 'center',\n\t        borderColor: '#fff',\n\t        borderDash: [],\n\t        borderDashOffset: 0,\n\t        borderJoinStyle: undefined,\n\t        borderRadius: 0,\n\t        borderWidth: 2,\n\t        offset: 0,\n\t        spacing: 0,\n\t        angle: undefined,\n\t        circular: true\n\t    };\n\t    static defaultRoutes = {\n\t        backgroundColor: 'backgroundColor'\n\t    };\n\t    static descriptors = {\n\t        _scriptable: true,\n\t        _indexable: (name)=>name !== 'borderDash'\n\t    };\n\t    circumference;\n\t    endAngle;\n\t    fullCircles;\n\t    innerRadius;\n\t    outerRadius;\n\t    pixelMargin;\n\t    startAngle;\n\t    constructor(cfg){\n\t        super();\n\t        this.options = undefined;\n\t        this.circumference = undefined;\n\t        this.startAngle = undefined;\n\t        this.endAngle = undefined;\n\t        this.innerRadius = undefined;\n\t        this.outerRadius = undefined;\n\t        this.pixelMargin = 0;\n\t        this.fullCircles = 0;\n\t        if (cfg) {\n\t            Object.assign(this, cfg);\n\t        }\n\t    }\n\t    inRange(chartX, chartY, useFinalPosition) {\n\t        const point = this.getProps([\n\t            'x',\n\t            'y'\n\t        ], useFinalPosition);\n\t        const { angle , distance  } = helpers_segment.getAngleFromPoint(point, {\n\t            x: chartX,\n\t            y: chartY\n\t        });\n\t        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n\t            'startAngle',\n\t            'endAngle',\n\t            'innerRadius',\n\t            'outerRadius',\n\t            'circumference'\n\t        ], useFinalPosition);\n\t        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n\t        const _circumference = helpers_segment.valueOrDefault(circumference, endAngle - startAngle);\n\t        const nonZeroBetween = helpers_segment._angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n\t        const betweenAngles = _circumference >= helpers_segment.TAU || nonZeroBetween;\n\t        const withinRadius = helpers_segment._isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\t        return betweenAngles && withinRadius;\n\t    }\n\t    getCenterPoint(useFinalPosition) {\n\t        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n\t            'x',\n\t            'y',\n\t            'startAngle',\n\t            'endAngle',\n\t            'innerRadius',\n\t            'outerRadius'\n\t        ], useFinalPosition);\n\t        const { offset , spacing  } = this.options;\n\t        const halfAngle = (startAngle + endAngle) / 2;\n\t        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n\t        return {\n\t            x: x + Math.cos(halfAngle) * halfRadius,\n\t            y: y + Math.sin(halfAngle) * halfRadius\n\t        };\n\t    }\n\t    tooltipPosition(useFinalPosition) {\n\t        return this.getCenterPoint(useFinalPosition);\n\t    }\n\t    draw(ctx) {\n\t        const { options , circumference  } = this;\n\t        const offset = (options.offset || 0) / 4;\n\t        const spacing = (options.spacing || 0) / 2;\n\t        const circular = options.circular;\n\t        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n\t        this.fullCircles = circumference > helpers_segment.TAU ? Math.floor(circumference / helpers_segment.TAU) : 0;\n\t        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n\t            return;\n\t        }\n\t        ctx.save();\n\t        const halfAngle = (this.startAngle + this.endAngle) / 2;\n\t        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n\t        const fix = 1 - Math.sin(Math.min(helpers_segment.PI, circumference || 0));\n\t        const radiusOffset = offset * fix;\n\t        ctx.fillStyle = options.backgroundColor;\n\t        ctx.strokeStyle = options.borderColor;\n\t        drawArc(ctx, this, radiusOffset, spacing, circular);\n\t        drawBorder(ctx, this, radiusOffset, spacing, circular);\n\t        ctx.restore();\n\t    }\n\t}\n\n\tfunction setStyle(ctx, options, style = options) {\n\t    ctx.lineCap = helpers_segment.valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n\t    ctx.setLineDash(helpers_segment.valueOrDefault(style.borderDash, options.borderDash));\n\t    ctx.lineDashOffset = helpers_segment.valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n\t    ctx.lineJoin = helpers_segment.valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n\t    ctx.lineWidth = helpers_segment.valueOrDefault(style.borderWidth, options.borderWidth);\n\t    ctx.strokeStyle = helpers_segment.valueOrDefault(style.borderColor, options.borderColor);\n\t}\n\tfunction lineTo(ctx, previous, target) {\n\t    ctx.lineTo(target.x, target.y);\n\t}\n\t function getLineMethod(options) {\n\t    if (options.stepped) {\n\t        return helpers_segment._steppedLineTo;\n\t    }\n\t    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n\t        return helpers_segment._bezierCurveTo;\n\t    }\n\t    return lineTo;\n\t}\n\tfunction pathVars(points, segment, params = {}) {\n\t    const count = points.length;\n\t    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n\t    const { start: segmentStart , end: segmentEnd  } = segment;\n\t    const start = Math.max(paramsStart, segmentStart);\n\t    const end = Math.min(paramsEnd, segmentEnd);\n\t    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\t    return {\n\t        count,\n\t        start,\n\t        loop: segment.loop,\n\t        ilen: end < start && !outside ? count + end - start : end - start\n\t    };\n\t}\n\t function pathSegment(ctx, line, segment, params) {\n\t    const { points , options  } = line;\n\t    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n\t    const lineMethod = getLineMethod(options);\n\t    let { move =true , reverse  } = params || {};\n\t    let i, point, prev;\n\t    for(i = 0; i <= ilen; ++i){\n\t        point = points[(start + (reverse ? ilen - i : i)) % count];\n\t        if (point.skip) {\n\t            continue;\n\t        } else if (move) {\n\t            ctx.moveTo(point.x, point.y);\n\t            move = false;\n\t        } else {\n\t            lineMethod(ctx, prev, point, reverse, options.stepped);\n\t        }\n\t        prev = point;\n\t    }\n\t    if (loop) {\n\t        point = points[(start + (reverse ? ilen : 0)) % count];\n\t        lineMethod(ctx, prev, point, reverse, options.stepped);\n\t    }\n\t    return !!loop;\n\t}\n\t function fastPathSegment(ctx, line, segment, params) {\n\t    const points = line.points;\n\t    const { count , start , ilen  } = pathVars(points, segment, params);\n\t    const { move =true , reverse  } = params || {};\n\t    let avgX = 0;\n\t    let countX = 0;\n\t    let i, point, prevX, minY, maxY, lastY;\n\t    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n\t    const drawX = ()=>{\n\t        if (minY !== maxY) {\n\t            ctx.lineTo(avgX, maxY);\n\t            ctx.lineTo(avgX, minY);\n\t            ctx.lineTo(avgX, lastY);\n\t        }\n\t    };\n\t    if (move) {\n\t        point = points[pointIndex(0)];\n\t        ctx.moveTo(point.x, point.y);\n\t    }\n\t    for(i = 0; i <= ilen; ++i){\n\t        point = points[pointIndex(i)];\n\t        if (point.skip) {\n\t            continue;\n\t        }\n\t        const x = point.x;\n\t        const y = point.y;\n\t        const truncX = x | 0;\n\t        if (truncX === prevX) {\n\t            if (y < minY) {\n\t                minY = y;\n\t            } else if (y > maxY) {\n\t                maxY = y;\n\t            }\n\t            avgX = (countX * avgX + x) / ++countX;\n\t        } else {\n\t            drawX();\n\t            ctx.lineTo(x, y);\n\t            prevX = truncX;\n\t            countX = 0;\n\t            minY = maxY = y;\n\t        }\n\t        lastY = y;\n\t    }\n\t    drawX();\n\t}\n\t function _getSegmentMethod(line) {\n\t    const opts = line.options;\n\t    const borderDash = opts.borderDash && opts.borderDash.length;\n\t    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n\t    return useFastPath ? fastPathSegment : pathSegment;\n\t}\n\t function _getInterpolationMethod(options) {\n\t    if (options.stepped) {\n\t        return helpers_segment._steppedInterpolation;\n\t    }\n\t    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n\t        return helpers_segment._bezierInterpolation;\n\t    }\n\t    return helpers_segment._pointInLine;\n\t}\n\tfunction strokePathWithCache(ctx, line, start, count) {\n\t    let path = line._path;\n\t    if (!path) {\n\t        path = line._path = new Path2D();\n\t        if (line.path(path, start, count)) {\n\t            path.closePath();\n\t        }\n\t    }\n\t    setStyle(ctx, line.options);\n\t    ctx.stroke(path);\n\t}\n\tfunction strokePathDirect(ctx, line, start, count) {\n\t    const { segments , options  } = line;\n\t    const segmentMethod = _getSegmentMethod(line);\n\t    for (const segment of segments){\n\t        setStyle(ctx, options, segment.style);\n\t        ctx.beginPath();\n\t        if (segmentMethod(ctx, line, segment, {\n\t            start,\n\t            end: start + count - 1\n\t        })) {\n\t            ctx.closePath();\n\t        }\n\t        ctx.stroke();\n\t    }\n\t}\n\tconst usePath2D = typeof Path2D === 'function';\n\tfunction draw(ctx, line, start, count) {\n\t    if (usePath2D && !line.options.segment) {\n\t        strokePathWithCache(ctx, line, start, count);\n\t    } else {\n\t        strokePathDirect(ctx, line, start, count);\n\t    }\n\t}\n\tclass LineElement extends Element {\n\t    static id = 'line';\n\t static defaults = {\n\t        borderCapStyle: 'butt',\n\t        borderDash: [],\n\t        borderDashOffset: 0,\n\t        borderJoinStyle: 'miter',\n\t        borderWidth: 3,\n\t        capBezierPoints: true,\n\t        cubicInterpolationMode: 'default',\n\t        fill: false,\n\t        spanGaps: false,\n\t        stepped: false,\n\t        tension: 0\n\t    };\n\t static defaultRoutes = {\n\t        backgroundColor: 'backgroundColor',\n\t        borderColor: 'borderColor'\n\t    };\n\t    static descriptors = {\n\t        _scriptable: true,\n\t        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n\t    };\n\t    constructor(cfg){\n\t        super();\n\t        this.animated = true;\n\t        this.options = undefined;\n\t        this._chart = undefined;\n\t        this._loop = undefined;\n\t        this._fullLoop = undefined;\n\t        this._path = undefined;\n\t        this._points = undefined;\n\t        this._segments = undefined;\n\t        this._decimated = false;\n\t        this._pointsUpdated = false;\n\t        this._datasetIndex = undefined;\n\t        if (cfg) {\n\t            Object.assign(this, cfg);\n\t        }\n\t    }\n\t    updateControlPoints(chartArea, indexAxis) {\n\t        const options = this.options;\n\t        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n\t            const loop = options.spanGaps ? this._loop : this._fullLoop;\n\t            helpers_segment._updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\t            this._pointsUpdated = true;\n\t        }\n\t    }\n\t    set points(points) {\n\t        this._points = points;\n\t        delete this._segments;\n\t        delete this._path;\n\t        this._pointsUpdated = false;\n\t    }\n\t    get points() {\n\t        return this._points;\n\t    }\n\t    get segments() {\n\t        return this._segments || (this._segments = helpers_segment._computeSegments(this, this.options.segment));\n\t    }\n\t first() {\n\t        const segments = this.segments;\n\t        const points = this.points;\n\t        return segments.length && points[segments[0].start];\n\t    }\n\t last() {\n\t        const segments = this.segments;\n\t        const points = this.points;\n\t        const count = segments.length;\n\t        return count && points[segments[count - 1].end];\n\t    }\n\t interpolate(point, property) {\n\t        const options = this.options;\n\t        const value = point[property];\n\t        const points = this.points;\n\t        const segments = helpers_segment._boundSegments(this, {\n\t            property,\n\t            start: value,\n\t            end: value\n\t        });\n\t        if (!segments.length) {\n\t            return;\n\t        }\n\t        const result = [];\n\t        const _interpolate = _getInterpolationMethod(options);\n\t        let i, ilen;\n\t        for(i = 0, ilen = segments.length; i < ilen; ++i){\n\t            const { start , end  } = segments[i];\n\t            const p1 = points[start];\n\t            const p2 = points[end];\n\t            if (p1 === p2) {\n\t                result.push(p1);\n\t                continue;\n\t            }\n\t            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\t            const interpolated = _interpolate(p1, p2, t, options.stepped);\n\t            interpolated[property] = point[property];\n\t            result.push(interpolated);\n\t        }\n\t        return result.length === 1 ? result[0] : result;\n\t    }\n\t pathSegment(ctx, segment, params) {\n\t        const segmentMethod = _getSegmentMethod(this);\n\t        return segmentMethod(ctx, this, segment, params);\n\t    }\n\t path(ctx, start, count) {\n\t        const segments = this.segments;\n\t        const segmentMethod = _getSegmentMethod(this);\n\t        let loop = this._loop;\n\t        start = start || 0;\n\t        count = count || this.points.length - start;\n\t        for (const segment of segments){\n\t            loop &= segmentMethod(ctx, this, segment, {\n\t                start,\n\t                end: start + count - 1\n\t            });\n\t        }\n\t        return !!loop;\n\t    }\n\t draw(ctx, chartArea, start, count) {\n\t        const options = this.options || {};\n\t        const points = this.points || [];\n\t        if (points.length && options.borderWidth) {\n\t            ctx.save();\n\t            draw(ctx, this, start, count);\n\t            ctx.restore();\n\t        }\n\t        if (this.animated) {\n\t            this._pointsUpdated = false;\n\t            this._path = undefined;\n\t        }\n\t    }\n\t}\n\n\tfunction inRange$1(el, pos, axis, useFinalPosition) {\n\t    const options = el.options;\n\t    const { [axis]: value  } = el.getProps([\n\t        axis\n\t    ], useFinalPosition);\n\t    return Math.abs(pos - value) < options.radius + options.hitRadius;\n\t}\n\tclass PointElement extends Element {\n\t    static id = 'point';\n\t    parsed;\n\t    skip;\n\t    stop;\n\t    /**\n\t   * @type {any}\n\t   */ static defaults = {\n\t        borderWidth: 1,\n\t        hitRadius: 1,\n\t        hoverBorderWidth: 1,\n\t        hoverRadius: 4,\n\t        pointStyle: 'circle',\n\t        radius: 3,\n\t        rotation: 0\n\t    };\n\t    /**\n\t   * @type {any}\n\t   */ static defaultRoutes = {\n\t        backgroundColor: 'backgroundColor',\n\t        borderColor: 'borderColor'\n\t    };\n\t    constructor(cfg){\n\t        super();\n\t        this.options = undefined;\n\t        this.parsed = undefined;\n\t        this.skip = undefined;\n\t        this.stop = undefined;\n\t        if (cfg) {\n\t            Object.assign(this, cfg);\n\t        }\n\t    }\n\t    inRange(mouseX, mouseY, useFinalPosition) {\n\t        const options = this.options;\n\t        const { x , y  } = this.getProps([\n\t            'x',\n\t            'y'\n\t        ], useFinalPosition);\n\t        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n\t    }\n\t    inXRange(mouseX, useFinalPosition) {\n\t        return inRange$1(this, mouseX, 'x', useFinalPosition);\n\t    }\n\t    inYRange(mouseY, useFinalPosition) {\n\t        return inRange$1(this, mouseY, 'y', useFinalPosition);\n\t    }\n\t    getCenterPoint(useFinalPosition) {\n\t        const { x , y  } = this.getProps([\n\t            'x',\n\t            'y'\n\t        ], useFinalPosition);\n\t        return {\n\t            x,\n\t            y\n\t        };\n\t    }\n\t    size(options) {\n\t        options = options || this.options || {};\n\t        let radius = options.radius || 0;\n\t        radius = Math.max(radius, radius && options.hoverRadius || 0);\n\t        const borderWidth = radius && options.borderWidth || 0;\n\t        return (radius + borderWidth) * 2;\n\t    }\n\t    draw(ctx, area) {\n\t        const options = this.options;\n\t        if (this.skip || options.radius < 0.1 || !helpers_segment._isPointInArea(this, area, this.size(options) / 2)) {\n\t            return;\n\t        }\n\t        ctx.strokeStyle = options.borderColor;\n\t        ctx.lineWidth = options.borderWidth;\n\t        ctx.fillStyle = options.backgroundColor;\n\t        helpers_segment.drawPoint(ctx, options, this.x, this.y);\n\t    }\n\t    getRange() {\n\t        const options = this.options || {};\n\t        // @ts-expect-error Fallbacks should never be hit in practice\n\t        return options.radius + options.hitRadius;\n\t    }\n\t}\n\n\tfunction getBarBounds(bar, useFinalPosition) {\n\t    const { x , y , base , width , height  } =  bar.getProps([\n\t        'x',\n\t        'y',\n\t        'base',\n\t        'width',\n\t        'height'\n\t    ], useFinalPosition);\n\t    let left, right, top, bottom, half;\n\t    if (bar.horizontal) {\n\t        half = height / 2;\n\t        left = Math.min(x, base);\n\t        right = Math.max(x, base);\n\t        top = y - half;\n\t        bottom = y + half;\n\t    } else {\n\t        half = width / 2;\n\t        left = x - half;\n\t        right = x + half;\n\t        top = Math.min(y, base);\n\t        bottom = Math.max(y, base);\n\t    }\n\t    return {\n\t        left,\n\t        top,\n\t        right,\n\t        bottom\n\t    };\n\t}\n\tfunction skipOrLimit(skip, value, min, max) {\n\t    return skip ? 0 : helpers_segment._limitValue(value, min, max);\n\t}\n\tfunction parseBorderWidth(bar, maxW, maxH) {\n\t    const value = bar.options.borderWidth;\n\t    const skip = bar.borderSkipped;\n\t    const o = helpers_segment.toTRBL(value);\n\t    return {\n\t        t: skipOrLimit(skip.top, o.top, 0, maxH),\n\t        r: skipOrLimit(skip.right, o.right, 0, maxW),\n\t        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n\t        l: skipOrLimit(skip.left, o.left, 0, maxW)\n\t    };\n\t}\n\tfunction parseBorderRadius(bar, maxW, maxH) {\n\t    const { enableBorderRadius  } = bar.getProps([\n\t        'enableBorderRadius'\n\t    ]);\n\t    const value = bar.options.borderRadius;\n\t    const o = helpers_segment.toTRBLCorners(value);\n\t    const maxR = Math.min(maxW, maxH);\n\t    const skip = bar.borderSkipped;\n\t    const enableBorder = enableBorderRadius || helpers_segment.isObject(value);\n\t    return {\n\t        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n\t        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n\t        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n\t        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n\t    };\n\t}\n\tfunction boundingRects(bar) {\n\t    const bounds = getBarBounds(bar);\n\t    const width = bounds.right - bounds.left;\n\t    const height = bounds.bottom - bounds.top;\n\t    const border = parseBorderWidth(bar, width / 2, height / 2);\n\t    const radius = parseBorderRadius(bar, width / 2, height / 2);\n\t    return {\n\t        outer: {\n\t            x: bounds.left,\n\t            y: bounds.top,\n\t            w: width,\n\t            h: height,\n\t            radius\n\t        },\n\t        inner: {\n\t            x: bounds.left + border.l,\n\t            y: bounds.top + border.t,\n\t            w: width - border.l - border.r,\n\t            h: height - border.t - border.b,\n\t            radius: {\n\t                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n\t                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n\t                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n\t                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n\t            }\n\t        }\n\t    };\n\t}\n\tfunction inRange(bar, x, y, useFinalPosition) {\n\t    const skipX = x === null;\n\t    const skipY = y === null;\n\t    const skipBoth = skipX && skipY;\n\t    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\t    return bounds && (skipX || helpers_segment._isBetween(x, bounds.left, bounds.right)) && (skipY || helpers_segment._isBetween(y, bounds.top, bounds.bottom));\n\t}\n\tfunction hasRadius(radius) {\n\t    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n\t}\n\t function addNormalRectPath(ctx, rect) {\n\t    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n\t}\n\tfunction inflateRect(rect, amount, refRect = {}) {\n\t    const x = rect.x !== refRect.x ? -amount : 0;\n\t    const y = rect.y !== refRect.y ? -amount : 0;\n\t    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n\t    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n\t    return {\n\t        x: rect.x + x,\n\t        y: rect.y + y,\n\t        w: rect.w + w,\n\t        h: rect.h + h,\n\t        radius: rect.radius\n\t    };\n\t}\n\tclass BarElement extends Element {\n\t    static id = 'bar';\n\t static defaults = {\n\t        borderSkipped: 'start',\n\t        borderWidth: 0,\n\t        borderRadius: 0,\n\t        inflateAmount: 'auto',\n\t        pointStyle: undefined\n\t    };\n\t static defaultRoutes = {\n\t        backgroundColor: 'backgroundColor',\n\t        borderColor: 'borderColor'\n\t    };\n\t    constructor(cfg){\n\t        super();\n\t        this.options = undefined;\n\t        this.horizontal = undefined;\n\t        this.base = undefined;\n\t        this.width = undefined;\n\t        this.height = undefined;\n\t        this.inflateAmount = undefined;\n\t        if (cfg) {\n\t            Object.assign(this, cfg);\n\t        }\n\t    }\n\t    draw(ctx) {\n\t        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n\t        const { inner , outer  } = boundingRects(this);\n\t        const addRectPath = hasRadius(outer.radius) ? helpers_segment.addRoundedRectPath : addNormalRectPath;\n\t        ctx.save();\n\t        if (outer.w !== inner.w || outer.h !== inner.h) {\n\t            ctx.beginPath();\n\t            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n\t            ctx.clip();\n\t            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n\t            ctx.fillStyle = borderColor;\n\t            ctx.fill('evenodd');\n\t        }\n\t        ctx.beginPath();\n\t        addRectPath(ctx, inflateRect(inner, inflateAmount));\n\t        ctx.fillStyle = backgroundColor;\n\t        ctx.fill();\n\t        ctx.restore();\n\t    }\n\t    inRange(mouseX, mouseY, useFinalPosition) {\n\t        return inRange(this, mouseX, mouseY, useFinalPosition);\n\t    }\n\t    inXRange(mouseX, useFinalPosition) {\n\t        return inRange(this, mouseX, null, useFinalPosition);\n\t    }\n\t    inYRange(mouseY, useFinalPosition) {\n\t        return inRange(this, null, mouseY, useFinalPosition);\n\t    }\n\t    getCenterPoint(useFinalPosition) {\n\t        const { x , y , base , horizontal  } =  this.getProps([\n\t            'x',\n\t            'y',\n\t            'base',\n\t            'horizontal'\n\t        ], useFinalPosition);\n\t        return {\n\t            x: horizontal ? (x + base) / 2 : x,\n\t            y: horizontal ? y : (y + base) / 2\n\t        };\n\t    }\n\t    getRange(axis) {\n\t        return axis === 'x' ? this.width / 2 : this.height / 2;\n\t    }\n\t}\n\n\tvar elements = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcElement: ArcElement,\n\tBarElement: BarElement,\n\tLineElement: LineElement,\n\tPointElement: PointElement\n\t});\n\n\tconst BORDER_COLORS = [\n\t    'rgb(54, 162, 235)',\n\t    'rgb(255, 99, 132)',\n\t    'rgb(255, 159, 64)',\n\t    'rgb(255, 205, 86)',\n\t    'rgb(75, 192, 192)',\n\t    'rgb(153, 102, 255)',\n\t    'rgb(201, 203, 207)' // grey\n\t];\n\t// Border colors with 50% transparency\n\tconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\tfunction getBorderColor(i) {\n\t    return BORDER_COLORS[i % BORDER_COLORS.length];\n\t}\n\tfunction getBackgroundColor(i) {\n\t    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n\t}\n\tfunction colorizeDefaultDataset(dataset, i) {\n\t    dataset.borderColor = getBorderColor(i);\n\t    dataset.backgroundColor = getBackgroundColor(i);\n\t    return ++i;\n\t}\n\tfunction colorizeDoughnutDataset(dataset, i) {\n\t    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n\t    return i;\n\t}\n\tfunction colorizePolarAreaDataset(dataset, i) {\n\t    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n\t    return i;\n\t}\n\tfunction getColorizer(chart) {\n\t    let i = 0;\n\t    return (dataset, datasetIndex)=>{\n\t        const controller = chart.getDatasetMeta(datasetIndex).controller;\n\t        if (controller instanceof DoughnutController) {\n\t            i = colorizeDoughnutDataset(dataset, i);\n\t        } else if (controller instanceof PolarAreaController) {\n\t            i = colorizePolarAreaDataset(dataset, i);\n\t        } else if (controller) {\n\t            i = colorizeDefaultDataset(dataset, i);\n\t        }\n\t    };\n\t}\n\tfunction containsColorsDefinitions(descriptors) {\n\t    let k;\n\t    for(k in descriptors){\n\t        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\tfunction containsColorsDefinition(descriptor) {\n\t    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n\t}\n\tvar plugin_colors = {\n\t    id: 'colors',\n\t    defaults: {\n\t        enabled: true,\n\t        forceOverride: false\n\t    },\n\t    beforeLayout (chart, _args, options) {\n\t        if (!options.enabled) {\n\t            return;\n\t        }\n\t        const { data: { datasets  } , options: chartOptions  } = chart.config;\n\t        const { elements  } = chartOptions;\n\t        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n\t            return;\n\t        }\n\t        const colorizer = getColorizer(chart);\n\t        datasets.forEach(colorizer);\n\t    }\n\t};\n\n\tfunction lttbDecimation(data, start, count, availableWidth, options) {\n\t const samples = options.samples || availableWidth;\n\t    if (samples >= count) {\n\t        return data.slice(start, start + count);\n\t    }\n\t    const decimated = [];\n\t    const bucketWidth = (count - 2) / (samples - 2);\n\t    let sampledIndex = 0;\n\t    const endIndex = start + count - 1;\n\t    let a = start;\n\t    let i, maxAreaPoint, maxArea, area, nextA;\n\t    decimated[sampledIndex++] = data[a];\n\t    for(i = 0; i < samples - 2; i++){\n\t        let avgX = 0;\n\t        let avgY = 0;\n\t        let j;\n\t        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n\t        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n\t        const avgRangeLength = avgRangeEnd - avgRangeStart;\n\t        for(j = avgRangeStart; j < avgRangeEnd; j++){\n\t            avgX += data[j].x;\n\t            avgY += data[j].y;\n\t        }\n\t        avgX /= avgRangeLength;\n\t        avgY /= avgRangeLength;\n\t        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n\t        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n\t        const { x: pointAx , y: pointAy  } = data[a];\n\t        maxArea = area = -1;\n\t        for(j = rangeOffs; j < rangeTo; j++){\n\t            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\t            if (area > maxArea) {\n\t                maxArea = area;\n\t                maxAreaPoint = data[j];\n\t                nextA = j;\n\t            }\n\t        }\n\t        decimated[sampledIndex++] = maxAreaPoint;\n\t        a = nextA;\n\t    }\n\t    decimated[sampledIndex++] = data[endIndex];\n\t    return decimated;\n\t}\n\tfunction minMaxDecimation(data, start, count, availableWidth) {\n\t    let avgX = 0;\n\t    let countX = 0;\n\t    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n\t    const decimated = [];\n\t    const endIndex = start + count - 1;\n\t    const xMin = data[start].x;\n\t    const xMax = data[endIndex].x;\n\t    const dx = xMax - xMin;\n\t    for(i = start; i < start + count; ++i){\n\t        point = data[i];\n\t        x = (point.x - xMin) / dx * availableWidth;\n\t        y = point.y;\n\t        const truncX = x | 0;\n\t        if (truncX === prevX) {\n\t            if (y < minY) {\n\t                minY = y;\n\t                minIndex = i;\n\t            } else if (y > maxY) {\n\t                maxY = y;\n\t                maxIndex = i;\n\t            }\n\t            avgX = (countX * avgX + point.x) / ++countX;\n\t        } else {\n\t            const lastIndex = i - 1;\n\t            if (!helpers_segment.isNullOrUndef(minIndex) && !helpers_segment.isNullOrUndef(maxIndex)) {\n\t                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n\t                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\t                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n\t                    decimated.push({\n\t                        ...data[intermediateIndex1],\n\t                        x: avgX\n\t                    });\n\t                }\n\t                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n\t                    decimated.push({\n\t                        ...data[intermediateIndex2],\n\t                        x: avgX\n\t                    });\n\t                }\n\t            }\n\t            if (i > 0 && lastIndex !== startIndex) {\n\t                decimated.push(data[lastIndex]);\n\t            }\n\t            decimated.push(point);\n\t            prevX = truncX;\n\t            countX = 0;\n\t            minY = maxY = y;\n\t            minIndex = maxIndex = startIndex = i;\n\t        }\n\t    }\n\t    return decimated;\n\t}\n\tfunction cleanDecimatedDataset(dataset) {\n\t    if (dataset._decimated) {\n\t        const data = dataset._data;\n\t        delete dataset._decimated;\n\t        delete dataset._data;\n\t        Object.defineProperty(dataset, 'data', {\n\t            configurable: true,\n\t            enumerable: true,\n\t            writable: true,\n\t            value: data\n\t        });\n\t    }\n\t}\n\tfunction cleanDecimatedData(chart) {\n\t    chart.data.datasets.forEach((dataset)=>{\n\t        cleanDecimatedDataset(dataset);\n\t    });\n\t}\n\tfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n\t    const pointCount = points.length;\n\t    let start = 0;\n\t    let count;\n\t    const { iScale  } = meta;\n\t    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n\t    if (minDefined) {\n\t        start = helpers_segment._limitValue(helpers_segment._lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n\t    }\n\t    if (maxDefined) {\n\t        count = helpers_segment._limitValue(helpers_segment._lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n\t    } else {\n\t        count = pointCount - start;\n\t    }\n\t    return {\n\t        start,\n\t        count\n\t    };\n\t}\n\tvar plugin_decimation = {\n\t    id: 'decimation',\n\t    defaults: {\n\t        algorithm: 'min-max',\n\t        enabled: false\n\t    },\n\t    beforeElementsUpdate: (chart, args, options)=>{\n\t        if (!options.enabled) {\n\t            cleanDecimatedData(chart);\n\t            return;\n\t        }\n\t        const availableWidth = chart.width;\n\t        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n\t            const { _data , indexAxis  } = dataset;\n\t            const meta = chart.getDatasetMeta(datasetIndex);\n\t            const data = _data || dataset.data;\n\t            if (helpers_segment.resolve([\n\t                indexAxis,\n\t                chart.options.indexAxis\n\t            ]) === 'y') {\n\t                return;\n\t            }\n\t            if (!meta.controller.supportsDecimation) {\n\t                return;\n\t            }\n\t            const xAxis = chart.scales[meta.xAxisID];\n\t            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n\t                return;\n\t            }\n\t            if (chart.options.parsing) {\n\t                return;\n\t            }\n\t            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n\t            const threshold = options.threshold || 4 * availableWidth;\n\t            if (count <= threshold) {\n\t                cleanDecimatedDataset(dataset);\n\t                return;\n\t            }\n\t            if (helpers_segment.isNullOrUndef(_data)) {\n\t                dataset._data = data;\n\t                delete dataset.data;\n\t                Object.defineProperty(dataset, 'data', {\n\t                    configurable: true,\n\t                    enumerable: true,\n\t                    get: function() {\n\t                        return this._decimated;\n\t                    },\n\t                    set: function(d) {\n\t                        this._data = d;\n\t                    }\n\t                });\n\t            }\n\t            let decimated;\n\t            switch(options.algorithm){\n\t                case 'lttb':\n\t                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n\t                    break;\n\t                case 'min-max':\n\t                    decimated = minMaxDecimation(data, start, count, availableWidth);\n\t                    break;\n\t                default:\n\t                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n\t            }\n\t            dataset._decimated = decimated;\n\t        });\n\t    },\n\t    destroy (chart) {\n\t        cleanDecimatedData(chart);\n\t    }\n\t};\n\n\tfunction _segments(line, target, property) {\n\t    const segments = line.segments;\n\t    const points = line.points;\n\t    const tpoints = target.points;\n\t    const parts = [];\n\t    for (const segment of segments){\n\t        let { start , end  } = segment;\n\t        end = _findSegmentEnd(start, end, points);\n\t        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\t        if (!target.segments) {\n\t            parts.push({\n\t                source: segment,\n\t                target: bounds,\n\t                start: points[start],\n\t                end: points[end]\n\t            });\n\t            continue;\n\t        }\n\t        const targetSegments = helpers_segment._boundSegments(target, bounds);\n\t        for (const tgt of targetSegments){\n\t            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\t            const fillSources = helpers_segment._boundSegment(segment, points, subBounds);\n\t            for (const fillSource of fillSources){\n\t                parts.push({\n\t                    source: fillSource,\n\t                    target: tgt,\n\t                    start: {\n\t                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n\t                    },\n\t                    end: {\n\t                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n\t                    }\n\t                });\n\t            }\n\t        }\n\t    }\n\t    return parts;\n\t}\n\tfunction _getBounds(property, first, last, loop) {\n\t    if (loop) {\n\t        return;\n\t    }\n\t    let start = first[property];\n\t    let end = last[property];\n\t    if (property === 'angle') {\n\t        start = helpers_segment._normalizeAngle(start);\n\t        end = helpers_segment._normalizeAngle(end);\n\t    }\n\t    return {\n\t        property,\n\t        start,\n\t        end\n\t    };\n\t}\n\tfunction _pointsFromSegments(boundary, line) {\n\t    const { x =null , y =null  } = boundary || {};\n\t    const linePoints = line.points;\n\t    const points = [];\n\t    line.segments.forEach(({ start , end  })=>{\n\t        end = _findSegmentEnd(start, end, linePoints);\n\t        const first = linePoints[start];\n\t        const last = linePoints[end];\n\t        if (y !== null) {\n\t            points.push({\n\t                x: first.x,\n\t                y\n\t            });\n\t            points.push({\n\t                x: last.x,\n\t                y\n\t            });\n\t        } else if (x !== null) {\n\t            points.push({\n\t                x,\n\t                y: first.y\n\t            });\n\t            points.push({\n\t                x,\n\t                y: last.y\n\t            });\n\t        }\n\t    });\n\t    return points;\n\t}\n\tfunction _findSegmentEnd(start, end, points) {\n\t    for(; end > start; end--){\n\t        const point = points[end];\n\t        if (!isNaN(point.x) && !isNaN(point.y)) {\n\t            break;\n\t        }\n\t    }\n\t    return end;\n\t}\n\tfunction _getEdge(a, b, prop, fn) {\n\t    if (a && b) {\n\t        return fn(a[prop], b[prop]);\n\t    }\n\t    return a ? a[prop] : b ? b[prop] : 0;\n\t}\n\n\tfunction _createBoundaryLine(boundary, line) {\n\t    let points = [];\n\t    let _loop = false;\n\t    if (helpers_segment.isArray(boundary)) {\n\t        _loop = true;\n\t        points = boundary;\n\t    } else {\n\t        points = _pointsFromSegments(boundary, line);\n\t    }\n\t    return points.length ? new LineElement({\n\t        points,\n\t        options: {\n\t            tension: 0\n\t        },\n\t        _loop,\n\t        _fullLoop: _loop\n\t    }) : null;\n\t}\n\tfunction _shouldApplyFill(source) {\n\t    return source && source.fill !== false;\n\t}\n\n\tfunction _resolveTarget(sources, index, propagate) {\n\t    const source = sources[index];\n\t    let fill = source.fill;\n\t    const visited = [\n\t        index\n\t    ];\n\t    let target;\n\t    if (!propagate) {\n\t        return fill;\n\t    }\n\t    while(fill !== false && visited.indexOf(fill) === -1){\n\t        if (!helpers_segment.isNumberFinite(fill)) {\n\t            return fill;\n\t        }\n\t        target = sources[fill];\n\t        if (!target) {\n\t            return false;\n\t        }\n\t        if (target.visible) {\n\t            return fill;\n\t        }\n\t        visited.push(fill);\n\t        fill = target.fill;\n\t    }\n\t    return false;\n\t}\n\t function _decodeFill(line, index, count) {\n\t     const fill = parseFillOption(line);\n\t    if (helpers_segment.isObject(fill)) {\n\t        return isNaN(fill.value) ? false : fill;\n\t    }\n\t    let target = parseFloat(fill);\n\t    if (helpers_segment.isNumberFinite(target) && Math.floor(target) === target) {\n\t        return decodeTargetIndex(fill[0], index, target, count);\n\t    }\n\t    return [\n\t        'origin',\n\t        'start',\n\t        'end',\n\t        'stack',\n\t        'shape'\n\t    ].indexOf(fill) >= 0 && fill;\n\t}\n\tfunction decodeTargetIndex(firstCh, index, target, count) {\n\t    if (firstCh === '-' || firstCh === '+') {\n\t        target = index + target;\n\t    }\n\t    if (target === index || target < 0 || target >= count) {\n\t        return false;\n\t    }\n\t    return target;\n\t}\n\t function _getTargetPixel(fill, scale) {\n\t    let pixel = null;\n\t    if (fill === 'start') {\n\t        pixel = scale.bottom;\n\t    } else if (fill === 'end') {\n\t        pixel = scale.top;\n\t    } else if (helpers_segment.isObject(fill)) {\n\t        pixel = scale.getPixelForValue(fill.value);\n\t    } else if (scale.getBasePixel) {\n\t        pixel = scale.getBasePixel();\n\t    }\n\t    return pixel;\n\t}\n\t function _getTargetValue(fill, scale, startValue) {\n\t    let value;\n\t    if (fill === 'start') {\n\t        value = startValue;\n\t    } else if (fill === 'end') {\n\t        value = scale.options.reverse ? scale.min : scale.max;\n\t    } else if (helpers_segment.isObject(fill)) {\n\t        value = fill.value;\n\t    } else {\n\t        value = scale.getBaseValue();\n\t    }\n\t    return value;\n\t}\n\t function parseFillOption(line) {\n\t    const options = line.options;\n\t    const fillOption = options.fill;\n\t    let fill = helpers_segment.valueOrDefault(fillOption && fillOption.target, fillOption);\n\t    if (fill === undefined) {\n\t        fill = !!options.backgroundColor;\n\t    }\n\t    if (fill === false || fill === null) {\n\t        return false;\n\t    }\n\t    if (fill === true) {\n\t        return 'origin';\n\t    }\n\t    return fill;\n\t}\n\n\tfunction _buildStackLine(source) {\n\t    const { scale , index , line  } = source;\n\t    const points = [];\n\t    const segments = line.segments;\n\t    const sourcePoints = line.points;\n\t    const linesBelow = getLinesBelow(scale, index);\n\t    linesBelow.push(_createBoundaryLine({\n\t        x: null,\n\t        y: scale.bottom\n\t    }, line));\n\t    for(let i = 0; i < segments.length; i++){\n\t        const segment = segments[i];\n\t        for(let j = segment.start; j <= segment.end; j++){\n\t            addPointsBelow(points, sourcePoints[j], linesBelow);\n\t        }\n\t    }\n\t    return new LineElement({\n\t        points,\n\t        options: {}\n\t    });\n\t}\n\t function getLinesBelow(scale, index) {\n\t    const below = [];\n\t    const metas = scale.getMatchingVisibleMetas('line');\n\t    for(let i = 0; i < metas.length; i++){\n\t        const meta = metas[i];\n\t        if (meta.index === index) {\n\t            break;\n\t        }\n\t        if (!meta.hidden) {\n\t            below.unshift(meta.dataset);\n\t        }\n\t    }\n\t    return below;\n\t}\n\t function addPointsBelow(points, sourcePoint, linesBelow) {\n\t    const postponed = [];\n\t    for(let j = 0; j < linesBelow.length; j++){\n\t        const line = linesBelow[j];\n\t        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n\t        if (!point || first && last) {\n\t            continue;\n\t        }\n\t        if (first) {\n\t            postponed.unshift(point);\n\t        } else {\n\t            points.push(point);\n\t            if (!last) {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    points.push(...postponed);\n\t}\n\t function findPoint(line, sourcePoint, property) {\n\t    const point = line.interpolate(sourcePoint, property);\n\t    if (!point) {\n\t        return {};\n\t    }\n\t    const pointValue = point[property];\n\t    const segments = line.segments;\n\t    const linePoints = line.points;\n\t    let first = false;\n\t    let last = false;\n\t    for(let i = 0; i < segments.length; i++){\n\t        const segment = segments[i];\n\t        const firstValue = linePoints[segment.start][property];\n\t        const lastValue = linePoints[segment.end][property];\n\t        if (helpers_segment._isBetween(pointValue, firstValue, lastValue)) {\n\t            first = pointValue === firstValue;\n\t            last = pointValue === lastValue;\n\t            break;\n\t        }\n\t    }\n\t    return {\n\t        first,\n\t        last,\n\t        point\n\t    };\n\t}\n\n\tclass simpleArc {\n\t    constructor(opts){\n\t        this.x = opts.x;\n\t        this.y = opts.y;\n\t        this.radius = opts.radius;\n\t    }\n\t    pathSegment(ctx, bounds, opts) {\n\t        const { x , y , radius  } = this;\n\t        bounds = bounds || {\n\t            start: 0,\n\t            end: helpers_segment.TAU\n\t        };\n\t        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n\t        return !opts.bounds;\n\t    }\n\t    interpolate(point) {\n\t        const { x , y , radius  } = this;\n\t        const angle = point.angle;\n\t        return {\n\t            x: x + Math.cos(angle) * radius,\n\t            y: y + Math.sin(angle) * radius,\n\t            angle\n\t        };\n\t    }\n\t}\n\n\tfunction _getTarget(source) {\n\t    const { chart , fill , line  } = source;\n\t    if (helpers_segment.isNumberFinite(fill)) {\n\t        return getLineByIndex(chart, fill);\n\t    }\n\t    if (fill === 'stack') {\n\t        return _buildStackLine(source);\n\t    }\n\t    if (fill === 'shape') {\n\t        return true;\n\t    }\n\t    const boundary = computeBoundary(source);\n\t    if (boundary instanceof simpleArc) {\n\t        return boundary;\n\t    }\n\t    return _createBoundaryLine(boundary, line);\n\t}\n\t function getLineByIndex(chart, index) {\n\t    const meta = chart.getDatasetMeta(index);\n\t    const visible = meta && chart.isDatasetVisible(index);\n\t    return visible ? meta.dataset : null;\n\t}\n\tfunction computeBoundary(source) {\n\t    const scale = source.scale || {};\n\t    if (scale.getPointPositionForValue) {\n\t        return computeCircularBoundary(source);\n\t    }\n\t    return computeLinearBoundary(source);\n\t}\n\tfunction computeLinearBoundary(source) {\n\t    const { scale ={} , fill  } = source;\n\t    const pixel = _getTargetPixel(fill, scale);\n\t    if (helpers_segment.isNumberFinite(pixel)) {\n\t        const horizontal = scale.isHorizontal();\n\t        return {\n\t            x: horizontal ? pixel : null,\n\t            y: horizontal ? null : pixel\n\t        };\n\t    }\n\t    return null;\n\t}\n\tfunction computeCircularBoundary(source) {\n\t    const { scale , fill  } = source;\n\t    const options = scale.options;\n\t    const length = scale.getLabels().length;\n\t    const start = options.reverse ? scale.max : scale.min;\n\t    const value = _getTargetValue(fill, scale, start);\n\t    const target = [];\n\t    if (options.grid.circular) {\n\t        const center = scale.getPointPositionForValue(0, start);\n\t        return new simpleArc({\n\t            x: center.x,\n\t            y: center.y,\n\t            radius: scale.getDistanceFromCenterForValue(value)\n\t        });\n\t    }\n\t    for(let i = 0; i < length; ++i){\n\t        target.push(scale.getPointPositionForValue(i, value));\n\t    }\n\t    return target;\n\t}\n\n\tfunction _drawfill(ctx, source, area) {\n\t    const target = _getTarget(source);\n\t    const { line , scale , axis  } = source;\n\t    const lineOpts = line.options;\n\t    const fillOption = lineOpts.fill;\n\t    const color = lineOpts.backgroundColor;\n\t    const { above =color , below =color  } = fillOption || {};\n\t    if (target && line.points.length) {\n\t        helpers_segment.clipArea(ctx, area);\n\t        doFill(ctx, {\n\t            line,\n\t            target,\n\t            above,\n\t            below,\n\t            area,\n\t            scale,\n\t            axis\n\t        });\n\t        helpers_segment.unclipArea(ctx);\n\t    }\n\t}\n\tfunction doFill(ctx, cfg) {\n\t    const { line , target , above , below , area , scale  } = cfg;\n\t    const property = line._loop ? 'angle' : cfg.axis;\n\t    ctx.save();\n\t    if (property === 'x' && below !== above) {\n\t        clipVertical(ctx, target, area.top);\n\t        fill(ctx, {\n\t            line,\n\t            target,\n\t            color: above,\n\t            scale,\n\t            property\n\t        });\n\t        ctx.restore();\n\t        ctx.save();\n\t        clipVertical(ctx, target, area.bottom);\n\t    }\n\t    fill(ctx, {\n\t        line,\n\t        target,\n\t        color: below,\n\t        scale,\n\t        property\n\t    });\n\t    ctx.restore();\n\t}\n\tfunction clipVertical(ctx, target, clipY) {\n\t    const { segments , points  } = target;\n\t    let first = true;\n\t    let lineLoop = false;\n\t    ctx.beginPath();\n\t    for (const segment of segments){\n\t        const { start , end  } = segment;\n\t        const firstPoint = points[start];\n\t        const lastPoint = points[_findSegmentEnd(start, end, points)];\n\t        if (first) {\n\t            ctx.moveTo(firstPoint.x, firstPoint.y);\n\t            first = false;\n\t        } else {\n\t            ctx.lineTo(firstPoint.x, clipY);\n\t            ctx.lineTo(firstPoint.x, firstPoint.y);\n\t        }\n\t        lineLoop = !!target.pathSegment(ctx, segment, {\n\t            move: lineLoop\n\t        });\n\t        if (lineLoop) {\n\t            ctx.closePath();\n\t        } else {\n\t            ctx.lineTo(lastPoint.x, clipY);\n\t        }\n\t    }\n\t    ctx.lineTo(target.first().x, clipY);\n\t    ctx.closePath();\n\t    ctx.clip();\n\t}\n\tfunction fill(ctx, cfg) {\n\t    const { line , target , property , color , scale  } = cfg;\n\t    const segments = _segments(line, target, property);\n\t    for (const { source: src , target: tgt , start , end  } of segments){\n\t        const { style: { backgroundColor =color  } = {}  } = src;\n\t        const notShape = target !== true;\n\t        ctx.save();\n\t        ctx.fillStyle = backgroundColor;\n\t        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\t        ctx.beginPath();\n\t        const lineLoop = !!line.pathSegment(ctx, src);\n\t        let loop;\n\t        if (notShape) {\n\t            if (lineLoop) {\n\t                ctx.closePath();\n\t            } else {\n\t                interpolatedLineTo(ctx, target, end, property);\n\t            }\n\t            const targetLoop = !!target.pathSegment(ctx, tgt, {\n\t                move: lineLoop,\n\t                reverse: true\n\t            });\n\t            loop = lineLoop && targetLoop;\n\t            if (!loop) {\n\t                interpolatedLineTo(ctx, target, start, property);\n\t            }\n\t        }\n\t        ctx.closePath();\n\t        ctx.fill(loop ? 'evenodd' : 'nonzero');\n\t        ctx.restore();\n\t    }\n\t}\n\tfunction clipBounds(ctx, scale, bounds) {\n\t    const { top , bottom  } = scale.chart.chartArea;\n\t    const { property , start , end  } = bounds || {};\n\t    if (property === 'x') {\n\t        ctx.beginPath();\n\t        ctx.rect(start, top, end - start, bottom - top);\n\t        ctx.clip();\n\t    }\n\t}\n\tfunction interpolatedLineTo(ctx, target, point, property) {\n\t    const interpolatedPoint = target.interpolate(point, property);\n\t    if (interpolatedPoint) {\n\t        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n\t    }\n\t}\n\n\tvar index = {\n\t    id: 'filler',\n\t    afterDatasetsUpdate (chart, _args, options) {\n\t        const count = (chart.data.datasets || []).length;\n\t        const sources = [];\n\t        let meta, i, line, source;\n\t        for(i = 0; i < count; ++i){\n\t            meta = chart.getDatasetMeta(i);\n\t            line = meta.dataset;\n\t            source = null;\n\t            if (line && line.options && line instanceof LineElement) {\n\t                source = {\n\t                    visible: chart.isDatasetVisible(i),\n\t                    index: i,\n\t                    fill: _decodeFill(line, i, count),\n\t                    chart,\n\t                    axis: meta.controller.options.indexAxis,\n\t                    scale: meta.vScale,\n\t                    line\n\t                };\n\t            }\n\t            meta.$filler = source;\n\t            sources.push(source);\n\t        }\n\t        for(i = 0; i < count; ++i){\n\t            source = sources[i];\n\t            if (!source || source.fill === false) {\n\t                continue;\n\t            }\n\t            source.fill = _resolveTarget(sources, i, options.propagate);\n\t        }\n\t    },\n\t    beforeDraw (chart, _args, options) {\n\t        const draw = options.drawTime === 'beforeDraw';\n\t        const metasets = chart.getSortedVisibleDatasetMetas();\n\t        const area = chart.chartArea;\n\t        for(let i = metasets.length - 1; i >= 0; --i){\n\t            const source = metasets[i].$filler;\n\t            if (!source) {\n\t                continue;\n\t            }\n\t            source.line.updateControlPoints(area, source.axis);\n\t            if (draw && source.fill) {\n\t                _drawfill(chart.ctx, source, area);\n\t            }\n\t        }\n\t    },\n\t    beforeDatasetsDraw (chart, _args, options) {\n\t        if (options.drawTime !== 'beforeDatasetsDraw') {\n\t            return;\n\t        }\n\t        const metasets = chart.getSortedVisibleDatasetMetas();\n\t        for(let i = metasets.length - 1; i >= 0; --i){\n\t            const source = metasets[i].$filler;\n\t            if (_shouldApplyFill(source)) {\n\t                _drawfill(chart.ctx, source, chart.chartArea);\n\t            }\n\t        }\n\t    },\n\t    beforeDatasetDraw (chart, args, options) {\n\t        const source = args.meta.$filler;\n\t        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n\t            return;\n\t        }\n\t        _drawfill(chart.ctx, source, chart.chartArea);\n\t    },\n\t    defaults: {\n\t        propagate: true,\n\t        drawTime: 'beforeDatasetDraw'\n\t    }\n\t};\n\n\tconst getBoxSize = (labelOpts, fontSize)=>{\n\t    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n\t    if (labelOpts.usePointStyle) {\n\t        boxHeight = Math.min(boxHeight, fontSize);\n\t        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n\t    }\n\t    return {\n\t        boxWidth,\n\t        boxHeight,\n\t        itemHeight: Math.max(fontSize, boxHeight)\n\t    };\n\t};\n\tconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\tclass Legend extends Element {\n\t constructor(config){\n\t        super();\n\t        this._added = false;\n\t        this.legendHitBoxes = [];\n\t this._hoveredItem = null;\n\t        this.doughnutMode = false;\n\t        this.chart = config.chart;\n\t        this.options = config.options;\n\t        this.ctx = config.ctx;\n\t        this.legendItems = undefined;\n\t        this.columnSizes = undefined;\n\t        this.lineWidths = undefined;\n\t        this.maxHeight = undefined;\n\t        this.maxWidth = undefined;\n\t        this.top = undefined;\n\t        this.bottom = undefined;\n\t        this.left = undefined;\n\t        this.right = undefined;\n\t        this.height = undefined;\n\t        this.width = undefined;\n\t        this._margins = undefined;\n\t        this.position = undefined;\n\t        this.weight = undefined;\n\t        this.fullSize = undefined;\n\t    }\n\t    update(maxWidth, maxHeight, margins) {\n\t        this.maxWidth = maxWidth;\n\t        this.maxHeight = maxHeight;\n\t        this._margins = margins;\n\t        this.setDimensions();\n\t        this.buildLabels();\n\t        this.fit();\n\t    }\n\t    setDimensions() {\n\t        if (this.isHorizontal()) {\n\t            this.width = this.maxWidth;\n\t            this.left = this._margins.left;\n\t            this.right = this.width;\n\t        } else {\n\t            this.height = this.maxHeight;\n\t            this.top = this._margins.top;\n\t            this.bottom = this.height;\n\t        }\n\t    }\n\t    buildLabels() {\n\t        const labelOpts = this.options.labels || {};\n\t        let legendItems = helpers_segment.callback(labelOpts.generateLabels, [\n\t            this.chart\n\t        ], this) || [];\n\t        if (labelOpts.filter) {\n\t            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n\t        }\n\t        if (labelOpts.sort) {\n\t            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n\t        }\n\t        if (this.options.reverse) {\n\t            legendItems.reverse();\n\t        }\n\t        this.legendItems = legendItems;\n\t    }\n\t    fit() {\n\t        const { options , ctx  } = this;\n\t        if (!options.display) {\n\t            this.width = this.height = 0;\n\t            return;\n\t        }\n\t        const labelOpts = options.labels;\n\t        const labelFont = helpers_segment.toFont(labelOpts.font);\n\t        const fontSize = labelFont.size;\n\t        const titleHeight = this._computeTitleHeight();\n\t        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n\t        let width, height;\n\t        ctx.font = labelFont.string;\n\t        if (this.isHorizontal()) {\n\t            width = this.maxWidth;\n\t            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n\t        } else {\n\t            height = this.maxHeight;\n\t            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n\t        }\n\t        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n\t        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n\t    }\n\t _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n\t        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n\t        const hitboxes = this.legendHitBoxes = [];\n\t        const lineWidths = this.lineWidths = [\n\t            0\n\t        ];\n\t        const lineHeight = itemHeight + padding;\n\t        let totalHeight = titleHeight;\n\t        ctx.textAlign = 'left';\n\t        ctx.textBaseline = 'middle';\n\t        let row = -1;\n\t        let top = -lineHeight;\n\t        this.legendItems.forEach((legendItem, i)=>{\n\t            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\t            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n\t                totalHeight += lineHeight;\n\t                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n\t                top += lineHeight;\n\t                row++;\n\t            }\n\t            hitboxes[i] = {\n\t                left: 0,\n\t                top,\n\t                row,\n\t                width: itemWidth,\n\t                height: itemHeight\n\t            };\n\t            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n\t        });\n\t        return totalHeight;\n\t    }\n\t    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n\t        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n\t        const hitboxes = this.legendHitBoxes = [];\n\t        const columnSizes = this.columnSizes = [];\n\t        const heightLimit = maxHeight - titleHeight;\n\t        let totalWidth = padding;\n\t        let currentColWidth = 0;\n\t        let currentColHeight = 0;\n\t        let left = 0;\n\t        let col = 0;\n\t        this.legendItems.forEach((legendItem, i)=>{\n\t            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\t            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n\t                totalWidth += currentColWidth + padding;\n\t                columnSizes.push({\n\t                    width: currentColWidth,\n\t                    height: currentColHeight\n\t                });\n\t                left += currentColWidth + padding;\n\t                col++;\n\t                currentColWidth = currentColHeight = 0;\n\t            }\n\t            hitboxes[i] = {\n\t                left,\n\t                top: currentColHeight,\n\t                col,\n\t                width: itemWidth,\n\t                height: itemHeight\n\t            };\n\t            currentColWidth = Math.max(currentColWidth, itemWidth);\n\t            currentColHeight += itemHeight + padding;\n\t        });\n\t        totalWidth += currentColWidth;\n\t        columnSizes.push({\n\t            width: currentColWidth,\n\t            height: currentColHeight\n\t        });\n\t        return totalWidth;\n\t    }\n\t    adjustHitBoxes() {\n\t        if (!this.options.display) {\n\t            return;\n\t        }\n\t        const titleHeight = this._computeTitleHeight();\n\t        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n\t        const rtlHelper = helpers_segment.getRtlAdapter(rtl, this.left, this.width);\n\t        if (this.isHorizontal()) {\n\t            let row = 0;\n\t            let left = helpers_segment._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\t            for (const hitbox of hitboxes){\n\t                if (row !== hitbox.row) {\n\t                    row = hitbox.row;\n\t                    left = helpers_segment._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\t                }\n\t                hitbox.top += this.top + titleHeight + padding;\n\t                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n\t                left += hitbox.width + padding;\n\t            }\n\t        } else {\n\t            let col = 0;\n\t            let top = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\t            for (const hitbox of hitboxes){\n\t                if (hitbox.col !== col) {\n\t                    col = hitbox.col;\n\t                    top = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\t                }\n\t                hitbox.top = top;\n\t                hitbox.left += this.left + padding;\n\t                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n\t                top += hitbox.height + padding;\n\t            }\n\t        }\n\t    }\n\t    isHorizontal() {\n\t        return this.options.position === 'top' || this.options.position === 'bottom';\n\t    }\n\t    draw() {\n\t        if (this.options.display) {\n\t            const ctx = this.ctx;\n\t            helpers_segment.clipArea(ctx, this);\n\t            this._draw();\n\t            helpers_segment.unclipArea(ctx);\n\t        }\n\t    }\n\t _draw() {\n\t        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n\t        const { align , labels: labelOpts  } = opts;\n\t        const defaultColor = helpers_segment.defaults.color;\n\t        const rtlHelper = helpers_segment.getRtlAdapter(opts.rtl, this.left, this.width);\n\t        const labelFont = helpers_segment.toFont(labelOpts.font);\n\t        const { padding  } = labelOpts;\n\t        const fontSize = labelFont.size;\n\t        const halfFontSize = fontSize / 2;\n\t        let cursor;\n\t        this.drawTitle();\n\t        ctx.textAlign = rtlHelper.textAlign('left');\n\t        ctx.textBaseline = 'middle';\n\t        ctx.lineWidth = 0.5;\n\t        ctx.font = labelFont.string;\n\t        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n\t        const drawLegendBox = function(x, y, legendItem) {\n\t            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n\t                return;\n\t            }\n\t            ctx.save();\n\t            const lineWidth = helpers_segment.valueOrDefault(legendItem.lineWidth, 1);\n\t            ctx.fillStyle = helpers_segment.valueOrDefault(legendItem.fillStyle, defaultColor);\n\t            ctx.lineCap = helpers_segment.valueOrDefault(legendItem.lineCap, 'butt');\n\t            ctx.lineDashOffset = helpers_segment.valueOrDefault(legendItem.lineDashOffset, 0);\n\t            ctx.lineJoin = helpers_segment.valueOrDefault(legendItem.lineJoin, 'miter');\n\t            ctx.lineWidth = lineWidth;\n\t            ctx.strokeStyle = helpers_segment.valueOrDefault(legendItem.strokeStyle, defaultColor);\n\t            ctx.setLineDash(helpers_segment.valueOrDefault(legendItem.lineDash, []));\n\t            if (labelOpts.usePointStyle) {\n\t                const drawOptions = {\n\t                    radius: boxHeight * Math.SQRT2 / 2,\n\t                    pointStyle: legendItem.pointStyle,\n\t                    rotation: legendItem.rotation,\n\t                    borderWidth: lineWidth\n\t                };\n\t                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n\t                const centerY = y + halfFontSize;\n\t                helpers_segment.drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n\t            } else {\n\t                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n\t                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n\t                const borderRadius = helpers_segment.toTRBLCorners(legendItem.borderRadius);\n\t                ctx.beginPath();\n\t                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n\t                    helpers_segment.addRoundedRectPath(ctx, {\n\t                        x: xBoxLeft,\n\t                        y: yBoxTop,\n\t                        w: boxWidth,\n\t                        h: boxHeight,\n\t                        radius: borderRadius\n\t                    });\n\t                } else {\n\t                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n\t                }\n\t                ctx.fill();\n\t                if (lineWidth !== 0) {\n\t                    ctx.stroke();\n\t                }\n\t            }\n\t            ctx.restore();\n\t        };\n\t        const fillText = function(x, y, legendItem) {\n\t            helpers_segment.renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n\t                strikethrough: legendItem.hidden,\n\t                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n\t            });\n\t        };\n\t        const isHorizontal = this.isHorizontal();\n\t        const titleHeight = this._computeTitleHeight();\n\t        if (isHorizontal) {\n\t            cursor = {\n\t                x: helpers_segment._alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n\t                y: this.top + padding + titleHeight,\n\t                line: 0\n\t            };\n\t        } else {\n\t            cursor = {\n\t                x: this.left + padding,\n\t                y: helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n\t                line: 0\n\t            };\n\t        }\n\t        helpers_segment.overrideTextDirection(this.ctx, opts.textDirection);\n\t        const lineHeight = itemHeight + padding;\n\t        this.legendItems.forEach((legendItem, i)=>{\n\t            ctx.strokeStyle = legendItem.fontColor;\n\t            ctx.fillStyle = legendItem.fontColor;\n\t            const textWidth = ctx.measureText(legendItem.text).width;\n\t            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n\t            const width = boxWidth + halfFontSize + textWidth;\n\t            let x = cursor.x;\n\t            let y = cursor.y;\n\t            rtlHelper.setWidth(this.width);\n\t            if (isHorizontal) {\n\t                if (i > 0 && x + width + padding > this.right) {\n\t                    y = cursor.y += lineHeight;\n\t                    cursor.line++;\n\t                    x = cursor.x = helpers_segment._alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n\t                }\n\t            } else if (i > 0 && y + lineHeight > this.bottom) {\n\t                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n\t                cursor.line++;\n\t                y = cursor.y = helpers_segment._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n\t            }\n\t            const realX = rtlHelper.x(x);\n\t            drawLegendBox(realX, y, legendItem);\n\t            x = helpers_segment._textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\t            fillText(rtlHelper.x(x), y, legendItem);\n\t            if (isHorizontal) {\n\t                cursor.x += width + padding;\n\t            } else if (typeof legendItem.text !== 'string') {\n\t                const fontLineHeight = labelFont.lineHeight;\n\t                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n\t            } else {\n\t                cursor.y += lineHeight;\n\t            }\n\t        });\n\t        helpers_segment.restoreTextDirection(this.ctx, opts.textDirection);\n\t    }\n\t drawTitle() {\n\t        const opts = this.options;\n\t        const titleOpts = opts.title;\n\t        const titleFont = helpers_segment.toFont(titleOpts.font);\n\t        const titlePadding = helpers_segment.toPadding(titleOpts.padding);\n\t        if (!titleOpts.display) {\n\t            return;\n\t        }\n\t        const rtlHelper = helpers_segment.getRtlAdapter(opts.rtl, this.left, this.width);\n\t        const ctx = this.ctx;\n\t        const position = titleOpts.position;\n\t        const halfFontSize = titleFont.size / 2;\n\t        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n\t        let y;\n\t        let left = this.left;\n\t        let maxWidth = this.width;\n\t        if (this.isHorizontal()) {\n\t            maxWidth = Math.max(...this.lineWidths);\n\t            y = this.top + topPaddingPlusHalfFontSize;\n\t            left = helpers_segment._alignStartEnd(opts.align, left, this.right - maxWidth);\n\t        } else {\n\t            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n\t            y = topPaddingPlusHalfFontSize + helpers_segment._alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n\t        }\n\t        const x = helpers_segment._alignStartEnd(position, left, left + maxWidth);\n\t        ctx.textAlign = rtlHelper.textAlign(helpers_segment._toLeftRightCenter(position));\n\t        ctx.textBaseline = 'middle';\n\t        ctx.strokeStyle = titleOpts.color;\n\t        ctx.fillStyle = titleOpts.color;\n\t        ctx.font = titleFont.string;\n\t        helpers_segment.renderText(ctx, titleOpts.text, x, y, titleFont);\n\t    }\n\t _computeTitleHeight() {\n\t        const titleOpts = this.options.title;\n\t        const titleFont = helpers_segment.toFont(titleOpts.font);\n\t        const titlePadding = helpers_segment.toPadding(titleOpts.padding);\n\t        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n\t    }\n\t _getLegendItemAt(x, y) {\n\t        let i, hitBox, lh;\n\t        if (helpers_segment._isBetween(x, this.left, this.right) && helpers_segment._isBetween(y, this.top, this.bottom)) {\n\t            lh = this.legendHitBoxes;\n\t            for(i = 0; i < lh.length; ++i){\n\t                hitBox = lh[i];\n\t                if (helpers_segment._isBetween(x, hitBox.left, hitBox.left + hitBox.width) && helpers_segment._isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n\t                    return this.legendItems[i];\n\t                }\n\t            }\n\t        }\n\t        return null;\n\t    }\n\t handleEvent(e) {\n\t        const opts = this.options;\n\t        if (!isListened(e.type, opts)) {\n\t            return;\n\t        }\n\t        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\t        if (e.type === 'mousemove' || e.type === 'mouseout') {\n\t            const previous = this._hoveredItem;\n\t            const sameItem = itemsEqual(previous, hoveredItem);\n\t            if (previous && !sameItem) {\n\t                helpers_segment.callback(opts.onLeave, [\n\t                    e,\n\t                    previous,\n\t                    this\n\t                ], this);\n\t            }\n\t            this._hoveredItem = hoveredItem;\n\t            if (hoveredItem && !sameItem) {\n\t                helpers_segment.callback(opts.onHover, [\n\t                    e,\n\t                    hoveredItem,\n\t                    this\n\t                ], this);\n\t            }\n\t        } else if (hoveredItem) {\n\t            helpers_segment.callback(opts.onClick, [\n\t                e,\n\t                hoveredItem,\n\t                this\n\t            ], this);\n\t        }\n\t    }\n\t}\n\tfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n\t    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n\t    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n\t    return {\n\t        itemWidth,\n\t        itemHeight\n\t    };\n\t}\n\tfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n\t    let legendItemText = legendItem.text;\n\t    if (legendItemText && typeof legendItemText !== 'string') {\n\t        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n\t    }\n\t    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n\t}\n\tfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n\t    let itemHeight = _itemHeight;\n\t    if (typeof legendItem.text !== 'string') {\n\t        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n\t    }\n\t    return itemHeight;\n\t}\n\tfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n\t    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n\t    return fontLineHeight * labelHeight;\n\t}\n\tfunction isListened(type, opts) {\n\t    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n\t        return true;\n\t    }\n\t    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\tvar plugin_legend = {\n\t    id: 'legend',\n\t _element: Legend,\n\t    start (chart, _args, options) {\n\t        const legend = chart.legend = new Legend({\n\t            ctx: chart.ctx,\n\t            options,\n\t            chart\n\t        });\n\t        layouts.configure(chart, legend, options);\n\t        layouts.addBox(chart, legend);\n\t    },\n\t    stop (chart) {\n\t        layouts.removeBox(chart, chart.legend);\n\t        delete chart.legend;\n\t    },\n\t    beforeUpdate (chart, _args, options) {\n\t        const legend = chart.legend;\n\t        layouts.configure(chart, legend, options);\n\t        legend.options = options;\n\t    },\n\t    afterUpdate (chart) {\n\t        const legend = chart.legend;\n\t        legend.buildLabels();\n\t        legend.adjustHitBoxes();\n\t    },\n\t    afterEvent (chart, args) {\n\t        if (!args.replay) {\n\t            chart.legend.handleEvent(args.event);\n\t        }\n\t    },\n\t    defaults: {\n\t        display: true,\n\t        position: 'top',\n\t        align: 'center',\n\t        fullSize: true,\n\t        reverse: false,\n\t        weight: 1000,\n\t        onClick (e, legendItem, legend) {\n\t            const index = legendItem.datasetIndex;\n\t            const ci = legend.chart;\n\t            if (ci.isDatasetVisible(index)) {\n\t                ci.hide(index);\n\t                legendItem.hidden = true;\n\t            } else {\n\t                ci.show(index);\n\t                legendItem.hidden = false;\n\t            }\n\t        },\n\t        onHover: null,\n\t        onLeave: null,\n\t        labels: {\n\t            color: (ctx)=>ctx.chart.options.color,\n\t            boxWidth: 40,\n\t            padding: 10,\n\t            generateLabels (chart) {\n\t                const datasets = chart.data.datasets;\n\t                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n\t                return chart._getSortedDatasetMetas().map((meta)=>{\n\t                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n\t                    const borderWidth = helpers_segment.toPadding(style.borderWidth);\n\t                    return {\n\t                        text: datasets[meta.index].label,\n\t                        fillStyle: style.backgroundColor,\n\t                        fontColor: color,\n\t                        hidden: !meta.visible,\n\t                        lineCap: style.borderCapStyle,\n\t                        lineDash: style.borderDash,\n\t                        lineDashOffset: style.borderDashOffset,\n\t                        lineJoin: style.borderJoinStyle,\n\t                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n\t                        strokeStyle: style.borderColor,\n\t                        pointStyle: pointStyle || style.pointStyle,\n\t                        rotation: style.rotation,\n\t                        textAlign: textAlign || style.textAlign,\n\t                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\t                        datasetIndex: meta.index\n\t                    };\n\t                }, this);\n\t            }\n\t        },\n\t        title: {\n\t            color: (ctx)=>ctx.chart.options.color,\n\t            display: false,\n\t            position: 'center',\n\t            text: ''\n\t        }\n\t    },\n\t    descriptors: {\n\t        _scriptable: (name)=>!name.startsWith('on'),\n\t        labels: {\n\t            _scriptable: (name)=>![\n\t                    'generateLabels',\n\t                    'filter',\n\t                    'sort'\n\t                ].includes(name)\n\t        }\n\t    }\n\t};\n\n\tclass Title extends Element {\n\t constructor(config){\n\t        super();\n\t        this.chart = config.chart;\n\t        this.options = config.options;\n\t        this.ctx = config.ctx;\n\t        this._padding = undefined;\n\t        this.top = undefined;\n\t        this.bottom = undefined;\n\t        this.left = undefined;\n\t        this.right = undefined;\n\t        this.width = undefined;\n\t        this.height = undefined;\n\t        this.position = undefined;\n\t        this.weight = undefined;\n\t        this.fullSize = undefined;\n\t    }\n\t    update(maxWidth, maxHeight) {\n\t        const opts = this.options;\n\t        this.left = 0;\n\t        this.top = 0;\n\t        if (!opts.display) {\n\t            this.width = this.height = this.right = this.bottom = 0;\n\t            return;\n\t        }\n\t        this.width = this.right = maxWidth;\n\t        this.height = this.bottom = maxHeight;\n\t        const lineCount = helpers_segment.isArray(opts.text) ? opts.text.length : 1;\n\t        this._padding = helpers_segment.toPadding(opts.padding);\n\t        const textSize = lineCount * helpers_segment.toFont(opts.font).lineHeight + this._padding.height;\n\t        if (this.isHorizontal()) {\n\t            this.height = textSize;\n\t        } else {\n\t            this.width = textSize;\n\t        }\n\t    }\n\t    isHorizontal() {\n\t        const pos = this.options.position;\n\t        return pos === 'top' || pos === 'bottom';\n\t    }\n\t    _drawArgs(offset) {\n\t        const { top , left , bottom , right , options  } = this;\n\t        const align = options.align;\n\t        let rotation = 0;\n\t        let maxWidth, titleX, titleY;\n\t        if (this.isHorizontal()) {\n\t            titleX = helpers_segment._alignStartEnd(align, left, right);\n\t            titleY = top + offset;\n\t            maxWidth = right - left;\n\t        } else {\n\t            if (options.position === 'left') {\n\t                titleX = left + offset;\n\t                titleY = helpers_segment._alignStartEnd(align, bottom, top);\n\t                rotation = helpers_segment.PI * -0.5;\n\t            } else {\n\t                titleX = right - offset;\n\t                titleY = helpers_segment._alignStartEnd(align, top, bottom);\n\t                rotation = helpers_segment.PI * 0.5;\n\t            }\n\t            maxWidth = bottom - top;\n\t        }\n\t        return {\n\t            titleX,\n\t            titleY,\n\t            maxWidth,\n\t            rotation\n\t        };\n\t    }\n\t    draw() {\n\t        const ctx = this.ctx;\n\t        const opts = this.options;\n\t        if (!opts.display) {\n\t            return;\n\t        }\n\t        const fontOpts = helpers_segment.toFont(opts.font);\n\t        const lineHeight = fontOpts.lineHeight;\n\t        const offset = lineHeight / 2 + this._padding.top;\n\t        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n\t        helpers_segment.renderText(ctx, opts.text, 0, 0, fontOpts, {\n\t            color: opts.color,\n\t            maxWidth,\n\t            rotation,\n\t            textAlign: helpers_segment._toLeftRightCenter(opts.align),\n\t            textBaseline: 'middle',\n\t            translation: [\n\t                titleX,\n\t                titleY\n\t            ]\n\t        });\n\t    }\n\t}\n\tfunction createTitle(chart, titleOpts) {\n\t    const title = new Title({\n\t        ctx: chart.ctx,\n\t        options: titleOpts,\n\t        chart\n\t    });\n\t    layouts.configure(chart, title, titleOpts);\n\t    layouts.addBox(chart, title);\n\t    chart.titleBlock = title;\n\t}\n\tvar plugin_title = {\n\t    id: 'title',\n\t _element: Title,\n\t    start (chart, _args, options) {\n\t        createTitle(chart, options);\n\t    },\n\t    stop (chart) {\n\t        const titleBlock = chart.titleBlock;\n\t        layouts.removeBox(chart, titleBlock);\n\t        delete chart.titleBlock;\n\t    },\n\t    beforeUpdate (chart, _args, options) {\n\t        const title = chart.titleBlock;\n\t        layouts.configure(chart, title, options);\n\t        title.options = options;\n\t    },\n\t    defaults: {\n\t        align: 'center',\n\t        display: false,\n\t        font: {\n\t            weight: 'bold'\n\t        },\n\t        fullSize: true,\n\t        padding: 10,\n\t        position: 'top',\n\t        text: '',\n\t        weight: 2000\n\t    },\n\t    defaultRoutes: {\n\t        color: 'color'\n\t    },\n\t    descriptors: {\n\t        _scriptable: true,\n\t        _indexable: false\n\t    }\n\t};\n\n\tconst map = new WeakMap();\n\tvar plugin_subtitle = {\n\t    id: 'subtitle',\n\t    start (chart, _args, options) {\n\t        const title = new Title({\n\t            ctx: chart.ctx,\n\t            options,\n\t            chart\n\t        });\n\t        layouts.configure(chart, title, options);\n\t        layouts.addBox(chart, title);\n\t        map.set(chart, title);\n\t    },\n\t    stop (chart) {\n\t        layouts.removeBox(chart, map.get(chart));\n\t        map.delete(chart);\n\t    },\n\t    beforeUpdate (chart, _args, options) {\n\t        const title = map.get(chart);\n\t        layouts.configure(chart, title, options);\n\t        title.options = options;\n\t    },\n\t    defaults: {\n\t        align: 'center',\n\t        display: false,\n\t        font: {\n\t            weight: 'normal'\n\t        },\n\t        fullSize: true,\n\t        padding: 0,\n\t        position: 'top',\n\t        text: '',\n\t        weight: 1500\n\t    },\n\t    defaultRoutes: {\n\t        color: 'color'\n\t    },\n\t    descriptors: {\n\t        _scriptable: true,\n\t        _indexable: false\n\t    }\n\t};\n\n\tconst positioners = {\n\t average (items) {\n\t        if (!items.length) {\n\t            return false;\n\t        }\n\t        let i, len;\n\t        let xSet = new Set();\n\t        let y = 0;\n\t        let count = 0;\n\t        for(i = 0, len = items.length; i < len; ++i){\n\t            const el = items[i].element;\n\t            if (el && el.hasValue()) {\n\t                const pos = el.tooltipPosition();\n\t                xSet.add(pos.x);\n\t                y += pos.y;\n\t                ++count;\n\t            }\n\t        }\n\t        if (count === 0 || xSet.size === 0) {\n\t            return false;\n\t        }\n\t        const xAverage = [\n\t            ...xSet\n\t        ].reduce((a, b)=>a + b) / xSet.size;\n\t        return {\n\t            x: xAverage,\n\t            y: y / count\n\t        };\n\t    },\n\t nearest (items, eventPosition) {\n\t        if (!items.length) {\n\t            return false;\n\t        }\n\t        let x = eventPosition.x;\n\t        let y = eventPosition.y;\n\t        let minDistance = Number.POSITIVE_INFINITY;\n\t        let i, len, nearestElement;\n\t        for(i = 0, len = items.length; i < len; ++i){\n\t            const el = items[i].element;\n\t            if (el && el.hasValue()) {\n\t                const center = el.getCenterPoint();\n\t                const d = helpers_segment.distanceBetweenPoints(eventPosition, center);\n\t                if (d < minDistance) {\n\t                    minDistance = d;\n\t                    nearestElement = el;\n\t                }\n\t            }\n\t        }\n\t        if (nearestElement) {\n\t            const tp = nearestElement.tooltipPosition();\n\t            x = tp.x;\n\t            y = tp.y;\n\t        }\n\t        return {\n\t            x,\n\t            y\n\t        };\n\t    }\n\t};\n\tfunction pushOrConcat(base, toPush) {\n\t    if (toPush) {\n\t        if (helpers_segment.isArray(toPush)) {\n\t            Array.prototype.push.apply(base, toPush);\n\t        } else {\n\t            base.push(toPush);\n\t        }\n\t    }\n\t    return base;\n\t}\n\t function splitNewlines(str) {\n\t    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n\t        return str.split('\\n');\n\t    }\n\t    return str;\n\t}\n\t function createTooltipItem(chart, item) {\n\t    const { element , datasetIndex , index  } = item;\n\t    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\t    const { label , value  } = controller.getLabelAndValue(index);\n\t    return {\n\t        chart,\n\t        label,\n\t        parsed: controller.getParsed(index),\n\t        raw: chart.data.datasets[datasetIndex].data[index],\n\t        formattedValue: value,\n\t        dataset: controller.getDataset(),\n\t        dataIndex: index,\n\t        datasetIndex,\n\t        element\n\t    };\n\t}\n\t function getTooltipSize(tooltip, options) {\n\t    const ctx = tooltip.chart.ctx;\n\t    const { body , footer , title  } = tooltip;\n\t    const { boxWidth , boxHeight  } = options;\n\t    const bodyFont = helpers_segment.toFont(options.bodyFont);\n\t    const titleFont = helpers_segment.toFont(options.titleFont);\n\t    const footerFont = helpers_segment.toFont(options.footerFont);\n\t    const titleLineCount = title.length;\n\t    const footerLineCount = footer.length;\n\t    const bodyLineItemCount = body.length;\n\t    const padding = helpers_segment.toPadding(options.padding);\n\t    let height = padding.height;\n\t    let width = 0;\n\t    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n\t    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\t    if (titleLineCount) {\n\t        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n\t    }\n\t    if (combinedBodyLength) {\n\t        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n\t        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n\t    }\n\t    if (footerLineCount) {\n\t        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n\t    }\n\t    let widthPadding = 0;\n\t    const maxLineWidth = function(line) {\n\t        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t    };\n\t    ctx.save();\n\t    ctx.font = titleFont.string;\n\t    helpers_segment.each(tooltip.title, maxLineWidth);\n\t    ctx.font = bodyFont.string;\n\t    helpers_segment.each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\t    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n\t    helpers_segment.each(body, (bodyItem)=>{\n\t        helpers_segment.each(bodyItem.before, maxLineWidth);\n\t        helpers_segment.each(bodyItem.lines, maxLineWidth);\n\t        helpers_segment.each(bodyItem.after, maxLineWidth);\n\t    });\n\t    widthPadding = 0;\n\t    ctx.font = footerFont.string;\n\t    helpers_segment.each(tooltip.footer, maxLineWidth);\n\t    ctx.restore();\n\t    width += padding.width;\n\t    return {\n\t        width,\n\t        height\n\t    };\n\t}\n\tfunction determineYAlign(chart, size) {\n\t    const { y , height  } = size;\n\t    if (y < height / 2) {\n\t        return 'top';\n\t    } else if (y > chart.height - height / 2) {\n\t        return 'bottom';\n\t    }\n\t    return 'center';\n\t}\n\tfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n\t    const { x , width  } = size;\n\t    const caret = options.caretSize + options.caretPadding;\n\t    if (xAlign === 'left' && x + width + caret > chart.width) {\n\t        return true;\n\t    }\n\t    if (xAlign === 'right' && x - width - caret < 0) {\n\t        return true;\n\t    }\n\t}\n\tfunction determineXAlign(chart, options, size, yAlign) {\n\t    const { x , width  } = size;\n\t    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n\t    let xAlign = 'center';\n\t    if (yAlign === 'center') {\n\t        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n\t    } else if (x <= width / 2) {\n\t        xAlign = 'left';\n\t    } else if (x >= chartWidth - width / 2) {\n\t        xAlign = 'right';\n\t    }\n\t    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n\t        xAlign = 'center';\n\t    }\n\t    return xAlign;\n\t}\n\t function determineAlignment(chart, options, size) {\n\t    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\t    return {\n\t        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n\t        yAlign\n\t    };\n\t}\n\tfunction alignX(size, xAlign) {\n\t    let { x , width  } = size;\n\t    if (xAlign === 'right') {\n\t        x -= width;\n\t    } else if (xAlign === 'center') {\n\t        x -= width / 2;\n\t    }\n\t    return x;\n\t}\n\tfunction alignY(size, yAlign, paddingAndSize) {\n\t    let { y , height  } = size;\n\t    if (yAlign === 'top') {\n\t        y += paddingAndSize;\n\t    } else if (yAlign === 'bottom') {\n\t        y -= height + paddingAndSize;\n\t    } else {\n\t        y -= height / 2;\n\t    }\n\t    return y;\n\t}\n\t function getBackgroundPoint(options, size, alignment, chart) {\n\t    const { caretSize , caretPadding , cornerRadius  } = options;\n\t    const { xAlign , yAlign  } = alignment;\n\t    const paddingAndSize = caretSize + caretPadding;\n\t    const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_segment.toTRBLCorners(cornerRadius);\n\t    let x = alignX(size, xAlign);\n\t    const y = alignY(size, yAlign, paddingAndSize);\n\t    if (yAlign === 'center') {\n\t        if (xAlign === 'left') {\n\t            x += paddingAndSize;\n\t        } else if (xAlign === 'right') {\n\t            x -= paddingAndSize;\n\t        }\n\t    } else if (xAlign === 'left') {\n\t        x -= Math.max(topLeft, bottomLeft) + caretSize;\n\t    } else if (xAlign === 'right') {\n\t        x += Math.max(topRight, bottomRight) + caretSize;\n\t    }\n\t    return {\n\t        x: helpers_segment._limitValue(x, 0, chart.width - size.width),\n\t        y: helpers_segment._limitValue(y, 0, chart.height - size.height)\n\t    };\n\t}\n\tfunction getAlignedX(tooltip, align, options) {\n\t    const padding = helpers_segment.toPadding(options.padding);\n\t    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n\t}\n\t function getBeforeAfterBodyLines(callback) {\n\t    return pushOrConcat([], splitNewlines(callback));\n\t}\n\tfunction createTooltipContext(parent, tooltip, tooltipItems) {\n\t    return helpers_segment.createContext(parent, {\n\t        tooltip,\n\t        tooltipItems,\n\t        type: 'tooltip'\n\t    });\n\t}\n\tfunction overrideCallbacks(callbacks, context) {\n\t    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n\t    return override ? callbacks.override(override) : callbacks;\n\t}\n\tconst defaultCallbacks = {\n\t    beforeTitle: helpers_segment.noop,\n\t    title (tooltipItems) {\n\t        if (tooltipItems.length > 0) {\n\t            const item = tooltipItems[0];\n\t            const labels = item.chart.data.labels;\n\t            const labelCount = labels ? labels.length : 0;\n\t            if (this && this.options && this.options.mode === 'dataset') {\n\t                return item.dataset.label || '';\n\t            } else if (item.label) {\n\t                return item.label;\n\t            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n\t                return labels[item.dataIndex];\n\t            }\n\t        }\n\t        return '';\n\t    },\n\t    afterTitle: helpers_segment.noop,\n\t    beforeBody: helpers_segment.noop,\n\t    beforeLabel: helpers_segment.noop,\n\t    label (tooltipItem) {\n\t        if (this && this.options && this.options.mode === 'dataset') {\n\t            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n\t        }\n\t        let label = tooltipItem.dataset.label || '';\n\t        if (label) {\n\t            label += ': ';\n\t        }\n\t        const value = tooltipItem.formattedValue;\n\t        if (!helpers_segment.isNullOrUndef(value)) {\n\t            label += value;\n\t        }\n\t        return label;\n\t    },\n\t    labelColor (tooltipItem) {\n\t        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n\t        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n\t        return {\n\t            borderColor: options.borderColor,\n\t            backgroundColor: options.backgroundColor,\n\t            borderWidth: options.borderWidth,\n\t            borderDash: options.borderDash,\n\t            borderDashOffset: options.borderDashOffset,\n\t            borderRadius: 0\n\t        };\n\t    },\n\t    labelTextColor () {\n\t        return this.options.bodyColor;\n\t    },\n\t    labelPointStyle (tooltipItem) {\n\t        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n\t        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n\t        return {\n\t            pointStyle: options.pointStyle,\n\t            rotation: options.rotation\n\t        };\n\t    },\n\t    afterLabel: helpers_segment.noop,\n\t    afterBody: helpers_segment.noop,\n\t    beforeFooter: helpers_segment.noop,\n\t    footer: helpers_segment.noop,\n\t    afterFooter: helpers_segment.noop\n\t};\n\t function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n\t    const result = callbacks[name].call(ctx, arg);\n\t    if (typeof result === 'undefined') {\n\t        return defaultCallbacks[name].call(ctx, arg);\n\t    }\n\t    return result;\n\t}\n\tclass Tooltip extends Element {\n\t static positioners = positioners;\n\t    constructor(config){\n\t        super();\n\t        this.opacity = 0;\n\t        this._active = [];\n\t        this._eventPosition = undefined;\n\t        this._size = undefined;\n\t        this._cachedAnimations = undefined;\n\t        this._tooltipItems = [];\n\t        this.$animations = undefined;\n\t        this.$context = undefined;\n\t        this.chart = config.chart;\n\t        this.options = config.options;\n\t        this.dataPoints = undefined;\n\t        this.title = undefined;\n\t        this.beforeBody = undefined;\n\t        this.body = undefined;\n\t        this.afterBody = undefined;\n\t        this.footer = undefined;\n\t        this.xAlign = undefined;\n\t        this.yAlign = undefined;\n\t        this.x = undefined;\n\t        this.y = undefined;\n\t        this.height = undefined;\n\t        this.width = undefined;\n\t        this.caretX = undefined;\n\t        this.caretY = undefined;\n\t        this.labelColors = undefined;\n\t        this.labelPointStyles = undefined;\n\t        this.labelTextColors = undefined;\n\t    }\n\t    initialize(options) {\n\t        this.options = options;\n\t        this._cachedAnimations = undefined;\n\t        this.$context = undefined;\n\t    }\n\t _resolveAnimations() {\n\t        const cached = this._cachedAnimations;\n\t        if (cached) {\n\t            return cached;\n\t        }\n\t        const chart = this.chart;\n\t        const options = this.options.setContext(this.getContext());\n\t        const opts = options.enabled && chart.options.animation && options.animations;\n\t        const animations = new Animations(this.chart, opts);\n\t        if (opts._cacheable) {\n\t            this._cachedAnimations = Object.freeze(animations);\n\t        }\n\t        return animations;\n\t    }\n\t getContext() {\n\t        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n\t    }\n\t    getTitle(context, options) {\n\t        const { callbacks  } = options;\n\t        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n\t        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n\t        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\t        let lines = [];\n\t        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n\t        lines = pushOrConcat(lines, splitNewlines(title));\n\t        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\t        return lines;\n\t    }\n\t    getBeforeBody(tooltipItems, options) {\n\t        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n\t    }\n\t    getBody(tooltipItems, options) {\n\t        const { callbacks  } = options;\n\t        const bodyItems = [];\n\t        helpers_segment.each(tooltipItems, (context)=>{\n\t            const bodyItem = {\n\t                before: [],\n\t                lines: [],\n\t                after: []\n\t            };\n\t            const scoped = overrideCallbacks(callbacks, context);\n\t            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n\t            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n\t            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\t            bodyItems.push(bodyItem);\n\t        });\n\t        return bodyItems;\n\t    }\n\t    getAfterBody(tooltipItems, options) {\n\t        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n\t    }\n\t    getFooter(tooltipItems, options) {\n\t        const { callbacks  } = options;\n\t        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n\t        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n\t        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\t        let lines = [];\n\t        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n\t        lines = pushOrConcat(lines, splitNewlines(footer));\n\t        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\t        return lines;\n\t    }\n\t _createItems(options) {\n\t        const active = this._active;\n\t        const data = this.chart.data;\n\t        const labelColors = [];\n\t        const labelPointStyles = [];\n\t        const labelTextColors = [];\n\t        let tooltipItems = [];\n\t        let i, len;\n\t        for(i = 0, len = active.length; i < len; ++i){\n\t            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n\t        }\n\t        if (options.filter) {\n\t            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n\t        }\n\t        if (options.itemSort) {\n\t            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n\t        }\n\t        helpers_segment.each(tooltipItems, (context)=>{\n\t            const scoped = overrideCallbacks(options.callbacks, context);\n\t            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n\t            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n\t            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n\t        });\n\t        this.labelColors = labelColors;\n\t        this.labelPointStyles = labelPointStyles;\n\t        this.labelTextColors = labelTextColors;\n\t        this.dataPoints = tooltipItems;\n\t        return tooltipItems;\n\t    }\n\t    update(changed, replay) {\n\t        const options = this.options.setContext(this.getContext());\n\t        const active = this._active;\n\t        let properties;\n\t        let tooltipItems = [];\n\t        if (!active.length) {\n\t            if (this.opacity !== 0) {\n\t                properties = {\n\t                    opacity: 0\n\t                };\n\t            }\n\t        } else {\n\t            const position = positioners[options.position].call(this, active, this._eventPosition);\n\t            tooltipItems = this._createItems(options);\n\t            this.title = this.getTitle(tooltipItems, options);\n\t            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n\t            this.body = this.getBody(tooltipItems, options);\n\t            this.afterBody = this.getAfterBody(tooltipItems, options);\n\t            this.footer = this.getFooter(tooltipItems, options);\n\t            const size = this._size = getTooltipSize(this, options);\n\t            const positionAndSize = Object.assign({}, position, size);\n\t            const alignment = determineAlignment(this.chart, options, positionAndSize);\n\t            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\t            this.xAlign = alignment.xAlign;\n\t            this.yAlign = alignment.yAlign;\n\t            properties = {\n\t                opacity: 1,\n\t                x: backgroundPoint.x,\n\t                y: backgroundPoint.y,\n\t                width: size.width,\n\t                height: size.height,\n\t                caretX: position.x,\n\t                caretY: position.y\n\t            };\n\t        }\n\t        this._tooltipItems = tooltipItems;\n\t        this.$context = undefined;\n\t        if (properties) {\n\t            this._resolveAnimations().update(this, properties);\n\t        }\n\t        if (changed && options.external) {\n\t            options.external.call(this, {\n\t                chart: this.chart,\n\t                tooltip: this,\n\t                replay\n\t            });\n\t        }\n\t    }\n\t    drawCaret(tooltipPoint, ctx, size, options) {\n\t        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\t        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n\t        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n\t        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n\t    }\n\t    getCaretPosition(tooltipPoint, size, options) {\n\t        const { xAlign , yAlign  } = this;\n\t        const { caretSize , cornerRadius  } = options;\n\t        const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_segment.toTRBLCorners(cornerRadius);\n\t        const { x: ptX , y: ptY  } = tooltipPoint;\n\t        const { width , height  } = size;\n\t        let x1, x2, x3, y1, y2, y3;\n\t        if (yAlign === 'center') {\n\t            y2 = ptY + height / 2;\n\t            if (xAlign === 'left') {\n\t                x1 = ptX;\n\t                x2 = x1 - caretSize;\n\t                y1 = y2 + caretSize;\n\t                y3 = y2 - caretSize;\n\t            } else {\n\t                x1 = ptX + width;\n\t                x2 = x1 + caretSize;\n\t                y1 = y2 - caretSize;\n\t                y3 = y2 + caretSize;\n\t            }\n\t            x3 = x1;\n\t        } else {\n\t            if (xAlign === 'left') {\n\t                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n\t            } else if (xAlign === 'right') {\n\t                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n\t            } else {\n\t                x2 = this.caretX;\n\t            }\n\t            if (yAlign === 'top') {\n\t                y1 = ptY;\n\t                y2 = y1 - caretSize;\n\t                x1 = x2 - caretSize;\n\t                x3 = x2 + caretSize;\n\t            } else {\n\t                y1 = ptY + height;\n\t                y2 = y1 + caretSize;\n\t                x1 = x2 + caretSize;\n\t                x3 = x2 - caretSize;\n\t            }\n\t            y3 = y1;\n\t        }\n\t        return {\n\t            x1,\n\t            x2,\n\t            x3,\n\t            y1,\n\t            y2,\n\t            y3\n\t        };\n\t    }\n\t    drawTitle(pt, ctx, options) {\n\t        const title = this.title;\n\t        const length = title.length;\n\t        let titleFont, titleSpacing, i;\n\t        if (length) {\n\t            const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n\t            pt.x = getAlignedX(this, options.titleAlign, options);\n\t            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n\t            ctx.textBaseline = 'middle';\n\t            titleFont = helpers_segment.toFont(options.titleFont);\n\t            titleSpacing = options.titleSpacing;\n\t            ctx.fillStyle = options.titleColor;\n\t            ctx.font = titleFont.string;\n\t            for(i = 0; i < length; ++i){\n\t                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n\t                pt.y += titleFont.lineHeight + titleSpacing;\n\t                if (i + 1 === length) {\n\t                    pt.y += options.titleMarginBottom - titleSpacing;\n\t                }\n\t            }\n\t        }\n\t    }\n\t _drawColorBox(ctx, pt, i, rtlHelper, options) {\n\t        const labelColor = this.labelColors[i];\n\t        const labelPointStyle = this.labelPointStyles[i];\n\t        const { boxHeight , boxWidth  } = options;\n\t        const bodyFont = helpers_segment.toFont(options.bodyFont);\n\t        const colorX = getAlignedX(this, 'left', options);\n\t        const rtlColorX = rtlHelper.x(colorX);\n\t        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n\t        const colorY = pt.y + yOffSet;\n\t        if (options.usePointStyle) {\n\t            const drawOptions = {\n\t                radius: Math.min(boxWidth, boxHeight) / 2,\n\t                pointStyle: labelPointStyle.pointStyle,\n\t                rotation: labelPointStyle.rotation,\n\t                borderWidth: 1\n\t            };\n\t            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n\t            const centerY = colorY + boxHeight / 2;\n\t            ctx.strokeStyle = options.multiKeyBackground;\n\t            ctx.fillStyle = options.multiKeyBackground;\n\t            helpers_segment.drawPoint(ctx, drawOptions, centerX, centerY);\n\t            ctx.strokeStyle = labelColor.borderColor;\n\t            ctx.fillStyle = labelColor.backgroundColor;\n\t            helpers_segment.drawPoint(ctx, drawOptions, centerX, centerY);\n\t        } else {\n\t            ctx.lineWidth = helpers_segment.isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n\t            ctx.strokeStyle = labelColor.borderColor;\n\t            ctx.setLineDash(labelColor.borderDash || []);\n\t            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\t            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n\t            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n\t            const borderRadius = helpers_segment.toTRBLCorners(labelColor.borderRadius);\n\t            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n\t                ctx.beginPath();\n\t                ctx.fillStyle = options.multiKeyBackground;\n\t                helpers_segment.addRoundedRectPath(ctx, {\n\t                    x: outerX,\n\t                    y: colorY,\n\t                    w: boxWidth,\n\t                    h: boxHeight,\n\t                    radius: borderRadius\n\t                });\n\t                ctx.fill();\n\t                ctx.stroke();\n\t                ctx.fillStyle = labelColor.backgroundColor;\n\t                ctx.beginPath();\n\t                helpers_segment.addRoundedRectPath(ctx, {\n\t                    x: innerX,\n\t                    y: colorY + 1,\n\t                    w: boxWidth - 2,\n\t                    h: boxHeight - 2,\n\t                    radius: borderRadius\n\t                });\n\t                ctx.fill();\n\t            } else {\n\t                ctx.fillStyle = options.multiKeyBackground;\n\t                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n\t                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n\t                ctx.fillStyle = labelColor.backgroundColor;\n\t                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n\t            }\n\t        }\n\t        ctx.fillStyle = this.labelTextColors[i];\n\t    }\n\t    drawBody(pt, ctx, options) {\n\t        const { body  } = this;\n\t        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n\t        const bodyFont = helpers_segment.toFont(options.bodyFont);\n\t        let bodyLineHeight = bodyFont.lineHeight;\n\t        let xLinePadding = 0;\n\t        const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n\t        const fillLineOfText = function(line) {\n\t            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n\t            pt.y += bodyLineHeight + bodySpacing;\n\t        };\n\t        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n\t        let bodyItem, textColor, lines, i, j, ilen, jlen;\n\t        ctx.textAlign = bodyAlign;\n\t        ctx.textBaseline = 'middle';\n\t        ctx.font = bodyFont.string;\n\t        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\t        ctx.fillStyle = options.bodyColor;\n\t        helpers_segment.each(this.beforeBody, fillLineOfText);\n\t        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\t        for(i = 0, ilen = body.length; i < ilen; ++i){\n\t            bodyItem = body[i];\n\t            textColor = this.labelTextColors[i];\n\t            ctx.fillStyle = textColor;\n\t            helpers_segment.each(bodyItem.before, fillLineOfText);\n\t            lines = bodyItem.lines;\n\t            if (displayColors && lines.length) {\n\t                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\t                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n\t            }\n\t            for(j = 0, jlen = lines.length; j < jlen; ++j){\n\t                fillLineOfText(lines[j]);\n\t                bodyLineHeight = bodyFont.lineHeight;\n\t            }\n\t            helpers_segment.each(bodyItem.after, fillLineOfText);\n\t        }\n\t        xLinePadding = 0;\n\t        bodyLineHeight = bodyFont.lineHeight;\n\t        helpers_segment.each(this.afterBody, fillLineOfText);\n\t        pt.y -= bodySpacing;\n\t    }\n\t    drawFooter(pt, ctx, options) {\n\t        const footer = this.footer;\n\t        const length = footer.length;\n\t        let footerFont, i;\n\t        if (length) {\n\t            const rtlHelper = helpers_segment.getRtlAdapter(options.rtl, this.x, this.width);\n\t            pt.x = getAlignedX(this, options.footerAlign, options);\n\t            pt.y += options.footerMarginTop;\n\t            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n\t            ctx.textBaseline = 'middle';\n\t            footerFont = helpers_segment.toFont(options.footerFont);\n\t            ctx.fillStyle = options.footerColor;\n\t            ctx.font = footerFont.string;\n\t            for(i = 0; i < length; ++i){\n\t                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n\t                pt.y += footerFont.lineHeight + options.footerSpacing;\n\t            }\n\t        }\n\t    }\n\t    drawBackground(pt, ctx, tooltipSize, options) {\n\t        const { xAlign , yAlign  } = this;\n\t        const { x , y  } = pt;\n\t        const { width , height  } = tooltipSize;\n\t        const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_segment.toTRBLCorners(options.cornerRadius);\n\t        ctx.fillStyle = options.backgroundColor;\n\t        ctx.strokeStyle = options.borderColor;\n\t        ctx.lineWidth = options.borderWidth;\n\t        ctx.beginPath();\n\t        ctx.moveTo(x + topLeft, y);\n\t        if (yAlign === 'top') {\n\t            this.drawCaret(pt, ctx, tooltipSize, options);\n\t        }\n\t        ctx.lineTo(x + width - topRight, y);\n\t        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\t        if (yAlign === 'center' && xAlign === 'right') {\n\t            this.drawCaret(pt, ctx, tooltipSize, options);\n\t        }\n\t        ctx.lineTo(x + width, y + height - bottomRight);\n\t        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\t        if (yAlign === 'bottom') {\n\t            this.drawCaret(pt, ctx, tooltipSize, options);\n\t        }\n\t        ctx.lineTo(x + bottomLeft, y + height);\n\t        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\t        if (yAlign === 'center' && xAlign === 'left') {\n\t            this.drawCaret(pt, ctx, tooltipSize, options);\n\t        }\n\t        ctx.lineTo(x, y + topLeft);\n\t        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n\t        ctx.closePath();\n\t        ctx.fill();\n\t        if (options.borderWidth > 0) {\n\t            ctx.stroke();\n\t        }\n\t    }\n\t _updateAnimationTarget(options) {\n\t        const chart = this.chart;\n\t        const anims = this.$animations;\n\t        const animX = anims && anims.x;\n\t        const animY = anims && anims.y;\n\t        if (animX || animY) {\n\t            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\t            if (!position) {\n\t                return;\n\t            }\n\t            const size = this._size = getTooltipSize(this, options);\n\t            const positionAndSize = Object.assign({}, position, this._size);\n\t            const alignment = determineAlignment(chart, options, positionAndSize);\n\t            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\t            if (animX._to !== point.x || animY._to !== point.y) {\n\t                this.xAlign = alignment.xAlign;\n\t                this.yAlign = alignment.yAlign;\n\t                this.width = size.width;\n\t                this.height = size.height;\n\t                this.caretX = position.x;\n\t                this.caretY = position.y;\n\t                this._resolveAnimations().update(this, point);\n\t            }\n\t        }\n\t    }\n\t _willRender() {\n\t        return !!this.opacity;\n\t    }\n\t    draw(ctx) {\n\t        const options = this.options.setContext(this.getContext());\n\t        let opacity = this.opacity;\n\t        if (!opacity) {\n\t            return;\n\t        }\n\t        this._updateAnimationTarget(options);\n\t        const tooltipSize = {\n\t            width: this.width,\n\t            height: this.height\n\t        };\n\t        const pt = {\n\t            x: this.x,\n\t            y: this.y\n\t        };\n\t        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\t        const padding = helpers_segment.toPadding(options.padding);\n\t        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\t        if (options.enabled && hasTooltipContent) {\n\t            ctx.save();\n\t            ctx.globalAlpha = opacity;\n\t            this.drawBackground(pt, ctx, tooltipSize, options);\n\t            helpers_segment.overrideTextDirection(ctx, options.textDirection);\n\t            pt.y += padding.top;\n\t            this.drawTitle(pt, ctx, options);\n\t            this.drawBody(pt, ctx, options);\n\t            this.drawFooter(pt, ctx, options);\n\t            helpers_segment.restoreTextDirection(ctx, options.textDirection);\n\t            ctx.restore();\n\t        }\n\t    }\n\t getActiveElements() {\n\t        return this._active || [];\n\t    }\n\t setActiveElements(activeElements, eventPosition) {\n\t        const lastActive = this._active;\n\t        const active = activeElements.map(({ datasetIndex , index  })=>{\n\t            const meta = this.chart.getDatasetMeta(datasetIndex);\n\t            if (!meta) {\n\t                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n\t            }\n\t            return {\n\t                datasetIndex,\n\t                element: meta.data[index],\n\t                index\n\t            };\n\t        });\n\t        const changed = !helpers_segment._elementsEqual(lastActive, active);\n\t        const positionChanged = this._positionChanged(active, eventPosition);\n\t        if (changed || positionChanged) {\n\t            this._active = active;\n\t            this._eventPosition = eventPosition;\n\t            this._ignoreReplayEvents = true;\n\t            this.update(true);\n\t        }\n\t    }\n\t handleEvent(e, replay, inChartArea = true) {\n\t        if (replay && this._ignoreReplayEvents) {\n\t            return false;\n\t        }\n\t        this._ignoreReplayEvents = false;\n\t        const options = this.options;\n\t        const lastActive = this._active || [];\n\t        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\t        const positionChanged = this._positionChanged(active, e);\n\t        const changed = replay || !helpers_segment._elementsEqual(active, lastActive) || positionChanged;\n\t        if (changed) {\n\t            this._active = active;\n\t            if (options.enabled || options.external) {\n\t                this._eventPosition = {\n\t                    x: e.x,\n\t                    y: e.y\n\t                };\n\t                this.update(true, replay);\n\t            }\n\t        }\n\t        return changed;\n\t    }\n\t _getActiveElements(e, lastActive, replay, inChartArea) {\n\t        const options = this.options;\n\t        if (e.type === 'mouseout') {\n\t            return [];\n\t        }\n\t        if (!inChartArea) {\n\t            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n\t        }\n\t        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\t        if (options.reverse) {\n\t            active.reverse();\n\t        }\n\t        return active;\n\t    }\n\t _positionChanged(active, e) {\n\t        const { caretX , caretY , options  } = this;\n\t        const position = positioners[options.position].call(this, active, e);\n\t        return position !== false && (caretX !== position.x || caretY !== position.y);\n\t    }\n\t}\n\tvar plugin_tooltip = {\n\t    id: 'tooltip',\n\t    _element: Tooltip,\n\t    positioners,\n\t    afterInit (chart, _args, options) {\n\t        if (options) {\n\t            chart.tooltip = new Tooltip({\n\t                chart,\n\t                options\n\t            });\n\t        }\n\t    },\n\t    beforeUpdate (chart, _args, options) {\n\t        if (chart.tooltip) {\n\t            chart.tooltip.initialize(options);\n\t        }\n\t    },\n\t    reset (chart, _args, options) {\n\t        if (chart.tooltip) {\n\t            chart.tooltip.initialize(options);\n\t        }\n\t    },\n\t    afterDraw (chart) {\n\t        const tooltip = chart.tooltip;\n\t        if (tooltip && tooltip._willRender()) {\n\t            const args = {\n\t                tooltip\n\t            };\n\t            if (chart.notifyPlugins('beforeTooltipDraw', {\n\t                ...args,\n\t                cancelable: true\n\t            }) === false) {\n\t                return;\n\t            }\n\t            tooltip.draw(chart.ctx);\n\t            chart.notifyPlugins('afterTooltipDraw', args);\n\t        }\n\t    },\n\t    afterEvent (chart, args) {\n\t        if (chart.tooltip) {\n\t            const useFinalPosition = args.replay;\n\t            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n\t                args.changed = true;\n\t            }\n\t        }\n\t    },\n\t    defaults: {\n\t        enabled: true,\n\t        external: null,\n\t        position: 'average',\n\t        backgroundColor: 'rgba(0,0,0,0.8)',\n\t        titleColor: '#fff',\n\t        titleFont: {\n\t            weight: 'bold'\n\t        },\n\t        titleSpacing: 2,\n\t        titleMarginBottom: 6,\n\t        titleAlign: 'left',\n\t        bodyColor: '#fff',\n\t        bodySpacing: 2,\n\t        bodyFont: {},\n\t        bodyAlign: 'left',\n\t        footerColor: '#fff',\n\t        footerSpacing: 2,\n\t        footerMarginTop: 6,\n\t        footerFont: {\n\t            weight: 'bold'\n\t        },\n\t        footerAlign: 'left',\n\t        padding: 6,\n\t        caretPadding: 2,\n\t        caretSize: 5,\n\t        cornerRadius: 6,\n\t        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n\t        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n\t        multiKeyBackground: '#fff',\n\t        displayColors: true,\n\t        boxPadding: 0,\n\t        borderColor: 'rgba(0,0,0,0)',\n\t        borderWidth: 0,\n\t        animation: {\n\t            duration: 400,\n\t            easing: 'easeOutQuart'\n\t        },\n\t        animations: {\n\t            numbers: {\n\t                type: 'number',\n\t                properties: [\n\t                    'x',\n\t                    'y',\n\t                    'width',\n\t                    'height',\n\t                    'caretX',\n\t                    'caretY'\n\t                ]\n\t            },\n\t            opacity: {\n\t                easing: 'linear',\n\t                duration: 200\n\t            }\n\t        },\n\t        callbacks: defaultCallbacks\n\t    },\n\t    defaultRoutes: {\n\t        bodyFont: 'font',\n\t        footerFont: 'font',\n\t        titleFont: 'font'\n\t    },\n\t    descriptors: {\n\t        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n\t        _indexable: false,\n\t        callbacks: {\n\t            _scriptable: false,\n\t            _indexable: false\n\t        },\n\t        animation: {\n\t            _fallback: false\n\t        },\n\t        animations: {\n\t            _fallback: 'animation'\n\t        }\n\t    },\n\t    additionalOptionScopes: [\n\t        'interaction'\n\t    ]\n\t};\n\n\tvar plugins = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tColors: plugin_colors,\n\tDecimation: plugin_decimation,\n\tFiller: index,\n\tLegend: plugin_legend,\n\tSubTitle: plugin_subtitle,\n\tTitle: plugin_title,\n\tTooltip: plugin_tooltip\n\t});\n\n\tconst addIfString = (labels, raw, index, addedLabels)=>{\n\t    if (typeof raw === 'string') {\n\t        index = labels.push(raw) - 1;\n\t        addedLabels.unshift({\n\t            index,\n\t            label: raw\n\t        });\n\t    } else if (isNaN(raw)) {\n\t        index = null;\n\t    }\n\t    return index;\n\t};\n\tfunction findOrAddLabel(labels, raw, index, addedLabels) {\n\t    const first = labels.indexOf(raw);\n\t    if (first === -1) {\n\t        return addIfString(labels, raw, index, addedLabels);\n\t    }\n\t    const last = labels.lastIndexOf(raw);\n\t    return first !== last ? index : first;\n\t}\n\tconst validIndex = (index, max)=>index === null ? null : helpers_segment._limitValue(Math.round(index), 0, max);\n\tfunction _getLabelForValue(value) {\n\t    const labels = this.getLabels();\n\t    if (value >= 0 && value < labels.length) {\n\t        return labels[value];\n\t    }\n\t    return value;\n\t}\n\tclass CategoryScale extends Scale {\n\t    static id = 'category';\n\t static defaults = {\n\t        ticks: {\n\t            callback: _getLabelForValue\n\t        }\n\t    };\n\t    constructor(cfg){\n\t        super(cfg);\n\t         this._startValue = undefined;\n\t        this._valueRange = 0;\n\t        this._addedLabels = [];\n\t    }\n\t    init(scaleOptions) {\n\t        const added = this._addedLabels;\n\t        if (added.length) {\n\t            const labels = this.getLabels();\n\t            for (const { index , label  } of added){\n\t                if (labels[index] === label) {\n\t                    labels.splice(index, 1);\n\t                }\n\t            }\n\t            this._addedLabels = [];\n\t        }\n\t        super.init(scaleOptions);\n\t    }\n\t    parse(raw, index) {\n\t        if (helpers_segment.isNullOrUndef(raw)) {\n\t            return null;\n\t        }\n\t        const labels = this.getLabels();\n\t        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, helpers_segment.valueOrDefault(index, raw), this._addedLabels);\n\t        return validIndex(index, labels.length - 1);\n\t    }\n\t    determineDataLimits() {\n\t        const { minDefined , maxDefined  } = this.getUserBounds();\n\t        let { min , max  } = this.getMinMax(true);\n\t        if (this.options.bounds === 'ticks') {\n\t            if (!minDefined) {\n\t                min = 0;\n\t            }\n\t            if (!maxDefined) {\n\t                max = this.getLabels().length - 1;\n\t            }\n\t        }\n\t        this.min = min;\n\t        this.max = max;\n\t    }\n\t    buildTicks() {\n\t        const min = this.min;\n\t        const max = this.max;\n\t        const offset = this.options.offset;\n\t        const ticks = [];\n\t        let labels = this.getLabels();\n\t        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n\t        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n\t        this._startValue = this.min - (offset ? 0.5 : 0);\n\t        for(let value = min; value <= max; value++){\n\t            ticks.push({\n\t                value\n\t            });\n\t        }\n\t        return ticks;\n\t    }\n\t    getLabelForValue(value) {\n\t        return _getLabelForValue.call(this, value);\n\t    }\n\t configure() {\n\t        super.configure();\n\t        if (!this.isHorizontal()) {\n\t            this._reversePixels = !this._reversePixels;\n\t        }\n\t    }\n\t    getPixelForValue(value) {\n\t        if (typeof value !== 'number') {\n\t            value = this.parse(value);\n\t        }\n\t        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n\t    }\n\t    getPixelForTick(index) {\n\t        const ticks = this.ticks;\n\t        if (index < 0 || index > ticks.length - 1) {\n\t            return null;\n\t        }\n\t        return this.getPixelForValue(ticks[index].value);\n\t    }\n\t    getValueForPixel(pixel) {\n\t        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n\t    }\n\t    getBasePixel() {\n\t        return this.bottom;\n\t    }\n\t}\n\n\tfunction generateTicks$1(generationOptions, dataRange) {\n\t    const ticks = [];\n\t    const MIN_SPACING = 1e-14;\n\t    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n\t    const unit = step || 1;\n\t    const maxSpaces = maxTicks - 1;\n\t    const { min: rmin , max: rmax  } = dataRange;\n\t    const minDefined = !helpers_segment.isNullOrUndef(min);\n\t    const maxDefined = !helpers_segment.isNullOrUndef(max);\n\t    const countDefined = !helpers_segment.isNullOrUndef(count);\n\t    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n\t    let spacing = helpers_segment.niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n\t    let factor, niceMin, niceMax, numSpaces;\n\t    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n\t        return [\n\t            {\n\t                value: rmin\n\t            },\n\t            {\n\t                value: rmax\n\t            }\n\t        ];\n\t    }\n\t    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\t    if (numSpaces > maxSpaces) {\n\t        spacing = helpers_segment.niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n\t    }\n\t    if (!helpers_segment.isNullOrUndef(precision)) {\n\t        factor = Math.pow(10, precision);\n\t        spacing = Math.ceil(spacing * factor) / factor;\n\t    }\n\t    if (bounds === 'ticks') {\n\t        niceMin = Math.floor(rmin / spacing) * spacing;\n\t        niceMax = Math.ceil(rmax / spacing) * spacing;\n\t    } else {\n\t        niceMin = rmin;\n\t        niceMax = rmax;\n\t    }\n\t    if (minDefined && maxDefined && step && helpers_segment.almostWhole((max - min) / step, spacing / 1000)) {\n\t        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n\t        spacing = (max - min) / numSpaces;\n\t        niceMin = min;\n\t        niceMax = max;\n\t    } else if (countDefined) {\n\t        niceMin = minDefined ? min : niceMin;\n\t        niceMax = maxDefined ? max : niceMax;\n\t        numSpaces = count - 1;\n\t        spacing = (niceMax - niceMin) / numSpaces;\n\t    } else {\n\t        numSpaces = (niceMax - niceMin) / spacing;\n\t        if (helpers_segment.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t            numSpaces = Math.round(numSpaces);\n\t        } else {\n\t            numSpaces = Math.ceil(numSpaces);\n\t        }\n\t    }\n\t    const decimalPlaces = Math.max(helpers_segment._decimalPlaces(spacing), helpers_segment._decimalPlaces(niceMin));\n\t    factor = Math.pow(10, helpers_segment.isNullOrUndef(precision) ? decimalPlaces : precision);\n\t    niceMin = Math.round(niceMin * factor) / factor;\n\t    niceMax = Math.round(niceMax * factor) / factor;\n\t    let j = 0;\n\t    if (minDefined) {\n\t        if (includeBounds && niceMin !== min) {\n\t            ticks.push({\n\t                value: min\n\t            });\n\t            if (niceMin < min) {\n\t                j++;\n\t            }\n\t            if (helpers_segment.almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n\t                j++;\n\t            }\n\t        } else if (niceMin < min) {\n\t            j++;\n\t        }\n\t    }\n\t    for(; j < numSpaces; ++j){\n\t        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n\t        if (maxDefined && tickValue > max) {\n\t            break;\n\t        }\n\t        ticks.push({\n\t            value: tickValue\n\t        });\n\t    }\n\t    if (maxDefined && includeBounds && niceMax !== max) {\n\t        if (ticks.length && helpers_segment.almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n\t            ticks[ticks.length - 1].value = max;\n\t        } else {\n\t            ticks.push({\n\t                value: max\n\t            });\n\t        }\n\t    } else if (!maxDefined || niceMax === max) {\n\t        ticks.push({\n\t            value: niceMax\n\t        });\n\t    }\n\t    return ticks;\n\t}\n\tfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n\t    const rad = helpers_segment.toRadians(minRotation);\n\t    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n\t    const length = 0.75 * minSpacing * ('' + value).length;\n\t    return Math.min(minSpacing / ratio, length);\n\t}\n\tclass LinearScaleBase extends Scale {\n\t    constructor(cfg){\n\t        super(cfg);\n\t         this.start = undefined;\n\t         this.end = undefined;\n\t         this._startValue = undefined;\n\t         this._endValue = undefined;\n\t        this._valueRange = 0;\n\t    }\n\t    parse(raw, index) {\n\t        if (helpers_segment.isNullOrUndef(raw)) {\n\t            return null;\n\t        }\n\t        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n\t            return null;\n\t        }\n\t        return +raw;\n\t    }\n\t    handleTickRangeOptions() {\n\t        const { beginAtZero  } = this.options;\n\t        const { minDefined , maxDefined  } = this.getUserBounds();\n\t        let { min , max  } = this;\n\t        const setMin = (v)=>min = minDefined ? min : v;\n\t        const setMax = (v)=>max = maxDefined ? max : v;\n\t        if (beginAtZero) {\n\t            const minSign = helpers_segment.sign(min);\n\t            const maxSign = helpers_segment.sign(max);\n\t            if (minSign < 0 && maxSign < 0) {\n\t                setMax(0);\n\t            } else if (minSign > 0 && maxSign > 0) {\n\t                setMin(0);\n\t            }\n\t        }\n\t        if (min === max) {\n\t            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\t            setMax(max + offset);\n\t            if (!beginAtZero) {\n\t                setMin(min - offset);\n\t            }\n\t        }\n\t        this.min = min;\n\t        this.max = max;\n\t    }\n\t    getTickLimit() {\n\t        const tickOpts = this.options.ticks;\n\t        let { maxTicksLimit , stepSize  } = tickOpts;\n\t        let maxTicks;\n\t        if (stepSize) {\n\t            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\t            if (maxTicks > 1000) {\n\t                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n\t                maxTicks = 1000;\n\t            }\n\t        } else {\n\t            maxTicks = this.computeTickLimit();\n\t            maxTicksLimit = maxTicksLimit || 11;\n\t        }\n\t        if (maxTicksLimit) {\n\t            maxTicks = Math.min(maxTicksLimit, maxTicks);\n\t        }\n\t        return maxTicks;\n\t    }\n\t computeTickLimit() {\n\t        return Number.POSITIVE_INFINITY;\n\t    }\n\t    buildTicks() {\n\t        const opts = this.options;\n\t        const tickOpts = opts.ticks;\n\t        let maxTicks = this.getTickLimit();\n\t        maxTicks = Math.max(2, maxTicks);\n\t        const numericGeneratorOptions = {\n\t            maxTicks,\n\t            bounds: opts.bounds,\n\t            min: opts.min,\n\t            max: opts.max,\n\t            precision: tickOpts.precision,\n\t            step: tickOpts.stepSize,\n\t            count: tickOpts.count,\n\t            maxDigits: this._maxDigits(),\n\t            horizontal: this.isHorizontal(),\n\t            minRotation: tickOpts.minRotation || 0,\n\t            includeBounds: tickOpts.includeBounds !== false\n\t        };\n\t        const dataRange = this._range || this;\n\t        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\t        if (opts.bounds === 'ticks') {\n\t            helpers_segment._setMinAndMaxByKey(ticks, this, 'value');\n\t        }\n\t        if (opts.reverse) {\n\t            ticks.reverse();\n\t            this.start = this.max;\n\t            this.end = this.min;\n\t        } else {\n\t            this.start = this.min;\n\t            this.end = this.max;\n\t        }\n\t        return ticks;\n\t    }\n\t configure() {\n\t        const ticks = this.ticks;\n\t        let start = this.min;\n\t        let end = this.max;\n\t        super.configure();\n\t        if (this.options.offset && ticks.length) {\n\t            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n\t            start -= offset;\n\t            end += offset;\n\t        }\n\t        this._startValue = start;\n\t        this._endValue = end;\n\t        this._valueRange = end - start;\n\t    }\n\t    getLabelForValue(value) {\n\t        return helpers_segment.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n\t    }\n\t}\n\n\tclass LinearScale extends LinearScaleBase {\n\t    static id = 'linear';\n\t static defaults = {\n\t        ticks: {\n\t            callback: helpers_segment.Ticks.formatters.numeric\n\t        }\n\t    };\n\t    determineDataLimits() {\n\t        const { min , max  } = this.getMinMax(true);\n\t        this.min = helpers_segment.isNumberFinite(min) ? min : 0;\n\t        this.max = helpers_segment.isNumberFinite(max) ? max : 1;\n\t        this.handleTickRangeOptions();\n\t    }\n\t computeTickLimit() {\n\t        const horizontal = this.isHorizontal();\n\t        const length = horizontal ? this.width : this.height;\n\t        const minRotation = helpers_segment.toRadians(this.options.ticks.minRotation);\n\t        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\t        const tickFont = this._resolveTickFontOptions(0);\n\t        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n\t    }\n\t    getPixelForValue(value) {\n\t        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n\t    }\n\t    getValueForPixel(pixel) {\n\t        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n\t    }\n\t}\n\n\tconst log10Floor = (v)=>Math.floor(helpers_segment.log10(v));\n\tconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\n\tfunction isMajor(tickVal) {\n\t    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n\t    return remain === 1;\n\t}\n\tfunction steps(min, max, rangeExp) {\n\t    const rangeStep = Math.pow(10, rangeExp);\n\t    const start = Math.floor(min / rangeStep);\n\t    const end = Math.ceil(max / rangeStep);\n\t    return end - start;\n\t}\n\tfunction startExp(min, max) {\n\t    const range = max - min;\n\t    let rangeExp = log10Floor(range);\n\t    while(steps(min, max, rangeExp) > 10){\n\t        rangeExp++;\n\t    }\n\t    while(steps(min, max, rangeExp) < 10){\n\t        rangeExp--;\n\t    }\n\t    return Math.min(rangeExp, log10Floor(min));\n\t}\n\t function generateTicks(generationOptions, { min , max  }) {\n\t    min = helpers_segment.finiteOrDefault(generationOptions.min, min);\n\t    const ticks = [];\n\t    const minExp = log10Floor(min);\n\t    let exp = startExp(min, max);\n\t    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\t    const stepSize = Math.pow(10, exp);\n\t    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n\t    const start = Math.round((min - base) * precision) / precision;\n\t    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n\t    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n\t    let value = helpers_segment.finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\t    while(value < max){\n\t        ticks.push({\n\t            value,\n\t            major: isMajor(value),\n\t            significand\n\t        });\n\t        if (significand >= 10) {\n\t            significand = significand < 15 ? 15 : 20;\n\t        } else {\n\t            significand++;\n\t        }\n\t        if (significand >= 20) {\n\t            exp++;\n\t            significand = 2;\n\t            precision = exp >= 0 ? 1 : precision;\n\t        }\n\t        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n\t    }\n\t    const lastTick = helpers_segment.finiteOrDefault(generationOptions.max, value);\n\t    ticks.push({\n\t        value: lastTick,\n\t        major: isMajor(lastTick),\n\t        significand\n\t    });\n\t    return ticks;\n\t}\n\tclass LogarithmicScale extends Scale {\n\t    static id = 'logarithmic';\n\t static defaults = {\n\t        ticks: {\n\t            callback: helpers_segment.Ticks.formatters.logarithmic,\n\t            major: {\n\t                enabled: true\n\t            }\n\t        }\n\t    };\n\t    constructor(cfg){\n\t        super(cfg);\n\t         this.start = undefined;\n\t         this.end = undefined;\n\t         this._startValue = undefined;\n\t        this._valueRange = 0;\n\t    }\n\t    parse(raw, index) {\n\t        const value = LinearScaleBase.prototype.parse.apply(this, [\n\t            raw,\n\t            index\n\t        ]);\n\t        if (value === 0) {\n\t            this._zero = true;\n\t            return undefined;\n\t        }\n\t        return helpers_segment.isNumberFinite(value) && value > 0 ? value : null;\n\t    }\n\t    determineDataLimits() {\n\t        const { min , max  } = this.getMinMax(true);\n\t        this.min = helpers_segment.isNumberFinite(min) ? Math.max(0, min) : null;\n\t        this.max = helpers_segment.isNumberFinite(max) ? Math.max(0, max) : null;\n\t        if (this.options.beginAtZero) {\n\t            this._zero = true;\n\t        }\n\t        if (this._zero && this.min !== this._suggestedMin && !helpers_segment.isNumberFinite(this._userMin)) {\n\t            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n\t        }\n\t        this.handleTickRangeOptions();\n\t    }\n\t    handleTickRangeOptions() {\n\t        const { minDefined , maxDefined  } = this.getUserBounds();\n\t        let min = this.min;\n\t        let max = this.max;\n\t        const setMin = (v)=>min = minDefined ? min : v;\n\t        const setMax = (v)=>max = maxDefined ? max : v;\n\t        if (min === max) {\n\t            if (min <= 0) {\n\t                setMin(1);\n\t                setMax(10);\n\t            } else {\n\t                setMin(changeExponent(min, -1));\n\t                setMax(changeExponent(max, +1));\n\t            }\n\t        }\n\t        if (min <= 0) {\n\t            setMin(changeExponent(max, -1));\n\t        }\n\t        if (max <= 0) {\n\t            setMax(changeExponent(min, +1));\n\t        }\n\t        this.min = min;\n\t        this.max = max;\n\t    }\n\t    buildTicks() {\n\t        const opts = this.options;\n\t        const generationOptions = {\n\t            min: this._userMin,\n\t            max: this._userMax\n\t        };\n\t        const ticks = generateTicks(generationOptions, this);\n\t        if (opts.bounds === 'ticks') {\n\t            helpers_segment._setMinAndMaxByKey(ticks, this, 'value');\n\t        }\n\t        if (opts.reverse) {\n\t            ticks.reverse();\n\t            this.start = this.max;\n\t            this.end = this.min;\n\t        } else {\n\t            this.start = this.min;\n\t            this.end = this.max;\n\t        }\n\t        return ticks;\n\t    }\n\t getLabelForValue(value) {\n\t        return value === undefined ? '0' : helpers_segment.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n\t    }\n\t configure() {\n\t        const start = this.min;\n\t        super.configure();\n\t        this._startValue = helpers_segment.log10(start);\n\t        this._valueRange = helpers_segment.log10(this.max) - helpers_segment.log10(start);\n\t    }\n\t    getPixelForValue(value) {\n\t        if (value === undefined || value === 0) {\n\t            value = this.min;\n\t        }\n\t        if (value === null || isNaN(value)) {\n\t            return NaN;\n\t        }\n\t        return this.getPixelForDecimal(value === this.min ? 0 : (helpers_segment.log10(value) - this._startValue) / this._valueRange);\n\t    }\n\t    getValueForPixel(pixel) {\n\t        const decimal = this.getDecimalForPixel(pixel);\n\t        return Math.pow(10, this._startValue + decimal * this._valueRange);\n\t    }\n\t}\n\n\tfunction getTickBackdropHeight(opts) {\n\t    const tickOpts = opts.ticks;\n\t    if (tickOpts.display && opts.display) {\n\t        const padding = helpers_segment.toPadding(tickOpts.backdropPadding);\n\t        return helpers_segment.valueOrDefault(tickOpts.font && tickOpts.font.size, helpers_segment.defaults.font.size) + padding.height;\n\t    }\n\t    return 0;\n\t}\n\tfunction measureLabelSize(ctx, font, label) {\n\t    label = helpers_segment.isArray(label) ? label : [\n\t        label\n\t    ];\n\t    return {\n\t        w: helpers_segment._longestText(ctx, font.string, label),\n\t        h: label.length * font.lineHeight\n\t    };\n\t}\n\tfunction determineLimits(angle, pos, size, min, max) {\n\t    if (angle === min || angle === max) {\n\t        return {\n\t            start: pos - size / 2,\n\t            end: pos + size / 2\n\t        };\n\t    } else if (angle < min || angle > max) {\n\t        return {\n\t            start: pos - size,\n\t            end: pos\n\t        };\n\t    }\n\t    return {\n\t        start: pos,\n\t        end: pos + size\n\t    };\n\t}\n\t function fitWithPointLabels(scale) {\n\t    const orig = {\n\t        l: scale.left + scale._padding.left,\n\t        r: scale.right - scale._padding.right,\n\t        t: scale.top + scale._padding.top,\n\t        b: scale.bottom - scale._padding.bottom\n\t    };\n\t    const limits = Object.assign({}, orig);\n\t    const labelSizes = [];\n\t    const padding = [];\n\t    const valueCount = scale._pointLabels.length;\n\t    const pointLabelOpts = scale.options.pointLabels;\n\t    const additionalAngle = pointLabelOpts.centerPointLabels ? helpers_segment.PI / valueCount : 0;\n\t    for(let i = 0; i < valueCount; i++){\n\t        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n\t        padding[i] = opts.padding;\n\t        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n\t        const plFont = helpers_segment.toFont(opts.font);\n\t        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n\t        labelSizes[i] = textSize;\n\t        const angleRadians = helpers_segment._normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\t        const angle = Math.round(helpers_segment.toDegrees(angleRadians));\n\t        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\t        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n\t    }\n\t    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n\t    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n\t}\n\tfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n\t    const sin = Math.abs(Math.sin(angle));\n\t    const cos = Math.abs(Math.cos(angle));\n\t    let x = 0;\n\t    let y = 0;\n\t    if (hLimits.start < orig.l) {\n\t        x = (orig.l - hLimits.start) / sin;\n\t        limits.l = Math.min(limits.l, orig.l - x);\n\t    } else if (hLimits.end > orig.r) {\n\t        x = (hLimits.end - orig.r) / sin;\n\t        limits.r = Math.max(limits.r, orig.r + x);\n\t    }\n\t    if (vLimits.start < orig.t) {\n\t        y = (orig.t - vLimits.start) / cos;\n\t        limits.t = Math.min(limits.t, orig.t - y);\n\t    } else if (vLimits.end > orig.b) {\n\t        y = (vLimits.end - orig.b) / cos;\n\t        limits.b = Math.max(limits.b, orig.b + y);\n\t    }\n\t}\n\tfunction createPointLabelItem(scale, index, itemOpts) {\n\t    const outerDistance = scale.drawingArea;\n\t    const { extra , additionalAngle , padding , size  } = itemOpts;\n\t    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n\t    const angle = Math.round(helpers_segment.toDegrees(helpers_segment._normalizeAngle(pointLabelPosition.angle + helpers_segment.HALF_PI)));\n\t    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n\t    const textAlign = getTextAlignForAngle(angle);\n\t    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\t    return {\n\t        visible: true,\n\t        x: pointLabelPosition.x,\n\t        y,\n\t        textAlign,\n\t        left,\n\t        top: y,\n\t        right: left + size.w,\n\t        bottom: y + size.h\n\t    };\n\t}\n\tfunction isNotOverlapped(item, area) {\n\t    if (!area) {\n\t        return true;\n\t    }\n\t    const { left , top , right , bottom  } = item;\n\t    const apexesInArea = helpers_segment._isPointInArea({\n\t        x: left,\n\t        y: top\n\t    }, area) || helpers_segment._isPointInArea({\n\t        x: left,\n\t        y: bottom\n\t    }, area) || helpers_segment._isPointInArea({\n\t        x: right,\n\t        y: top\n\t    }, area) || helpers_segment._isPointInArea({\n\t        x: right,\n\t        y: bottom\n\t    }, area);\n\t    return !apexesInArea;\n\t}\n\tfunction buildPointLabelItems(scale, labelSizes, padding) {\n\t    const items = [];\n\t    const valueCount = scale._pointLabels.length;\n\t    const opts = scale.options;\n\t    const { centerPointLabels , display  } = opts.pointLabels;\n\t    const itemOpts = {\n\t        extra: getTickBackdropHeight(opts) / 2,\n\t        additionalAngle: centerPointLabels ? helpers_segment.PI / valueCount : 0\n\t    };\n\t    let area;\n\t    for(let i = 0; i < valueCount; i++){\n\t        itemOpts.padding = padding[i];\n\t        itemOpts.size = labelSizes[i];\n\t        const item = createPointLabelItem(scale, i, itemOpts);\n\t        items.push(item);\n\t        if (display === 'auto') {\n\t            item.visible = isNotOverlapped(item, area);\n\t            if (item.visible) {\n\t                area = item;\n\t            }\n\t        }\n\t    }\n\t    return items;\n\t}\n\tfunction getTextAlignForAngle(angle) {\n\t    if (angle === 0 || angle === 180) {\n\t        return 'center';\n\t    } else if (angle < 180) {\n\t        return 'left';\n\t    }\n\t    return 'right';\n\t}\n\tfunction leftForTextAlign(x, w, align) {\n\t    if (align === 'right') {\n\t        x -= w;\n\t    } else if (align === 'center') {\n\t        x -= w / 2;\n\t    }\n\t    return x;\n\t}\n\tfunction yForAngle(y, h, angle) {\n\t    if (angle === 90 || angle === 270) {\n\t        y -= h / 2;\n\t    } else if (angle > 270 || angle < 90) {\n\t        y -= h;\n\t    }\n\t    return y;\n\t}\n\tfunction drawPointLabelBox(ctx, opts, item) {\n\t    const { left , top , right , bottom  } = item;\n\t    const { backdropColor  } = opts;\n\t    if (!helpers_segment.isNullOrUndef(backdropColor)) {\n\t        const borderRadius = helpers_segment.toTRBLCorners(opts.borderRadius);\n\t        const padding = helpers_segment.toPadding(opts.backdropPadding);\n\t        ctx.fillStyle = backdropColor;\n\t        const backdropLeft = left - padding.left;\n\t        const backdropTop = top - padding.top;\n\t        const backdropWidth = right - left + padding.width;\n\t        const backdropHeight = bottom - top + padding.height;\n\t        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n\t            ctx.beginPath();\n\t            helpers_segment.addRoundedRectPath(ctx, {\n\t                x: backdropLeft,\n\t                y: backdropTop,\n\t                w: backdropWidth,\n\t                h: backdropHeight,\n\t                radius: borderRadius\n\t            });\n\t            ctx.fill();\n\t        } else {\n\t            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n\t        }\n\t    }\n\t}\n\tfunction drawPointLabels(scale, labelCount) {\n\t    const { ctx , options: { pointLabels  }  } = scale;\n\t    for(let i = labelCount - 1; i >= 0; i--){\n\t        const item = scale._pointLabelItems[i];\n\t        if (!item.visible) {\n\t            continue;\n\t        }\n\t        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n\t        drawPointLabelBox(ctx, optsAtIndex, item);\n\t        const plFont = helpers_segment.toFont(optsAtIndex.font);\n\t        const { x , y , textAlign  } = item;\n\t        helpers_segment.renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n\t            color: optsAtIndex.color,\n\t            textAlign: textAlign,\n\t            textBaseline: 'middle'\n\t        });\n\t    }\n\t}\n\tfunction pathRadiusLine(scale, radius, circular, labelCount) {\n\t    const { ctx  } = scale;\n\t    if (circular) {\n\t        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, helpers_segment.TAU);\n\t    } else {\n\t        let pointPosition = scale.getPointPosition(0, radius);\n\t        ctx.moveTo(pointPosition.x, pointPosition.y);\n\t        for(let i = 1; i < labelCount; i++){\n\t            pointPosition = scale.getPointPosition(i, radius);\n\t            ctx.lineTo(pointPosition.x, pointPosition.y);\n\t        }\n\t    }\n\t}\n\tfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n\t    const ctx = scale.ctx;\n\t    const circular = gridLineOpts.circular;\n\t    const { color , lineWidth  } = gridLineOpts;\n\t    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n\t        return;\n\t    }\n\t    ctx.save();\n\t    ctx.strokeStyle = color;\n\t    ctx.lineWidth = lineWidth;\n\t    ctx.setLineDash(borderOpts.dash);\n\t    ctx.lineDashOffset = borderOpts.dashOffset;\n\t    ctx.beginPath();\n\t    pathRadiusLine(scale, radius, circular, labelCount);\n\t    ctx.closePath();\n\t    ctx.stroke();\n\t    ctx.restore();\n\t}\n\tfunction createPointLabelContext(parent, index, label) {\n\t    return helpers_segment.createContext(parent, {\n\t        label,\n\t        index,\n\t        type: 'pointLabel'\n\t    });\n\t}\n\tclass RadialLinearScale extends LinearScaleBase {\n\t    static id = 'radialLinear';\n\t static defaults = {\n\t        display: true,\n\t        animate: true,\n\t        position: 'chartArea',\n\t        angleLines: {\n\t            display: true,\n\t            lineWidth: 1,\n\t            borderDash: [],\n\t            borderDashOffset: 0.0\n\t        },\n\t        grid: {\n\t            circular: false\n\t        },\n\t        startAngle: 0,\n\t        ticks: {\n\t            showLabelBackdrop: true,\n\t            callback: helpers_segment.Ticks.formatters.numeric\n\t        },\n\t        pointLabels: {\n\t            backdropColor: undefined,\n\t            backdropPadding: 2,\n\t            display: true,\n\t            font: {\n\t                size: 10\n\t            },\n\t            callback (label) {\n\t                return label;\n\t            },\n\t            padding: 5,\n\t            centerPointLabels: false\n\t        }\n\t    };\n\t    static defaultRoutes = {\n\t        'angleLines.color': 'borderColor',\n\t        'pointLabels.color': 'color',\n\t        'ticks.color': 'color'\n\t    };\n\t    static descriptors = {\n\t        angleLines: {\n\t            _fallback: 'grid'\n\t        }\n\t    };\n\t    constructor(cfg){\n\t        super(cfg);\n\t         this.xCenter = undefined;\n\t         this.yCenter = undefined;\n\t         this.drawingArea = undefined;\n\t         this._pointLabels = [];\n\t        this._pointLabelItems = [];\n\t    }\n\t    setDimensions() {\n\t        const padding = this._padding = helpers_segment.toPadding(getTickBackdropHeight(this.options) / 2);\n\t        const w = this.width = this.maxWidth - padding.width;\n\t        const h = this.height = this.maxHeight - padding.height;\n\t        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n\t        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n\t        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n\t    }\n\t    determineDataLimits() {\n\t        const { min , max  } = this.getMinMax(false);\n\t        this.min = helpers_segment.isNumberFinite(min) && !isNaN(min) ? min : 0;\n\t        this.max = helpers_segment.isNumberFinite(max) && !isNaN(max) ? max : 0;\n\t        this.handleTickRangeOptions();\n\t    }\n\t computeTickLimit() {\n\t        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n\t    }\n\t    generateTickLabels(ticks) {\n\t        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\t        this._pointLabels = this.getLabels().map((value, index)=>{\n\t            const label = helpers_segment.callback(this.options.pointLabels.callback, [\n\t                value,\n\t                index\n\t            ], this);\n\t            return label || label === 0 ? label : '';\n\t        }).filter((v, i)=>this.chart.getDataVisibility(i));\n\t    }\n\t    fit() {\n\t        const opts = this.options;\n\t        if (opts.display && opts.pointLabels.display) {\n\t            fitWithPointLabels(this);\n\t        } else {\n\t            this.setCenterPoint(0, 0, 0, 0);\n\t        }\n\t    }\n\t    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n\t        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n\t        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n\t    }\n\t    getIndexAngle(index) {\n\t        const angleMultiplier = helpers_segment.TAU / (this._pointLabels.length || 1);\n\t        const startAngle = this.options.startAngle || 0;\n\t        return helpers_segment._normalizeAngle(index * angleMultiplier + helpers_segment.toRadians(startAngle));\n\t    }\n\t    getDistanceFromCenterForValue(value) {\n\t        if (helpers_segment.isNullOrUndef(value)) {\n\t            return NaN;\n\t        }\n\t        const scalingFactor = this.drawingArea / (this.max - this.min);\n\t        if (this.options.reverse) {\n\t            return (this.max - value) * scalingFactor;\n\t        }\n\t        return (value - this.min) * scalingFactor;\n\t    }\n\t    getValueForDistanceFromCenter(distance) {\n\t        if (helpers_segment.isNullOrUndef(distance)) {\n\t            return NaN;\n\t        }\n\t        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n\t        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n\t    }\n\t    getPointLabelContext(index) {\n\t        const pointLabels = this._pointLabels || [];\n\t        if (index >= 0 && index < pointLabels.length) {\n\t            const pointLabel = pointLabels[index];\n\t            return createPointLabelContext(this.getContext(), index, pointLabel);\n\t        }\n\t    }\n\t    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n\t        const angle = this.getIndexAngle(index) - helpers_segment.HALF_PI + additionalAngle;\n\t        return {\n\t            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n\t            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n\t            angle\n\t        };\n\t    }\n\t    getPointPositionForValue(index, value) {\n\t        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t    }\n\t    getBasePosition(index) {\n\t        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n\t    }\n\t    getPointLabelPosition(index) {\n\t        const { left , top , right , bottom  } = this._pointLabelItems[index];\n\t        return {\n\t            left,\n\t            top,\n\t            right,\n\t            bottom\n\t        };\n\t    }\n\t drawBackground() {\n\t        const { backgroundColor , grid: { circular  }  } = this.options;\n\t        if (backgroundColor) {\n\t            const ctx = this.ctx;\n\t            ctx.save();\n\t            ctx.beginPath();\n\t            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n\t            ctx.closePath();\n\t            ctx.fillStyle = backgroundColor;\n\t            ctx.fill();\n\t            ctx.restore();\n\t        }\n\t    }\n\t drawGrid() {\n\t        const ctx = this.ctx;\n\t        const opts = this.options;\n\t        const { angleLines , grid , border  } = opts;\n\t        const labelCount = this._pointLabels.length;\n\t        let i, offset, position;\n\t        if (opts.pointLabels.display) {\n\t            drawPointLabels(this, labelCount);\n\t        }\n\t        if (grid.display) {\n\t            this.ticks.forEach((tick, index)=>{\n\t                if (index !== 0 || index === 0 && this.min < 0) {\n\t                    offset = this.getDistanceFromCenterForValue(tick.value);\n\t                    const context = this.getContext(index);\n\t                    const optsAtIndex = grid.setContext(context);\n\t                    const optsAtIndexBorder = border.setContext(context);\n\t                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n\t                }\n\t            });\n\t        }\n\t        if (angleLines.display) {\n\t            ctx.save();\n\t            for(i = labelCount - 1; i >= 0; i--){\n\t                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n\t                const { color , lineWidth  } = optsAtIndex;\n\t                if (!lineWidth || !color) {\n\t                    continue;\n\t                }\n\t                ctx.lineWidth = lineWidth;\n\t                ctx.strokeStyle = color;\n\t                ctx.setLineDash(optsAtIndex.borderDash);\n\t                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\t                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n\t                position = this.getPointPosition(i, offset);\n\t                ctx.beginPath();\n\t                ctx.moveTo(this.xCenter, this.yCenter);\n\t                ctx.lineTo(position.x, position.y);\n\t                ctx.stroke();\n\t            }\n\t            ctx.restore();\n\t        }\n\t    }\n\t drawBorder() {}\n\t drawLabels() {\n\t        const ctx = this.ctx;\n\t        const opts = this.options;\n\t        const tickOpts = opts.ticks;\n\t        if (!tickOpts.display) {\n\t            return;\n\t        }\n\t        const startAngle = this.getIndexAngle(0);\n\t        let offset, width;\n\t        ctx.save();\n\t        ctx.translate(this.xCenter, this.yCenter);\n\t        ctx.rotate(startAngle);\n\t        ctx.textAlign = 'center';\n\t        ctx.textBaseline = 'middle';\n\t        this.ticks.forEach((tick, index)=>{\n\t            if (index === 0 && this.min >= 0 && !opts.reverse) {\n\t                return;\n\t            }\n\t            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n\t            const tickFont = helpers_segment.toFont(optsAtIndex.font);\n\t            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\t            if (optsAtIndex.showLabelBackdrop) {\n\t                ctx.font = tickFont.string;\n\t                width = ctx.measureText(tick.label).width;\n\t                ctx.fillStyle = optsAtIndex.backdropColor;\n\t                const padding = helpers_segment.toPadding(optsAtIndex.backdropPadding);\n\t                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n\t            }\n\t            helpers_segment.renderText(ctx, tick.label, 0, -offset, tickFont, {\n\t                color: optsAtIndex.color,\n\t                strokeColor: optsAtIndex.textStrokeColor,\n\t                strokeWidth: optsAtIndex.textStrokeWidth\n\t            });\n\t        });\n\t        ctx.restore();\n\t    }\n\t drawTitle() {}\n\t}\n\n\tconst INTERVALS = {\n\t    millisecond: {\n\t        common: true,\n\t        size: 1,\n\t        steps: 1000\n\t    },\n\t    second: {\n\t        common: true,\n\t        size: 1000,\n\t        steps: 60\n\t    },\n\t    minute: {\n\t        common: true,\n\t        size: 60000,\n\t        steps: 60\n\t    },\n\t    hour: {\n\t        common: true,\n\t        size: 3600000,\n\t        steps: 24\n\t    },\n\t    day: {\n\t        common: true,\n\t        size: 86400000,\n\t        steps: 30\n\t    },\n\t    week: {\n\t        common: false,\n\t        size: 604800000,\n\t        steps: 4\n\t    },\n\t    month: {\n\t        common: true,\n\t        size: 2.628e9,\n\t        steps: 12\n\t    },\n\t    quarter: {\n\t        common: false,\n\t        size: 7.884e9,\n\t        steps: 4\n\t    },\n\t    year: {\n\t        common: true,\n\t        size: 3.154e10\n\t    }\n\t};\n\t const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n\t function sorter(a, b) {\n\t    return a - b;\n\t}\n\t function parse(scale, input) {\n\t    if (helpers_segment.isNullOrUndef(input)) {\n\t        return null;\n\t    }\n\t    const adapter = scale._adapter;\n\t    const { parser , round , isoWeekday  } = scale._parseOpts;\n\t    let value = input;\n\t    if (typeof parser === 'function') {\n\t        value = parser(value);\n\t    }\n\t    if (!helpers_segment.isNumberFinite(value)) {\n\t        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n\t    }\n\t    if (value === null) {\n\t        return null;\n\t    }\n\t    if (round) {\n\t        value = round === 'week' && (helpers_segment.isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n\t    }\n\t    return +value;\n\t}\n\t function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n\t    const ilen = UNITS.length;\n\t    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n\t        const interval = INTERVALS[UNITS[i]];\n\t        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\t        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n\t            return UNITS[i];\n\t        }\n\t    }\n\t    return UNITS[ilen - 1];\n\t}\n\t function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n\t    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n\t        const unit = UNITS[i];\n\t        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n\t            return unit;\n\t        }\n\t    }\n\t    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n\t}\n\t function determineMajorUnit(unit) {\n\t    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n\t        if (INTERVALS[UNITS[i]].common) {\n\t            return UNITS[i];\n\t        }\n\t    }\n\t}\n\t function addTick(ticks, time, timestamps) {\n\t    if (!timestamps) {\n\t        ticks[time] = true;\n\t    } else if (timestamps.length) {\n\t        const { lo , hi  } = helpers_segment._lookup(timestamps, time);\n\t        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n\t        ticks[timestamp] = true;\n\t    }\n\t}\n\t function setMajorTicks(scale, ticks, map, majorUnit) {\n\t    const adapter = scale._adapter;\n\t    const first = +adapter.startOf(ticks[0].value, majorUnit);\n\t    const last = ticks[ticks.length - 1].value;\n\t    let major, index;\n\t    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n\t        index = map[major];\n\t        if (index >= 0) {\n\t            ticks[index].major = true;\n\t        }\n\t    }\n\t    return ticks;\n\t}\n\t function ticksFromTimestamps(scale, values, majorUnit) {\n\t    const ticks = [];\n\t     const map = {};\n\t    const ilen = values.length;\n\t    let i, value;\n\t    for(i = 0; i < ilen; ++i){\n\t        value = values[i];\n\t        map[value] = i;\n\t        ticks.push({\n\t            value,\n\t            major: false\n\t        });\n\t    }\n\t    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n\t}\n\tclass TimeScale extends Scale {\n\t    static id = 'time';\n\t static defaults = {\n\t bounds: 'data',\n\t        adapters: {},\n\t        time: {\n\t            parser: false,\n\t            unit: false,\n\t            round: false,\n\t            isoWeekday: false,\n\t            minUnit: 'millisecond',\n\t            displayFormats: {}\n\t        },\n\t        ticks: {\n\t source: 'auto',\n\t            callback: false,\n\t            major: {\n\t                enabled: false\n\t            }\n\t        }\n\t    };\n\t constructor(props){\n\t        super(props);\n\t         this._cache = {\n\t            data: [],\n\t            labels: [],\n\t            all: []\n\t        };\n\t         this._unit = 'day';\n\t         this._majorUnit = undefined;\n\t        this._offsets = {};\n\t        this._normalized = false;\n\t        this._parseOpts = undefined;\n\t    }\n\t    init(scaleOpts, opts = {}) {\n\t        const time = scaleOpts.time || (scaleOpts.time = {});\n\t         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\t        adapter.init(opts);\n\t        helpers_segment.mergeIf(time.displayFormats, adapter.formats());\n\t        this._parseOpts = {\n\t            parser: time.parser,\n\t            round: time.round,\n\t            isoWeekday: time.isoWeekday\n\t        };\n\t        super.init(scaleOpts);\n\t        this._normalized = opts.normalized;\n\t    }\n\t parse(raw, index) {\n\t        if (raw === undefined) {\n\t            return null;\n\t        }\n\t        return parse(this, raw);\n\t    }\n\t    beforeLayout() {\n\t        super.beforeLayout();\n\t        this._cache = {\n\t            data: [],\n\t            labels: [],\n\t            all: []\n\t        };\n\t    }\n\t    determineDataLimits() {\n\t        const options = this.options;\n\t        const adapter = this._adapter;\n\t        const unit = options.time.unit || 'day';\n\t        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n\t function _applyBounds(bounds) {\n\t            if (!minDefined && !isNaN(bounds.min)) {\n\t                min = Math.min(min, bounds.min);\n\t            }\n\t            if (!maxDefined && !isNaN(bounds.max)) {\n\t                max = Math.max(max, bounds.max);\n\t            }\n\t        }\n\t        if (!minDefined || !maxDefined) {\n\t            _applyBounds(this._getLabelBounds());\n\t            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n\t                _applyBounds(this.getMinMax(false));\n\t            }\n\t        }\n\t        min = helpers_segment.isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n\t        max = helpers_segment.isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\t        this.min = Math.min(min, max - 1);\n\t        this.max = Math.max(min + 1, max);\n\t    }\n\t _getLabelBounds() {\n\t        const arr = this.getLabelTimestamps();\n\t        let min = Number.POSITIVE_INFINITY;\n\t        let max = Number.NEGATIVE_INFINITY;\n\t        if (arr.length) {\n\t            min = arr[0];\n\t            max = arr[arr.length - 1];\n\t        }\n\t        return {\n\t            min,\n\t            max\n\t        };\n\t    }\n\t buildTicks() {\n\t        const options = this.options;\n\t        const timeOpts = options.time;\n\t        const tickOpts = options.ticks;\n\t        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\t        if (options.bounds === 'ticks' && timestamps.length) {\n\t            this.min = this._userMin || timestamps[0];\n\t            this.max = this._userMax || timestamps[timestamps.length - 1];\n\t        }\n\t        const min = this.min;\n\t        const max = this.max;\n\t        const ticks = helpers_segment._filterBetween(timestamps, min, max);\n\t        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n\t        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n\t        this.initOffsets(timestamps);\n\t        if (options.reverse) {\n\t            ticks.reverse();\n\t        }\n\t        return ticksFromTimestamps(this, ticks, this._majorUnit);\n\t    }\n\t    afterAutoSkip() {\n\t        if (this.options.offsetAfterAutoskip) {\n\t            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n\t        }\n\t    }\n\t initOffsets(timestamps = []) {\n\t        let start = 0;\n\t        let end = 0;\n\t        let first, last;\n\t        if (this.options.offset && timestamps.length) {\n\t            first = this.getDecimalForValue(timestamps[0]);\n\t            if (timestamps.length === 1) {\n\t                start = 1 - first;\n\t            } else {\n\t                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n\t            }\n\t            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\t            if (timestamps.length === 1) {\n\t                end = last;\n\t            } else {\n\t                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n\t            }\n\t        }\n\t        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n\t        start = helpers_segment._limitValue(start, 0, limit);\n\t        end = helpers_segment._limitValue(end, 0, limit);\n\t        this._offsets = {\n\t            start,\n\t            end,\n\t            factor: 1 / (start + 1 + end)\n\t        };\n\t    }\n\t _generate() {\n\t        const adapter = this._adapter;\n\t        const min = this.min;\n\t        const max = this.max;\n\t        const options = this.options;\n\t        const timeOpts = options.time;\n\t        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n\t        const stepSize = helpers_segment.valueOrDefault(options.ticks.stepSize, 1);\n\t        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n\t        const hasWeekday = helpers_segment.isNumber(weekday) || weekday === true;\n\t        const ticks = {};\n\t        let first = min;\n\t        let time, count;\n\t        if (hasWeekday) {\n\t            first = +adapter.startOf(first, 'isoWeek', weekday);\n\t        }\n\t        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\t        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n\t            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n\t        }\n\t        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\t        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n\t            addTick(ticks, time, timestamps);\n\t        }\n\t        if (time === max || options.bounds === 'ticks' || count === 1) {\n\t            addTick(ticks, time, timestamps);\n\t        }\n\t        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n\t    }\n\t getLabelForValue(value) {\n\t        const adapter = this._adapter;\n\t        const timeOpts = this.options.time;\n\t        if (timeOpts.tooltipFormat) {\n\t            return adapter.format(value, timeOpts.tooltipFormat);\n\t        }\n\t        return adapter.format(value, timeOpts.displayFormats.datetime);\n\t    }\n\t format(value, format) {\n\t        const options = this.options;\n\t        const formats = options.time.displayFormats;\n\t        const unit = this._unit;\n\t        const fmt = format || formats[unit];\n\t        return this._adapter.format(value, fmt);\n\t    }\n\t _tickFormatFunction(time, index, ticks, format) {\n\t        const options = this.options;\n\t        const formatter = options.ticks.callback;\n\t        if (formatter) {\n\t            return helpers_segment.callback(formatter, [\n\t                time,\n\t                index,\n\t                ticks\n\t            ], this);\n\t        }\n\t        const formats = options.time.displayFormats;\n\t        const unit = this._unit;\n\t        const majorUnit = this._majorUnit;\n\t        const minorFormat = unit && formats[unit];\n\t        const majorFormat = majorUnit && formats[majorUnit];\n\t        const tick = ticks[index];\n\t        const major = majorUnit && majorFormat && tick && tick.major;\n\t        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n\t    }\n\t generateTickLabels(ticks) {\n\t        let i, ilen, tick;\n\t        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n\t            tick = ticks[i];\n\t            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n\t        }\n\t    }\n\t getDecimalForValue(value) {\n\t        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n\t    }\n\t getPixelForValue(value) {\n\t        const offsets = this._offsets;\n\t        const pos = this.getDecimalForValue(value);\n\t        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n\t    }\n\t getValueForPixel(pixel) {\n\t        const offsets = this._offsets;\n\t        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n\t        return this.min + pos * (this.max - this.min);\n\t    }\n\t _getLabelSize(label) {\n\t        const ticksOpts = this.options.ticks;\n\t        const tickLabelWidth = this.ctx.measureText(label).width;\n\t        const angle = helpers_segment.toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n\t        const cosRotation = Math.cos(angle);\n\t        const sinRotation = Math.sin(angle);\n\t        const tickFontSize = this._resolveTickFontOptions(0).size;\n\t        return {\n\t            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n\t            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n\t        };\n\t    }\n\t _getLabelCapacity(exampleTime) {\n\t        const timeOpts = this.options.time;\n\t        const displayFormats = timeOpts.displayFormats;\n\t        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\t        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n\t            exampleTime\n\t        ], this._majorUnit), format);\n\t        const size = this._getLabelSize(exampleLabel);\n\t        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n\t        return capacity > 0 ? capacity : 1;\n\t    }\n\t getDataTimestamps() {\n\t        let timestamps = this._cache.data || [];\n\t        let i, ilen;\n\t        if (timestamps.length) {\n\t            return timestamps;\n\t        }\n\t        const metas = this.getMatchingVisibleMetas();\n\t        if (this._normalized && metas.length) {\n\t            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n\t        }\n\t        for(i = 0, ilen = metas.length; i < ilen; ++i){\n\t            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n\t        }\n\t        return this._cache.data = this.normalize(timestamps);\n\t    }\n\t getLabelTimestamps() {\n\t        const timestamps = this._cache.labels || [];\n\t        let i, ilen;\n\t        if (timestamps.length) {\n\t            return timestamps;\n\t        }\n\t        const labels = this.getLabels();\n\t        for(i = 0, ilen = labels.length; i < ilen; ++i){\n\t            timestamps.push(parse(this, labels[i]));\n\t        }\n\t        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n\t    }\n\t normalize(values) {\n\t        return helpers_segment._arrayUnique(values.sort(sorter));\n\t    }\n\t}\n\n\tfunction interpolate(table, val, reverse) {\n\t    let lo = 0;\n\t    let hi = table.length - 1;\n\t    let prevSource, nextSource, prevTarget, nextTarget;\n\t    if (reverse) {\n\t        if (val >= table[lo].pos && val <= table[hi].pos) {\n\t            ({ lo , hi  } = helpers_segment._lookupByKey(table, 'pos', val));\n\t        }\n\t        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n\t        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n\t    } else {\n\t        if (val >= table[lo].time && val <= table[hi].time) {\n\t            ({ lo , hi  } = helpers_segment._lookupByKey(table, 'time', val));\n\t        }\n\t        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n\t        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n\t    }\n\t    const span = nextSource - prevSource;\n\t    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n\t}\n\tclass TimeSeriesScale extends TimeScale {\n\t    static id = 'timeseries';\n\t static defaults = TimeScale.defaults;\n\t constructor(props){\n\t        super(props);\n\t         this._table = [];\n\t         this._minPos = undefined;\n\t         this._tableRange = undefined;\n\t    }\n\t initOffsets() {\n\t        const timestamps = this._getTimestampsForTable();\n\t        const table = this._table = this.buildLookupTable(timestamps);\n\t        this._minPos = interpolate(table, this.min);\n\t        this._tableRange = interpolate(table, this.max) - this._minPos;\n\t        super.initOffsets(timestamps);\n\t    }\n\t buildLookupTable(timestamps) {\n\t        const { min , max  } = this;\n\t        const items = [];\n\t        const table = [];\n\t        let i, ilen, prev, curr, next;\n\t        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n\t            curr = timestamps[i];\n\t            if (curr >= min && curr <= max) {\n\t                items.push(curr);\n\t            }\n\t        }\n\t        if (items.length < 2) {\n\t            return [\n\t                {\n\t                    time: min,\n\t                    pos: 0\n\t                },\n\t                {\n\t                    time: max,\n\t                    pos: 1\n\t                }\n\t            ];\n\t        }\n\t        for(i = 0, ilen = items.length; i < ilen; ++i){\n\t            next = items[i + 1];\n\t            prev = items[i - 1];\n\t            curr = items[i];\n\t            if (Math.round((next + prev) / 2) !== curr) {\n\t                table.push({\n\t                    time: curr,\n\t                    pos: i / (ilen - 1)\n\t                });\n\t            }\n\t        }\n\t        return table;\n\t    }\n\t _generate() {\n\t        const min = this.min;\n\t        const max = this.max;\n\t        let timestamps = super.getDataTimestamps();\n\t        if (!timestamps.includes(min) || !timestamps.length) {\n\t            timestamps.splice(0, 0, min);\n\t        }\n\t        if (!timestamps.includes(max) || timestamps.length === 1) {\n\t            timestamps.push(max);\n\t        }\n\t        return timestamps.sort((a, b)=>a - b);\n\t    }\n\t _getTimestampsForTable() {\n\t        let timestamps = this._cache.all || [];\n\t        if (timestamps.length) {\n\t            return timestamps;\n\t        }\n\t        const data = this.getDataTimestamps();\n\t        const label = this.getLabelTimestamps();\n\t        if (data.length && label.length) {\n\t            timestamps = this.normalize(data.concat(label));\n\t        } else {\n\t            timestamps = data.length ? data : label;\n\t        }\n\t        timestamps = this._cache.all = timestamps;\n\t        return timestamps;\n\t    }\n\t getDecimalForValue(value) {\n\t        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n\t    }\n\t getValueForPixel(pixel) {\n\t        const offsets = this._offsets;\n\t        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n\t        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n\t    }\n\t}\n\n\tvar scales = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tCategoryScale: CategoryScale,\n\tLinearScale: LinearScale,\n\tLogarithmicScale: LogarithmicScale,\n\tRadialLinearScale: RadialLinearScale,\n\tTimeScale: TimeScale,\n\tTimeSeriesScale: TimeSeriesScale\n\t});\n\n\tconst registerables = [\n\t    controllers,\n\t    elements,\n\t    plugins,\n\t    scales\n\t];\n\n\tvar Ticks = chart.Ticks = helpers_segment.Ticks;\n\tvar defaults = chart.defaults = helpers_segment.defaults;\n\tvar Animation_1 = chart.Animation = Animation;\n\tvar Animations_1 = chart.Animations = Animations;\n\tvar ArcElement_1 = chart.ArcElement = ArcElement;\n\tvar BarController_1 = chart.BarController = BarController;\n\tvar BarElement_1 = chart.BarElement = BarElement;\n\tvar BasePlatform_1 = chart.BasePlatform = BasePlatform;\n\tvar BasicPlatform_1 = chart.BasicPlatform = BasicPlatform;\n\tvar BubbleController_1 = chart.BubbleController = BubbleController;\n\tvar CategoryScale_1 = chart.CategoryScale = CategoryScale;\n\tvar Chart_1 = chart.Chart = Chart;\n\tvar Colors = chart.Colors = plugin_colors;\n\tvar DatasetController_1 = chart.DatasetController = DatasetController;\n\tvar Decimation = chart.Decimation = plugin_decimation;\n\tvar DomPlatform_1 = chart.DomPlatform = DomPlatform;\n\tvar DoughnutController_1 = chart.DoughnutController = DoughnutController;\n\tvar Element_1 = chart.Element = Element;\n\tvar Filler = chart.Filler = index;\n\tvar Interaction_1 = chart.Interaction = Interaction;\n\tvar Legend_1 = chart.Legend = plugin_legend;\n\tvar LineController_1 = chart.LineController = LineController;\n\tvar LineElement_1 = chart.LineElement = LineElement;\n\tvar LinearScale_1 = chart.LinearScale = LinearScale;\n\tvar LogarithmicScale_1 = chart.LogarithmicScale = LogarithmicScale;\n\tvar PieController_1 = chart.PieController = PieController;\n\tvar PointElement_1 = chart.PointElement = PointElement;\n\tvar PolarAreaController_1 = chart.PolarAreaController = PolarAreaController;\n\tvar RadarController_1 = chart.RadarController = RadarController;\n\tvar RadialLinearScale_1 = chart.RadialLinearScale = RadialLinearScale;\n\tvar Scale_1 = chart.Scale = Scale;\n\tvar ScatterController_1 = chart.ScatterController = ScatterController;\n\tvar SubTitle = chart.SubTitle = plugin_subtitle;\n\tvar TimeScale_1 = chart.TimeScale = TimeScale;\n\tvar TimeSeriesScale_1 = chart.TimeSeriesScale = TimeSeriesScale;\n\tvar Title_1 = chart.Title = plugin_title;\n\tvar Tooltip_1 = chart.Tooltip = plugin_tooltip;\n\tvar _adapters = chart._adapters = adapters;\n\tvar _detectPlatform_1 = chart._detectPlatform = _detectPlatform;\n\tvar animator_1 = chart.animator = animator;\n\tvar controllers_1 = chart.controllers = controllers;\n\tvar elements_1 = chart.elements = elements;\n\tvar layouts_1 = chart.layouts = layouts;\n\tvar plugins_1 = chart.plugins = plugins;\n\tvar registerables_1 = chart.registerables = registerables;\n\tvar registry_1 = chart.registry = registry;\n\tvar scales_1 = chart.scales = scales;\n\n\texports.Animation_1 = Animation_1;\n\texports.Animations_1 = Animations_1;\n\texports.ArcElement_1 = ArcElement_1;\n\texports.BarController_1 = BarController_1;\n\texports.BarElement_1 = BarElement_1;\n\texports.BasePlatform_1 = BasePlatform_1;\n\texports.BasicPlatform_1 = BasicPlatform_1;\n\texports.BubbleController_1 = BubbleController_1;\n\texports.CategoryScale_1 = CategoryScale_1;\n\texports.Chart_1 = Chart_1;\n\texports.Colors = Colors;\n\texports.DatasetController_1 = DatasetController_1;\n\texports.Decimation = Decimation;\n\texports.DomPlatform_1 = DomPlatform_1;\n\texports.DoughnutController_1 = DoughnutController_1;\n\texports.Element_1 = Element_1;\n\texports.Filler = Filler;\n\texports.Interaction_1 = Interaction_1;\n\texports.Legend_1 = Legend_1;\n\texports.LineController_1 = LineController_1;\n\texports.LineElement_1 = LineElement_1;\n\texports.LinearScale_1 = LinearScale_1;\n\texports.LogarithmicScale_1 = LogarithmicScale_1;\n\texports.PieController_1 = PieController_1;\n\texports.PointElement_1 = PointElement_1;\n\texports.PolarAreaController_1 = PolarAreaController_1;\n\texports.RadarController_1 = RadarController_1;\n\texports.RadialLinearScale_1 = RadialLinearScale_1;\n\texports.Scale_1 = Scale_1;\n\texports.ScatterController_1 = ScatterController_1;\n\texports.SubTitle = SubTitle;\n\texports.Ticks = Ticks;\n\texports.TimeScale_1 = TimeScale_1;\n\texports.TimeSeriesScale_1 = TimeSeriesScale_1;\n\texports.Title_1 = Title_1;\n\texports.Tooltip_1 = Tooltip_1;\n\texports._adapters = _adapters;\n\texports._detectPlatform_1 = _detectPlatform_1;\n\texports.animator_1 = animator_1;\n\texports.chart = chart;\n\texports.controllers_1 = controllers_1;\n\texports.defaults = defaults;\n\texports.elements_1 = elements_1;\n\texports.layouts_1 = layouts_1;\n\texports.plugins_1 = plugins_1;\n\texports.registerables_1 = registerables_1;\n\texports.registry_1 = registry_1;\n\texports.scales_1 = scales_1;\n\n}));\n",
      "type": "chunk"
    }
  ]
}